{"version":3,"sources":["Streamer.js"],"names":["Dirs","fs","dirs","global","Blob","polyfill","Uri","require","EpubStreamer","opts","port","Math","round","random","root","server","localOnly","serverOrigin","urls","locals","paths","started","start","then","url","stop","kill","bookUrl","uri","filename","config","fileCache","path","DocumentDir","fetch","res","sourcePath","targetPath","push","exists","check","add","replace","lstat","stats","index","indexOf","splice","catch","err","forEach","remove"],"mappings":"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","file":"Streamer.js","sourcesContent":["import {\n  AppState\n} from 'react-native';\n\nimport StaticServer from 'react-native-static-server';\n\nimport RNFetchBlob from \"react-native-fetch-blob\"\n\nimport { zip, unzip, unzipAssets, subscribe } from 'react-native-zip-archive'\n\n\n// import { readFileSync } from \"fs\";\nimport { join } from \"path\";\n\nconst Dirs = RNFetchBlob.fs.dirs\n\nif (!global.Blob) {\n  global.Blob = RNFetchBlob.polyfill.Blob;\n}\n\nconst Uri = require(\"epubjs/lib/utils/url\");\n\nclass EpubStreamer {\n\n  constructor(opts) {\n    opts = opts || {};\n    this.port = opts.port || \"3\" + Math.round(Math.random() * 1000);\n    this.root = opts.root || \"www\";\n    this.server = new StaticServer(this.port, this.root, {localOnly: true});\n\n    this.serverOrigin = 'file://';\n\n    this.urls = [];\n    this.locals = [];\n    this.paths = [];\n\n    this.started = false;\n  }\n\n  start() {\n    this.started = true;\n    return this.server.start().then((url) => {\n      this.serverOrigin = url;\n      return url;\n    });\n  }\n\n  stop() {\n    this.started = false;\n    if (this.server) {\n      this.server.stop();\n    }\n  }\n\n  kill() {\n    this.started = false;\n    if (this.server) {\n      this.server.kill();\n    }\n  }\n\n  add(bookUrl) {\n    let uri = new Uri(bookUrl);\n    const filename = this.filename(bookUrl);\n\n    return RNFetchBlob\n      .config({\n        fileCache : true,\n        path: Dirs.DocumentDir + '/' + filename\n      })\n      .fetch(\"GET\", bookUrl)\n      .then((res) => {\n        const sourcePath = res.path();\n        const targetPath = `${Dirs.DocumentDir}/${this.root}/${filename}`;\n        const url = `${this.serverOrigin}/${filename}/`;\n\n        return unzip(sourcePath, targetPath)\n          .then((path) => {\n\n            this.urls.push(bookUrl);\n            this.locals.push(url);\n            this.paths.push(path);\n\n            // res.flush();\n\n            return url;\n          })\n      });\n  }\n\n  check(bookUrl) {\n    const filename = this.filename(bookUrl);\n    const targetPath = `${Dirs.DocumentDir}/${filename}`;\n\n    return RNFetchBlob.fs.exists(targetPath);\n  }\n\n  get(bookUrl) {\n    return this.check(bookUrl)\n      .then((exists) => {\n        if (exists) {\n          const filename = this.filename(bookUrl);\n          const url = `${this.serverOrigin}/${filename}/`;\n          return url;\n        }\n\n        return this.add(bookUrl);\n      })\n  }\n\n  filename(bookUrl) {\n    let uri = new Uri(bookUrl);\n    return uri.filename.replace(\".epub\", \"\");\n  }\n\n  remove(path) {\n    return RNFetchBlob.fs.lstat(path)\n      .then((stats) => {\n        let index = this.paths.indexOf(path);\n        this.paths.splice(index, 1);\n        this.urls.splice(index, 1);\n        this.locals.splice(index, 1);\n      })\n      .catch((err) => {})\n  }\n\n  clean() {\n    this.paths.forEach((path) => {\n      this.remove(path);\n    });\n  }\n}\n\nexport default EpubStreamer;\n"]}