var _jsxFileName="/Users/johanpoirier/workspace/tea/epubjs-rn/src/Rendition.js";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=require("react");var _react2=_interopRequireDefault(_react);var _reactNative=require("react-native");var _reactNativeWkwebviewReborn=require("react-native-wkwebview-reborn");var _reactNativeWkwebviewReborn2=_interopRequireDefault(_reactNativeWkwebviewReborn);var _eventEmitter=require("event-emitter");var _eventEmitter2=_interopRequireDefault(_eventEmitter);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var EPUBJS="(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('xmldom'), require('jszip')) :\n\ttypeof define === 'function' && define.amd ? define(['xmldom', 'jszip'], factory) :\n\t(global.ePub = factory(global.xmldom,global.JSZip));\n}(this, (function (XMLDom,JSZip) { 'use strict';\n\n\tXMLDom = XMLDom && XMLDom.hasOwnProperty('default') ? XMLDom['default'] : XMLDom;\n\tJSZip = JSZip && JSZip.hasOwnProperty('default') ? JSZip['default'] : JSZip;\n\n\tvar commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n\tfunction unwrapExports (x) {\n\t\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n\t}\n\n\tfunction createCommonjsModule(fn, module) {\n\t\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n\t}\n\n\tvar runtime = createCommonjsModule(function (module) {\n\t/**\n\t * Copyright (c) 2014-present, Facebook, Inc.\n\t *\n\t * This source code is licensed under the MIT license found in the\n\t * LICENSE file in the root directory of this source tree.\n\t */\n\n\t!(function(global) {\n\n\t  var Op = Object.prototype;\n\t  var hasOwn = Op.hasOwnProperty;\n\t  var undefined; // More compressible than void 0.\n\t  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n\t  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n\t  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n\t  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\t  var runtime = global.regeneratorRuntime;\n\t  if (runtime) {\n\t    {\n\t      // If regeneratorRuntime is defined globally and we're in a module,\n\t      // make the exports object identical to regeneratorRuntime.\n\t      module.exports = runtime;\n\t    }\n\t    // Don't bother evaluating the rest of this file if the runtime was\n\t    // already defined globally.\n\t    return;\n\t  }\n\n\t  // Define the runtime globally (as expected by generated code) as either\n\t  // module.exports (if we're in a module) or a new, empty object.\n\t  runtime = global.regeneratorRuntime = module.exports;\n\n\t  function wrap(innerFn, outerFn, self, tryLocsList) {\n\t    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n\t    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n\t    var generator = Object.create(protoGenerator.prototype);\n\t    var context = new Context(tryLocsList || []);\n\n\t    // The ._invoke method unifies the implementations of the .next,\n\t    // .throw, and .return methods.\n\t    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n\t    return generator;\n\t  }\n\t  runtime.wrap = wrap;\n\n\t  // Try/catch helper to minimize deoptimizations. Returns a completion\n\t  // record like context.tryEntries[i].completion. This interface could\n\t  // have been (and was previously) designed to take a closure to be\n\t  // invoked without arguments, but in all the cases we care about we\n\t  // already have an existing method we want to call, so there's no need\n\t  // to create a new function object. We can even get away with assuming\n\t  // the method takes exactly one argument, since that happens to be true\n\t  // in every case, so we don't have to touch the arguments object. The\n\t  // only additional allocation required is the completion record, which\n\t  // has a stable shape and so hopefully should be cheap to allocate.\n\t  function tryCatch(fn, obj, arg) {\n\t    try {\n\t      return { type: \"normal\", arg: fn.call(obj, arg) };\n\t    } catch (err) {\n\t      return { type: \"throw\", arg: err };\n\t    }\n\t  }\n\n\t  var GenStateSuspendedStart = \"suspendedStart\";\n\t  var GenStateSuspendedYield = \"suspendedYield\";\n\t  var GenStateExecuting = \"executing\";\n\t  var GenStateCompleted = \"completed\";\n\n\t  // Returning this object from the innerFn has the same effect as\n\t  // breaking out of the dispatch switch statement.\n\t  var ContinueSentinel = {};\n\n\t  // Dummy constructor functions that we use as the .constructor and\n\t  // .constructor.prototype properties for functions that return Generator\n\t  // objects. For full spec compliance, you may wish to configure your\n\t  // minifier not to mangle the names of these two functions.\n\t  function Generator() {}\n\t  function GeneratorFunction() {}\n\t  function GeneratorFunctionPrototype() {}\n\n\t  // This is a polyfill for %IteratorPrototype% for environments that\n\t  // don't natively support it.\n\t  var IteratorPrototype = {};\n\t  IteratorPrototype[iteratorSymbol] = function () {\n\t    return this;\n\t  };\n\n\t  var getProto = Object.getPrototypeOf;\n\t  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\t  if (NativeIteratorPrototype &&\n\t      NativeIteratorPrototype !== Op &&\n\t      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n\t    // This environment has a native %IteratorPrototype%; use it instead\n\t    // of the polyfill.\n\t    IteratorPrototype = NativeIteratorPrototype;\n\t  }\n\n\t  var Gp = GeneratorFunctionPrototype.prototype =\n\t    Generator.prototype = Object.create(IteratorPrototype);\n\t  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n\t  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n\t  GeneratorFunctionPrototype[toStringTagSymbol] =\n\t    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n\t  // Helper for defining the .next, .throw, and .return methods of the\n\t  // Iterator interface in terms of a single ._invoke method.\n\t  function defineIteratorMethods(prototype) {\n\t    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n\t      prototype[method] = function(arg) {\n\t        return this._invoke(method, arg);\n\t      };\n\t    });\n\t  }\n\n\t  runtime.isGeneratorFunction = function(genFun) {\n\t    var ctor = typeof genFun === \"function\" && genFun.constructor;\n\t    return ctor\n\t      ? ctor === GeneratorFunction ||\n\t        // For the native GeneratorFunction constructor, the best we can\n\t        // do is to check its .name property.\n\t        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n\t      : false;\n\t  };\n\n\t  runtime.mark = function(genFun) {\n\t    if (Object.setPrototypeOf) {\n\t      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n\t    } else {\n\t      genFun.__proto__ = GeneratorFunctionPrototype;\n\t      if (!(toStringTagSymbol in genFun)) {\n\t        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n\t      }\n\t    }\n\t    genFun.prototype = Object.create(Gp);\n\t    return genFun;\n\t  };\n\n\t  // Within the body of any async function, `await x` is transformed to\n\t  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n\t  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n\t  // meant to be awaited.\n\t  runtime.awrap = function(arg) {\n\t    return { __await: arg };\n\t  };\n\n\t  function AsyncIterator(generator) {\n\t    function invoke(method, arg, resolve, reject) {\n\t      var record = tryCatch(generator[method], generator, arg);\n\t      if (record.type === \"throw\") {\n\t        reject(record.arg);\n\t      } else {\n\t        var result = record.arg;\n\t        var value = result.value;\n\t        if (value &&\n\t            typeof value === \"object\" &&\n\t            hasOwn.call(value, \"__await\")) {\n\t          return Promise.resolve(value.__await).then(function(value) {\n\t            invoke(\"next\", value, resolve, reject);\n\t          }, function(err) {\n\t            invoke(\"throw\", err, resolve, reject);\n\t          });\n\t        }\n\n\t        return Promise.resolve(value).then(function(unwrapped) {\n\t          // When a yielded Promise is resolved, its final value becomes\n\t          // the .value of the Promise<{value,done}> result for the\n\t          // current iteration.\n\t          result.value = unwrapped;\n\t          resolve(result);\n\t        }, function(error) {\n\t          // If a rejected Promise was yielded, throw the rejection back\n\t          // into the async generator function so it can be handled there.\n\t          return invoke(\"throw\", error, resolve, reject);\n\t        });\n\t      }\n\t    }\n\n\t    var previousPromise;\n\n\t    function enqueue(method, arg) {\n\t      function callInvokeWithMethodAndArg() {\n\t        return new Promise(function(resolve, reject) {\n\t          invoke(method, arg, resolve, reject);\n\t        });\n\t      }\n\n\t      return previousPromise =\n\t        // If enqueue has been called before, then we want to wait until\n\t        // all previous Promises have been resolved before calling invoke,\n\t        // so that results are always delivered in the correct order. If\n\t        // enqueue has not been called before, then it is important to\n\t        // call invoke immediately, without waiting on a callback to fire,\n\t        // so that the async generator function has the opportunity to do\n\t        // any necessary setup in a predictable way. This predictability\n\t        // is why the Promise constructor synchronously invokes its\n\t        // executor callback, and why async functions synchronously\n\t        // execute code before the first await. Since we implement simple\n\t        // async functions in terms of async generators, it is especially\n\t        // important to get this right, even though it requires care.\n\t        previousPromise ? previousPromise.then(\n\t          callInvokeWithMethodAndArg,\n\t          // Avoid propagating failures to Promises returned by later\n\t          // invocations of the iterator.\n\t          callInvokeWithMethodAndArg\n\t        ) : callInvokeWithMethodAndArg();\n\t    }\n\n\t    // Define the unified helper method that is used to implement .next,\n\t    // .throw, and .return (see defineIteratorMethods).\n\t    this._invoke = enqueue;\n\t  }\n\n\t  defineIteratorMethods(AsyncIterator.prototype);\n\t  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n\t    return this;\n\t  };\n\t  runtime.AsyncIterator = AsyncIterator;\n\n\t  // Note that simple async functions are implemented on top of\n\t  // AsyncIterator objects; they just return a Promise for the value of\n\t  // the final result produced by the iterator.\n\t  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n\t    var iter = new AsyncIterator(\n\t      wrap(innerFn, outerFn, self, tryLocsList)\n\t    );\n\n\t    return runtime.isGeneratorFunction(outerFn)\n\t      ? iter // If outerFn is a generator, return the full iterator.\n\t      : iter.next().then(function(result) {\n\t          return result.done ? result.value : iter.next();\n\t        });\n\t  };\n\n\t  function makeInvokeMethod(innerFn, self, context) {\n\t    var state = GenStateSuspendedStart;\n\n\t    return function invoke(method, arg) {\n\t      if (state === GenStateExecuting) {\n\t        throw new Error(\"Generator is already running\");\n\t      }\n\n\t      if (state === GenStateCompleted) {\n\t        if (method === \"throw\") {\n\t          throw arg;\n\t        }\n\n\t        // Be forgiving, per 25.3.3.3.3 of the spec:\n\t        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\t        return doneResult();\n\t      }\n\n\t      context.method = method;\n\t      context.arg = arg;\n\n\t      while (true) {\n\t        var delegate = context.delegate;\n\t        if (delegate) {\n\t          var delegateResult = maybeInvokeDelegate(delegate, context);\n\t          if (delegateResult) {\n\t            if (delegateResult === ContinueSentinel) continue;\n\t            return delegateResult;\n\t          }\n\t        }\n\n\t        if (context.method === \"next\") {\n\t          // Setting context._sent for legacy support of Babel's\n\t          // function.sent implementation.\n\t          context.sent = context._sent = context.arg;\n\n\t        } else if (context.method === \"throw\") {\n\t          if (state === GenStateSuspendedStart) {\n\t            state = GenStateCompleted;\n\t            throw context.arg;\n\t          }\n\n\t          context.dispatchException(context.arg);\n\n\t        } else if (context.method === \"return\") {\n\t          context.abrupt(\"return\", context.arg);\n\t        }\n\n\t        state = GenStateExecuting;\n\n\t        var record = tryCatch(innerFn, self, context);\n\t        if (record.type === \"normal\") {\n\t          // If an exception is thrown from innerFn, we leave state ===\n\t          // GenStateExecuting and loop back for another invocation.\n\t          state = context.done\n\t            ? GenStateCompleted\n\t            : GenStateSuspendedYield;\n\n\t          if (record.arg === ContinueSentinel) {\n\t            continue;\n\t          }\n\n\t          return {\n\t            value: record.arg,\n\t            done: context.done\n\t          };\n\n\t        } else if (record.type === \"throw\") {\n\t          state = GenStateCompleted;\n\t          // Dispatch the exception by looping back around to the\n\t          // context.dispatchException(context.arg) call above.\n\t          context.method = \"throw\";\n\t          context.arg = record.arg;\n\t        }\n\t      }\n\t    };\n\t  }\n\n\t  // Call delegate.iterator[context.method](context.arg) and handle the\n\t  // result, either by returning a { value, done } result from the\n\t  // delegate iterator, or by modifying context.method and context.arg,\n\t  // setting context.delegate to null, and returning the ContinueSentinel.\n\t  function maybeInvokeDelegate(delegate, context) {\n\t    var method = delegate.iterator[context.method];\n\t    if (method === undefined) {\n\t      // A .throw or .return when the delegate iterator has no .throw\n\t      // method always terminates the yield* loop.\n\t      context.delegate = null;\n\n\t      if (context.method === \"throw\") {\n\t        if (delegate.iterator.return) {\n\t          // If the delegate iterator has a return method, give it a\n\t          // chance to clean up.\n\t          context.method = \"return\";\n\t          context.arg = undefined;\n\t          maybeInvokeDelegate(delegate, context);\n\n\t          if (context.method === \"throw\") {\n\t            // If maybeInvokeDelegate(context) changed context.method from\n\t            // \"return\" to \"throw\", let that override the TypeError below.\n\t            return ContinueSentinel;\n\t          }\n\t        }\n\n\t        context.method = \"throw\";\n\t        context.arg = new TypeError(\n\t          \"The iterator does not provide a 'throw' method\");\n\t      }\n\n\t      return ContinueSentinel;\n\t    }\n\n\t    var record = tryCatch(method, delegate.iterator, context.arg);\n\n\t    if (record.type === \"throw\") {\n\t      context.method = \"throw\";\n\t      context.arg = record.arg;\n\t      context.delegate = null;\n\t      return ContinueSentinel;\n\t    }\n\n\t    var info = record.arg;\n\n\t    if (! info) {\n\t      context.method = \"throw\";\n\t      context.arg = new TypeError(\"iterator result is not an object\");\n\t      context.delegate = null;\n\t      return ContinueSentinel;\n\t    }\n\n\t    if (info.done) {\n\t      // Assign the result of the finished delegate to the temporary\n\t      // variable specified by delegate.resultName (see delegateYield).\n\t      context[delegate.resultName] = info.value;\n\n\t      // Resume execution at the desired location (see delegateYield).\n\t      context.next = delegate.nextLoc;\n\n\t      // If context.method was \"throw\" but the delegate handled the\n\t      // exception, let the outer generator proceed normally. If\n\t      // context.method was \"next\", forget context.arg since it has been\n\t      // \"consumed\" by the delegate iterator. If context.method was\n\t      // \"return\", allow the original .return call to continue in the\n\t      // outer generator.\n\t      if (context.method !== \"return\") {\n\t        context.method = \"next\";\n\t        context.arg = undefined;\n\t      }\n\n\t    } else {\n\t      // Re-yield the result returned by the delegate method.\n\t      return info;\n\t    }\n\n\t    // The delegate iterator is finished, so forget it and continue with\n\t    // the outer generator.\n\t    context.delegate = null;\n\t    return ContinueSentinel;\n\t  }\n\n\t  // Define Generator.prototype.{next,throw,return} in terms of the\n\t  // unified ._invoke helper method.\n\t  defineIteratorMethods(Gp);\n\n\t  Gp[toStringTagSymbol] = \"Generator\";\n\n\t  // A Generator should always return itself as the iterator object when the\n\t  // @@iterator function is called on it. Some browsers' implementations of the\n\t  // iterator prototype chain incorrectly implement this, causing the Generator\n\t  // object to not be returned from this call. This ensures that doesn't happen.\n\t  // See https://github.com/facebook/regenerator/issues/274 for more details.\n\t  Gp[iteratorSymbol] = function() {\n\t    return this;\n\t  };\n\n\t  Gp.toString = function() {\n\t    return \"[object Generator]\";\n\t  };\n\n\t  function pushTryEntry(locs) {\n\t    var entry = { tryLoc: locs[0] };\n\n\t    if (1 in locs) {\n\t      entry.catchLoc = locs[1];\n\t    }\n\n\t    if (2 in locs) {\n\t      entry.finallyLoc = locs[2];\n\t      entry.afterLoc = locs[3];\n\t    }\n\n\t    this.tryEntries.push(entry);\n\t  }\n\n\t  function resetTryEntry(entry) {\n\t    var record = entry.completion || {};\n\t    record.type = \"normal\";\n\t    delete record.arg;\n\t    entry.completion = record;\n\t  }\n\n\t  function Context(tryLocsList) {\n\t    // The root entry object (effectively a try statement without a catch\n\t    // or a finally block) gives us a place to store values thrown from\n\t    // locations where there is no enclosing try statement.\n\t    this.tryEntries = [{ tryLoc: \"root\" }];\n\t    tryLocsList.forEach(pushTryEntry, this);\n\t    this.reset(true);\n\t  }\n\n\t  runtime.keys = function(object) {\n\t    var keys = [];\n\t    for (var key in object) {\n\t      keys.push(key);\n\t    }\n\t    keys.reverse();\n\n\t    // Rather than returning an object with a next method, we keep\n\t    // things simple and return the next function itself.\n\t    return function next() {\n\t      while (keys.length) {\n\t        var key = keys.pop();\n\t        if (key in object) {\n\t          next.value = key;\n\t          next.done = false;\n\t          return next;\n\t        }\n\t      }\n\n\t      // To avoid creating an additional object, we just hang the .value\n\t      // and .done properties off the next function object itself. This\n\t      // also ensures that the minifier will not anonymize the function.\n\t      next.done = true;\n\t      return next;\n\t    };\n\t  };\n\n\t  function values(iterable) {\n\t    if (iterable) {\n\t      var iteratorMethod = iterable[iteratorSymbol];\n\t      if (iteratorMethod) {\n\t        return iteratorMethod.call(iterable);\n\t      }\n\n\t      if (typeof iterable.next === \"function\") {\n\t        return iterable;\n\t      }\n\n\t      if (!isNaN(iterable.length)) {\n\t        var i = -1, next = function next() {\n\t          while (++i < iterable.length) {\n\t            if (hasOwn.call(iterable, i)) {\n\t              next.value = iterable[i];\n\t              next.done = false;\n\t              return next;\n\t            }\n\t          }\n\n\t          next.value = undefined;\n\t          next.done = true;\n\n\t          return next;\n\t        };\n\n\t        return next.next = next;\n\t      }\n\t    }\n\n\t    // Return an iterator with no values.\n\t    return { next: doneResult };\n\t  }\n\t  runtime.values = values;\n\n\t  function doneResult() {\n\t    return { value: undefined, done: true };\n\t  }\n\n\t  Context.prototype = {\n\t    constructor: Context,\n\n\t    reset: function(skipTempReset) {\n\t      this.prev = 0;\n\t      this.next = 0;\n\t      // Resetting context._sent for legacy support of Babel's\n\t      // function.sent implementation.\n\t      this.sent = this._sent = undefined;\n\t      this.done = false;\n\t      this.delegate = null;\n\n\t      this.method = \"next\";\n\t      this.arg = undefined;\n\n\t      this.tryEntries.forEach(resetTryEntry);\n\n\t      if (!skipTempReset) {\n\t        for (var name in this) {\n\t          // Not sure about the optimal order of these conditions:\n\t          if (name.charAt(0) === \"t\" &&\n\t              hasOwn.call(this, name) &&\n\t              !isNaN(+name.slice(1))) {\n\t            this[name] = undefined;\n\t          }\n\t        }\n\t      }\n\t    },\n\n\t    stop: function() {\n\t      this.done = true;\n\n\t      var rootEntry = this.tryEntries[0];\n\t      var rootRecord = rootEntry.completion;\n\t      if (rootRecord.type === \"throw\") {\n\t        throw rootRecord.arg;\n\t      }\n\n\t      return this.rval;\n\t    },\n\n\t    dispatchException: function(exception) {\n\t      if (this.done) {\n\t        throw exception;\n\t      }\n\n\t      var context = this;\n\t      function handle(loc, caught) {\n\t        record.type = \"throw\";\n\t        record.arg = exception;\n\t        context.next = loc;\n\n\t        if (caught) {\n\t          // If the dispatched exception was caught by a catch block,\n\t          // then let that catch block handle the exception normally.\n\t          context.method = \"next\";\n\t          context.arg = undefined;\n\t        }\n\n\t        return !! caught;\n\t      }\n\n\t      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n\t        var entry = this.tryEntries[i];\n\t        var record = entry.completion;\n\n\t        if (entry.tryLoc === \"root\") {\n\t          // Exception thrown outside of any try block that could handle\n\t          // it, so set the completion value of the entire function to\n\t          // throw the exception.\n\t          return handle(\"end\");\n\t        }\n\n\t        if (entry.tryLoc <= this.prev) {\n\t          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n\t          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n\t          if (hasCatch && hasFinally) {\n\t            if (this.prev < entry.catchLoc) {\n\t              return handle(entry.catchLoc, true);\n\t            } else if (this.prev < entry.finallyLoc) {\n\t              return handle(entry.finallyLoc);\n\t            }\n\n\t          } else if (hasCatch) {\n\t            if (this.prev < entry.catchLoc) {\n\t              return handle(entry.catchLoc, true);\n\t            }\n\n\t          } else if (hasFinally) {\n\t            if (this.prev < entry.finallyLoc) {\n\t              return handle(entry.finallyLoc);\n\t            }\n\n\t          } else {\n\t            throw new Error(\"try statement without catch or finally\");\n\t          }\n\t        }\n\t      }\n\t    },\n\n\t    abrupt: function(type, arg) {\n\t      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n\t        var entry = this.tryEntries[i];\n\t        if (entry.tryLoc <= this.prev &&\n\t            hasOwn.call(entry, \"finallyLoc\") &&\n\t            this.prev < entry.finallyLoc) {\n\t          var finallyEntry = entry;\n\t          break;\n\t        }\n\t      }\n\n\t      if (finallyEntry &&\n\t          (type === \"break\" ||\n\t           type === \"continue\") &&\n\t          finallyEntry.tryLoc <= arg &&\n\t          arg <= finallyEntry.finallyLoc) {\n\t        // Ignore the finally entry if control is not jumping to a\n\t        // location outside the try/catch block.\n\t        finallyEntry = null;\n\t      }\n\n\t      var record = finallyEntry ? finallyEntry.completion : {};\n\t      record.type = type;\n\t      record.arg = arg;\n\n\t      if (finallyEntry) {\n\t        this.method = \"next\";\n\t        this.next = finallyEntry.finallyLoc;\n\t        return ContinueSentinel;\n\t      }\n\n\t      return this.complete(record);\n\t    },\n\n\t    complete: function(record, afterLoc) {\n\t      if (record.type === \"throw\") {\n\t        throw record.arg;\n\t      }\n\n\t      if (record.type === \"break\" ||\n\t          record.type === \"continue\") {\n\t        this.next = record.arg;\n\t      } else if (record.type === \"return\") {\n\t        this.rval = this.arg = record.arg;\n\t        this.method = \"return\";\n\t        this.next = \"end\";\n\t      } else if (record.type === \"normal\" && afterLoc) {\n\t        this.next = afterLoc;\n\t      }\n\n\t      return ContinueSentinel;\n\t    },\n\n\t    finish: function(finallyLoc) {\n\t      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n\t        var entry = this.tryEntries[i];\n\t        if (entry.finallyLoc === finallyLoc) {\n\t          this.complete(entry.completion, entry.afterLoc);\n\t          resetTryEntry(entry);\n\t          return ContinueSentinel;\n\t        }\n\t      }\n\t    },\n\n\t    \"catch\": function(tryLoc) {\n\t      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n\t        var entry = this.tryEntries[i];\n\t        if (entry.tryLoc === tryLoc) {\n\t          var record = entry.completion;\n\t          if (record.type === \"throw\") {\n\t            var thrown = record.arg;\n\t            resetTryEntry(entry);\n\t          }\n\t          return thrown;\n\t        }\n\t      }\n\n\t      // The context.catch method must only be called with a location\n\t      // argument that corresponds to a known catch block.\n\t      throw new Error(\"illegal catch attempt\");\n\t    },\n\n\t    delegateYield: function(iterable, resultName, nextLoc) {\n\t      this.delegate = {\n\t        iterator: values(iterable),\n\t        resultName: resultName,\n\t        nextLoc: nextLoc\n\t      };\n\n\t      if (this.method === \"next\") {\n\t        // Deliberately forget the last sent value so that we don't\n\t        // accidentally pass it on to the delegate.\n\t        this.arg = undefined;\n\t      }\n\n\t      return ContinueSentinel;\n\t    }\n\t  };\n\t})(\n\t  // In sloppy mode, unbound `this` refers to the global object, fallback to\n\t  // Function constructor if we're in global strict mode. That is sadly a form\n\t  // of indirect eval which violates Content Security Policy.\n\t  (function() {\n\t    return this || (typeof self === \"object\" && self);\n\t  })() || Function(\"return this\")()\n\t);\n\t});\n\n\t/**\n\t * Copyright (c) 2014-present, Facebook, Inc.\n\t *\n\t * This source code is licensed under the MIT license found in the\n\t * LICENSE file in the root directory of this source tree.\n\t */\n\n\t// This method of obtaining a reference to the global object needs to be\n\t// kept identical to the way it is obtained in runtime.js\n\tvar g = (function() {\n\t  return this || (typeof self === \"object\" && self);\n\t})() || Function(\"return this\")();\n\n\t// Use `getOwnPropertyNames` because not all browsers support calling\n\t// `hasOwnProperty` on the global `self` object in a worker. See #183.\n\tvar hadRuntime = g.regeneratorRuntime &&\n\t  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n\t// Save the old regeneratorRuntime in case it needs to be restored later.\n\tvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n\t// Force reevalutation of runtime.js.\n\tg.regeneratorRuntime = undefined;\n\n\tvar runtimeModule = runtime;\n\n\tif (hadRuntime) {\n\t  // Restore the original runtime.\n\t  g.regeneratorRuntime = oldRuntime;\n\t} else {\n\t  // Remove the global property added by runtime.js.\n\t  try {\n\t    delete g.regeneratorRuntime;\n\t  } catch(e) {\n\t    g.regeneratorRuntime = undefined;\n\t  }\n\t}\n\n\tvar regenerator = runtimeModule;\n\n\tvar setPrototypeOf = createCommonjsModule(function (module) {\n\tfunction _setPrototypeOf(o, p) {\n\t  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n\t    o.__proto__ = p;\n\t    return o;\n\t  };\n\n\t  return _setPrototypeOf(o, p);\n\t}\n\n\tmodule.exports = _setPrototypeOf;\n\t});\n\n\tvar construct = createCommonjsModule(function (module) {\n\tfunction isNativeReflectConstruct() {\n\t  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n\t  if (Reflect.construct.sham) return false;\n\t  if (typeof Proxy === \"function\") return true;\n\n\t  try {\n\t    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n\t    return true;\n\t  } catch (e) {\n\t    return false;\n\t  }\n\t}\n\n\tfunction _construct(Parent, args, Class) {\n\t  if (isNativeReflectConstruct()) {\n\t    module.exports = _construct = Reflect.construct;\n\t  } else {\n\t    module.exports = _construct = function _construct(Parent, args, Class) {\n\t      var a = [null];\n\t      a.push.apply(a, args);\n\t      var Constructor = Function.bind.apply(Parent, a);\n\t      var instance = new Constructor();\n\t      if (Class) setPrototypeOf(instance, Class.prototype);\n\t      return instance;\n\t    };\n\t  }\n\n\t  return _construct.apply(null, arguments);\n\t}\n\n\tmodule.exports = _construct;\n\t});\n\n\tvar _typeof_1 = createCommonjsModule(function (module) {\n\tfunction _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\n\tfunction _typeof(obj) {\n\t  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n\t    module.exports = _typeof = function _typeof(obj) {\n\t      return _typeof2(obj);\n\t    };\n\t  } else {\n\t    module.exports = _typeof = function _typeof(obj) {\n\t      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n\t    };\n\t  }\n\n\t  return _typeof(obj);\n\t}\n\n\tmodule.exports = _typeof;\n\t});\n\n\tfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n\t  try {\n\t    var info = gen[key](arg);\n\t    var value = info.value;\n\t  } catch (error) {\n\t    reject(error);\n\t    return;\n\t  }\n\n\t  if (info.done) {\n\t    resolve(value);\n\t  } else {\n\t    Promise.resolve(value).then(_next, _throw);\n\t  }\n\t}\n\n\tfunction _asyncToGenerator(fn) {\n\t  return function () {\n\t    var self = this,\n\t        args = arguments;\n\t    return new Promise(function (resolve, reject) {\n\t      var gen = fn.apply(self, args);\n\n\t      function _next(value) {\n\t        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n\t      }\n\n\t      function _throw(err) {\n\t        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n\t      }\n\n\t      _next(undefined);\n\t    });\n\t  };\n\t}\n\n\tvar asyncToGenerator = _asyncToGenerator;\n\n\tfunction _classCallCheck(instance, Constructor) {\n\t  if (!(instance instanceof Constructor)) {\n\t    throw new TypeError(\"Cannot call a class as a function\");\n\t  }\n\t}\n\n\tvar classCallCheck = _classCallCheck;\n\n\tfunction _defineProperties(target, props) {\n\t  for (var i = 0; i < props.length; i++) {\n\t    var descriptor = props[i];\n\t    descriptor.enumerable = descriptor.enumerable || false;\n\t    descriptor.configurable = true;\n\t    if (\"value\" in descriptor) descriptor.writable = true;\n\t    Object.defineProperty(target, descriptor.key, descriptor);\n\t  }\n\t}\n\n\tfunction _createClass(Constructor, protoProps, staticProps) {\n\t  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n\t  if (staticProps) _defineProperties(Constructor, staticProps);\n\t  return Constructor;\n\t}\n\n\tvar createClass = _createClass;\n\n\tvar isImplemented = function () {\n\t\tvar assign = Object.assign, obj;\n\t\tif (typeof assign !== \"function\") return false;\n\t\tobj = { foo: \"raz\" };\n\t\tassign(obj, { bar: \"dwa\" }, { trzy: \"trzy\" });\n\t\treturn (obj.foo + obj.bar + obj.trzy) === \"razdwatrzy\";\n\t};\n\n\tvar isImplemented$1 = function () {\n\t\ttry {\n\t\t\treturn true;\n\t\t} catch (e) {\n\t return false;\n\t}\n\t};\n\n\t// eslint-disable-next-line no-empty-function\n\tvar noop = function () {};\n\n\tvar _undefined = noop(); // Support ES3 engines\n\n\tvar isValue = function (val) {\n\t return (val !== _undefined) && (val !== null);\n\t};\n\n\tvar keys = Object.keys;\n\n\tvar shim = function (object) {\n\t\treturn keys(isValue(object) ? Object(object) : object);\n\t};\n\n\tvar keys$1 = isImplemented$1()\n\t\t? Object.keys\n\t\t: shim;\n\n\tvar validValue = function (value) {\n\t\tif (!isValue(value)) throw new TypeError(\"Cannot use null or undefined\");\n\t\treturn value;\n\t};\n\n\tvar max   = Math.max;\n\n\tvar shim$1 = function (dest, src /*, \u2026srcn*/) {\n\t\tvar error, i, length = max(arguments.length, 2), assign;\n\t\tdest = Object(validValue(dest));\n\t\tassign = function (key) {\n\t\t\ttry {\n\t\t\t\tdest[key] = src[key];\n\t\t\t} catch (e) {\n\t\t\t\tif (!error) error = e;\n\t\t\t}\n\t\t};\n\t\tfor (i = 1; i < length; ++i) {\n\t\t\tsrc = arguments[i];\n\t\t\tkeys$1(src).forEach(assign);\n\t\t}\n\t\tif (error !== undefined) throw error;\n\t\treturn dest;\n\t};\n\n\tvar assign = isImplemented()\n\t\t? Object.assign\n\t\t: shim$1;\n\n\tvar forEach = Array.prototype.forEach, create = Object.create;\n\n\tvar process = function (src, obj) {\n\t\tvar key;\n\t\tfor (key in src) obj[key] = src[key];\n\t};\n\n\t// eslint-disable-next-line no-unused-vars\n\tvar normalizeOptions = function (opts1 /*, \u2026options*/) {\n\t\tvar result = create(null);\n\t\tforEach.call(arguments, function (options) {\n\t\t\tif (!isValue(options)) return;\n\t\t\tprocess(Object(options), result);\n\t\t});\n\t\treturn result;\n\t};\n\n\t// Deprecated\n\n\tvar isCallable = function (obj) {\n\t return typeof obj === \"function\";\n\t};\n\n\tvar str = \"razdwatrzy\";\n\n\tvar isImplemented$2 = function () {\n\t\tif (typeof str.contains !== \"function\") return false;\n\t\treturn (str.contains(\"dwa\") === true) && (str.contains(\"foo\") === false);\n\t};\n\n\tvar indexOf = String.prototype.indexOf;\n\n\tvar shim$2 = function (searchString/*, position*/) {\n\t\treturn indexOf.call(this, searchString, arguments[1]) > -1;\n\t};\n\n\tvar contains = isImplemented$2()\n\t\t? String.prototype.contains\n\t\t: shim$2;\n\n\tvar d_1 = createCommonjsModule(function (module) {\n\n\tvar d;\n\n\td = module.exports = function (dscr, value/*, options*/) {\n\t\tvar c, e, w, options, desc;\n\t\tif ((arguments.length < 2) || (typeof dscr !== 'string')) {\n\t\t\toptions = value;\n\t\t\tvalue = dscr;\n\t\t\tdscr = null;\n\t\t} else {\n\t\t\toptions = arguments[2];\n\t\t}\n\t\tif (dscr == null) {\n\t\t\tc = w = true;\n\t\t\te = false;\n\t\t} else {\n\t\t\tc = contains.call(dscr, 'c');\n\t\t\te = contains.call(dscr, 'e');\n\t\t\tw = contains.call(dscr, 'w');\n\t\t}\n\n\t\tdesc = { value: value, configurable: c, enumerable: e, writable: w };\n\t\treturn !options ? desc : assign(normalizeOptions(options), desc);\n\t};\n\n\td.gs = function (dscr, get, set/*, options*/) {\n\t\tvar c, e, options, desc;\n\t\tif (typeof dscr !== 'string') {\n\t\t\toptions = set;\n\t\t\tset = get;\n\t\t\tget = dscr;\n\t\t\tdscr = null;\n\t\t} else {\n\t\t\toptions = arguments[3];\n\t\t}\n\t\tif (get == null) {\n\t\t\tget = undefined;\n\t\t} else if (!isCallable(get)) {\n\t\t\toptions = get;\n\t\t\tget = set = undefined;\n\t\t} else if (set == null) {\n\t\t\tset = undefined;\n\t\t} else if (!isCallable(set)) {\n\t\t\toptions = set;\n\t\t\tset = undefined;\n\t\t}\n\t\tif (dscr == null) {\n\t\t\tc = true;\n\t\t\te = false;\n\t\t} else {\n\t\t\tc = contains.call(dscr, 'c');\n\t\t\te = contains.call(dscr, 'e');\n\t\t}\n\n\t\tdesc = { get: get, set: set, configurable: c, enumerable: e };\n\t\treturn !options ? desc : assign(normalizeOptions(options), desc);\n\t};\n\t});\n\n\tvar validCallable = function (fn) {\n\t\tif (typeof fn !== \"function\") throw new TypeError(fn + \" is not a function\");\n\t\treturn fn;\n\t};\n\n\tvar eventEmitter = createCommonjsModule(function (module, exports) {\n\n\tvar apply = Function.prototype.apply, call = Function.prototype.call\n\t  , create = Object.create, defineProperty = Object.defineProperty\n\t  , defineProperties = Object.defineProperties\n\t  , hasOwnProperty = Object.prototype.hasOwnProperty\n\t  , descriptor = { configurable: true, enumerable: false, writable: true }\n\n\t  , on, once, off, emit, methods, descriptors, base;\n\n\ton = function (type, listener) {\n\t\tvar data;\n\n\t\tvalidCallable(listener);\n\n\t\tif (!hasOwnProperty.call(this, '__ee__')) {\n\t\t\tdata = descriptor.value = create(null);\n\t\t\tdefineProperty(this, '__ee__', descriptor);\n\t\t\tdescriptor.value = null;\n\t\t} else {\n\t\t\tdata = this.__ee__;\n\t\t}\n\t\tif (!data[type]) data[type] = listener;\n\t\telse if (typeof data[type] === 'object') data[type].push(listener);\n\t\telse data[type] = [data[type], listener];\n\n\t\treturn this;\n\t};\n\n\tonce = function (type, listener) {\n\t\tvar once, self;\n\n\t\tvalidCallable(listener);\n\t\tself = this;\n\t\ton.call(this, type, once = function () {\n\t\t\toff.call(self, type, once);\n\t\t\tapply.call(listener, this, arguments);\n\t\t});\n\n\t\tonce.__eeOnceListener__ = listener;\n\t\treturn this;\n\t};\n\n\toff = function (type, listener) {\n\t\tvar data, listeners, candidate, i;\n\n\t\tvalidCallable(listener);\n\n\t\tif (!hasOwnProperty.call(this, '__ee__')) return this;\n\t\tdata = this.__ee__;\n\t\tif (!data[type]) return this;\n\t\tlisteners = data[type];\n\n\t\tif (typeof listeners === 'object') {\n\t\t\tfor (i = 0; (candidate = listeners[i]); ++i) {\n\t\t\t\tif ((candidate === listener) ||\n\t\t\t\t\t\t(candidate.__eeOnceListener__ === listener)) {\n\t\t\t\t\tif (listeners.length === 2) data[type] = listeners[i ? 0 : 1];\n\t\t\t\t\telse listeners.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif ((listeners === listener) ||\n\t\t\t\t\t(listeners.__eeOnceListener__ === listener)) {\n\t\t\t\tdelete data[type];\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t};\n\n\temit = function (type) {\n\t\tvar i, l, listener, listeners, args;\n\n\t\tif (!hasOwnProperty.call(this, '__ee__')) return;\n\t\tlisteners = this.__ee__[type];\n\t\tif (!listeners) return;\n\n\t\tif (typeof listeners === 'object') {\n\t\t\tl = arguments.length;\n\t\t\targs = new Array(l - 1);\n\t\t\tfor (i = 1; i < l; ++i) args[i - 1] = arguments[i];\n\n\t\t\tlisteners = listeners.slice();\n\t\t\tfor (i = 0; (listener = listeners[i]); ++i) {\n\t\t\t\tapply.call(listener, this, args);\n\t\t\t}\n\t\t} else {\n\t\t\tswitch (arguments.length) {\n\t\t\tcase 1:\n\t\t\t\tcall.call(listeners, this);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tcall.call(listeners, this, arguments[1]);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tcall.call(listeners, this, arguments[1], arguments[2]);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tl = arguments.length;\n\t\t\t\targs = new Array(l - 1);\n\t\t\t\tfor (i = 1; i < l; ++i) {\n\t\t\t\t\targs[i - 1] = arguments[i];\n\t\t\t\t}\n\t\t\t\tapply.call(listeners, this, args);\n\t\t\t}\n\t\t}\n\t};\n\n\tmethods = {\n\t\ton: on,\n\t\tonce: once,\n\t\toff: off,\n\t\temit: emit\n\t};\n\n\tdescriptors = {\n\t\ton: d_1(on),\n\t\tonce: d_1(once),\n\t\toff: d_1(off),\n\t\temit: d_1(emit)\n\t};\n\n\tbase = defineProperties({}, descriptors);\n\n\tmodule.exports = exports = function (o) {\n\t\treturn (o == null) ? create(base) : defineProperties(Object(o), descriptors);\n\t};\n\texports.methods = methods;\n\t});\n\tvar eventEmitter_1 = eventEmitter.methods;\n\n\t/**\n\t * Core Utilities and Helpers\n\t * @module Core\n\t*/\n\n\t/**\n\t * Vendor prefixed requestAnimationFrame\n\t * @returns {function} requestAnimationFrame\n\t * @memberof Core\n\t */\n\n\tvar requestAnimationFrame$1 = typeof window != \"undefined\" ? window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame : false;\n\tvar ELEMENT_NODE = 1;\n\tvar TEXT_NODE = 3;\n\tvar COMMENT_NODE = 8;\n\tvar DOCUMENT_NODE = 9;\n\tvar _URL = typeof URL != \"undefined\" ? URL : typeof window != \"undefined\" ? window.URL || window.webkitURL || window.mozURL : undefined;\n\t/**\n\t * Generates a UUID\n\t * based on: http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript\n\t * @returns {string} uuid\n\t * @memberof Core\n\t */\n\n\tfunction uuid() {\n\t  var d = new Date().getTime();\n\n\t  if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n\t    d += performance.now(); //use high-precision timer if available\n\t  }\n\n\t  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n\t    var r = (d + Math.random() * 16) % 16 | 0;\n\t    d = Math.floor(d / 16);\n\t    return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);\n\t  });\n\t}\n\t/**\n\t * Gets the height of a document\n\t * @returns {number} height\n\t * @memberof Core\n\t */\n\n\tfunction documentHeight() {\n\t  return Math.max(document.documentElement.clientHeight, document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight);\n\t}\n\t/**\n\t * Checks if a node is an element\n\t * @param {object} obj\n\t * @returns {boolean}\n\t * @memberof Core\n\t */\n\n\tfunction isElement(obj) {\n\t  return !!(obj && obj.nodeType == 1);\n\t}\n\t/**\n\t * @param {any} n\n\t * @returns {boolean}\n\t * @memberof Core\n\t */\n\n\tfunction isNumber(n) {\n\t  return !isNaN(parseFloat(n)) && isFinite(n);\n\t}\n\t/**\n\t * @param {any} n\n\t * @returns {boolean}\n\t * @memberof Core\n\t */\n\n\tfunction isFloat(n) {\n\t  var f = parseFloat(n);\n\n\t  if (isNumber(n) === false) {\n\t    return false;\n\t  }\n\n\t  if (typeof n === \"string\" && n.indexOf(\".\") > -1) {\n\t    return true;\n\t  }\n\n\t  return Math.floor(f) !== f;\n\t}\n\t/**\n\t * Get a prefixed css property\n\t * @param {string} unprefixed\n\t * @returns {string}\n\t * @memberof Core\n\t */\n\n\tfunction prefixed(unprefixed) {\n\t  var vendors = [\"Webkit\", \"webkit\", \"Moz\", \"O\", \"ms\"];\n\t  var prefixes = [\"-webkit-\", \"-webkit-\", \"-moz-\", \"-o-\", \"-ms-\"];\n\t  var upper = unprefixed[0].toUpperCase() + unprefixed.slice(1);\n\t  var length = vendors.length;\n\n\t  if (typeof document === \"undefined\" || typeof document.body.style[unprefixed] != \"undefined\") {\n\t    return unprefixed;\n\t  }\n\n\t  for (var i = 0; i < length; i++) {\n\t    if (typeof document.body.style[vendors[i] + upper] != \"undefined\") {\n\t      return prefixes[i] + unprefixed;\n\t    }\n\t  }\n\n\t  return unprefixed;\n\t}\n\t/**\n\t * Apply defaults to an object\n\t * @param {object} obj\n\t * @returns {object}\n\t * @memberof Core\n\t */\n\n\tfunction defaults(obj) {\n\t  for (var i = 1, length = arguments.length; i < length; i++) {\n\t    var source = arguments[i];\n\n\t    for (var prop in source) {\n\t      if (obj[prop] === void 0) obj[prop] = source[prop];\n\t    }\n\t  }\n\n\t  return obj;\n\t}\n\t/**\n\t * Extend properties of an object\n\t * @param {object} target\n\t * @returns {object}\n\t * @memberof Core\n\t */\n\n\tfunction extend(target) {\n\t  var sources = [].slice.call(arguments, 1);\n\t  sources.forEach(function (source) {\n\t    if (!source) return;\n\t    Object.getOwnPropertyNames(source).forEach(function (propName) {\n\t      Object.defineProperty(target, propName, Object.getOwnPropertyDescriptor(source, propName));\n\t    });\n\t  });\n\t  return target;\n\t}\n\t/**\n\t * Fast quicksort insert for sorted array -- based on:\n\t *  http://stackoverflow.com/questions/1344500/efficient-way-to-insert-a-number-into-a-sorted-array-of-numbers\n\t * @param {any} item\n\t * @param {array} array\n\t * @param {function} [compareFunction]\n\t * @returns {number} location (in array)\n\t * @memberof Core\n\t */\n\n\tfunction insert(item, array, compareFunction) {\n\t  var location = locationOf(item, array, compareFunction);\n\t  array.splice(location, 0, item);\n\t  return location;\n\t}\n\t/**\n\t * Finds where something would fit into a sorted array\n\t * @param {any} item\n\t * @param {array} array\n\t * @param {function} [compareFunction]\n\t * @param {function} [_start]\n\t * @param {function} [_end]\n\t * @returns {number} location (in array)\n\t * @memberof Core\n\t */\n\n\tfunction locationOf(item, array, compareFunction, _start, _end) {\n\t  var start = _start || 0;\n\t  var end = _end || array.length;\n\t  var pivot = parseInt(start + (end - start) / 2);\n\t  var compared;\n\n\t  if (!compareFunction) {\n\t    compareFunction = function compareFunction(a, b) {\n\t      if (a > b) return 1;\n\t      if (a < b) return -1;\n\t      if (a == b) return 0;\n\t    };\n\t  }\n\n\t  if (end - start <= 0) {\n\t    return pivot;\n\t  }\n\n\t  compared = compareFunction(array[pivot], item);\n\n\t  if (end - start === 1) {\n\t    return compared >= 0 ? pivot : pivot + 1;\n\t  }\n\n\t  if (compared === 0) {\n\t    return pivot;\n\t  }\n\n\t  if (compared === -1) {\n\t    return locationOf(item, array, compareFunction, pivot, end);\n\t  } else {\n\t    return locationOf(item, array, compareFunction, start, pivot);\n\t  }\n\t}\n\t/**\n\t * Finds index of something in a sorted array\n\t * Returns -1 if not found\n\t * @param {any} item\n\t * @param {array} array\n\t * @param {function} [compareFunction]\n\t * @param {function} [_start]\n\t * @param {function} [_end]\n\t * @returns {number} index (in array) or -1\n\t * @memberof Core\n\t */\n\n\tfunction indexOfSorted$1(item, array, compareFunction, _start, _end) {\n\t  var start = _start || 0;\n\t  var end = _end || array.length;\n\t  var pivot = parseInt(start + (end - start) / 2);\n\t  var compared;\n\n\t  if (!compareFunction) {\n\t    compareFunction = function compareFunction(a, b) {\n\t      if (a > b) return 1;\n\t      if (a < b) return -1;\n\t      if (a == b) return 0;\n\t    };\n\t  }\n\n\t  if (end - start <= 0) {\n\t    return -1; // Not found\n\t  }\n\n\t  compared = compareFunction(array[pivot], item);\n\n\t  if (end - start === 1) {\n\t    return compared === 0 ? pivot : -1;\n\t  }\n\n\t  if (compared === 0) {\n\t    return pivot; // Found\n\t  }\n\n\t  if (compared === -1) {\n\t    return indexOfSorted$1(item, array, compareFunction, pivot, end);\n\t  } else {\n\t    return indexOfSorted$1(item, array, compareFunction, start, pivot);\n\t  }\n\t}\n\t/**\n\t * Find the bounds of an element\n\t * taking padding and margin into account\n\t * @param {element} el\n\t * @returns {{ width: Number, height: Number}}\n\t * @memberof Core\n\t */\n\n\tfunction bounds(el) {\n\t  var style = window.getComputedStyle(el);\n\t  var widthProps = [\"width\", \"paddingRight\", \"paddingLeft\", \"marginRight\", \"marginLeft\", \"borderRightWidth\", \"borderLeftWidth\"];\n\t  var heightProps = [\"height\", \"paddingTop\", \"paddingBottom\", \"marginTop\", \"marginBottom\", \"borderTopWidth\", \"borderBottomWidth\"];\n\t  var width = 0;\n\t  var height = 0;\n\t  widthProps.forEach(function (prop) {\n\t    width += parseFloat(style[prop]) || 0;\n\t  });\n\t  heightProps.forEach(function (prop) {\n\t    height += parseFloat(style[prop]) || 0;\n\t  });\n\t  return {\n\t    height: height,\n\t    width: width\n\t  };\n\t}\n\t/**\n\t * Find the bounds of an element\n\t * taking padding, margin and borders into account\n\t * @param {element} el\n\t * @returns {{ width: Number, height: Number}}\n\t * @memberof Core\n\t */\n\n\tfunction borders(el) {\n\t  var style = window.getComputedStyle(el);\n\t  var widthProps = [\"paddingRight\", \"paddingLeft\", \"marginRight\", \"marginLeft\", \"borderRightWidth\", \"borderLeftWidth\"];\n\t  var heightProps = [\"paddingTop\", \"paddingBottom\", \"marginTop\", \"marginBottom\", \"borderTopWidth\", \"borderBottomWidth\"];\n\t  var width = 0;\n\t  var height = 0;\n\t  widthProps.forEach(function (prop) {\n\t    width += parseFloat(style[prop]) || 0;\n\t  });\n\t  heightProps.forEach(function (prop) {\n\t    height += parseFloat(style[prop]) || 0;\n\t  });\n\t  return {\n\t    height: height,\n\t    width: width\n\t  };\n\t}\n\t/**\n\t * Find the bounds of any node\n\t * allows for getting bounds of text nodes by wrapping them in a range\n\t * @param {node} node\n\t * @returns {BoundingClientRect}\n\t * @memberof Core\n\t */\n\n\tfunction nodeBounds(node) {\n\t  var elPos;\n\t  var doc = node.ownerDocument;\n\n\t  if (node.nodeType == Node.TEXT_NODE) {\n\t    var elRange = doc.createRange();\n\t    elRange.selectNodeContents(node);\n\t    elPos = elRange.getBoundingClientRect();\n\t  } else {\n\t    elPos = node.getBoundingClientRect();\n\t  }\n\n\t  return elPos;\n\t}\n\t/**\n\t * Find the equivelent of getBoundingClientRect of a browser window\n\t * @returns {{ width: Number, height: Number, top: Number, left: Number, right: Number, bottom: Number }}\n\t * @memberof Core\n\t */\n\n\tfunction windowBounds() {\n\t  var width = window.innerWidth;\n\t  var height = window.innerHeight;\n\t  return {\n\t    top: 0,\n\t    left: 0,\n\t    right: width,\n\t    bottom: height,\n\t    width: width,\n\t    height: height\n\t  };\n\t}\n\t/**\n\t * Gets the index of a node in its parent\n\t * @param {Node} node\n\t * @param {string} typeId\n\t * @return {number} index\n\t * @memberof Core\n\t */\n\n\tfunction indexOfNode(node, typeId) {\n\t  var parent = node.parentNode;\n\t  var children = parent.childNodes;\n\t  var sib;\n\t  var index = -1;\n\n\t  for (var i = 0; i < children.length; i++) {\n\t    sib = children[i];\n\n\t    if (sib.nodeType === typeId) {\n\t      index++;\n\t    }\n\n\t    if (sib == node) break;\n\t  }\n\n\t  return index;\n\t}\n\t/**\n\t * Gets the index of a text node in its parent\n\t * @param {node} textNode\n\t * @returns {number} index\n\t * @memberof Core\n\t */\n\n\tfunction indexOfTextNode(textNode) {\n\t  return indexOfNode(textNode, TEXT_NODE);\n\t}\n\t/**\n\t * Gets the index of an element node in its parent\n\t * @param {element} elementNode\n\t * @returns {number} index\n\t * @memberof Core\n\t */\n\n\tfunction indexOfElementNode(elementNode) {\n\t  return indexOfNode(elementNode, ELEMENT_NODE);\n\t}\n\t/**\n\t * Check if extension is xml\n\t * @param {string} ext\n\t * @returns {boolean}\n\t * @memberof Core\n\t */\n\n\tfunction isXml(ext) {\n\t  return [\"xml\", \"opf\", \"ncx\"].indexOf(ext) > -1;\n\t}\n\t/**\n\t * Create a new blob\n\t * @param {any} content\n\t * @param {string} mime\n\t * @returns {Blob}\n\t * @memberof Core\n\t */\n\n\tfunction createBlob(content, mime) {\n\t  return new Blob([content], {\n\t    type: mime\n\t  });\n\t}\n\t/**\n\t * Create a new blob url\n\t * @param {any} content\n\t * @param {string} mime\n\t * @returns {string} url\n\t * @memberof Core\n\t */\n\n\tfunction createBlobUrl(content, mime) {\n\t  var tempUrl;\n\t  var blob = createBlob(content, mime);\n\t  tempUrl = _URL.createObjectURL(blob);\n\t  return tempUrl;\n\t}\n\t/**\n\t * Remove a blob url\n\t * @param {string} url\n\t * @memberof Core\n\t */\n\n\tfunction revokeBlobUrl(url) {\n\t  return _URL.revokeObjectURL(url);\n\t}\n\t/**\n\t * Create a new base64 encoded url\n\t * @param {any} content\n\t * @param {string} mime\n\t * @returns {string} url\n\t * @memberof Core\n\t */\n\n\tfunction createBase64Url(content, mime) {\n\t  var data;\n\t  var datauri;\n\n\t  if (typeof content !== \"string\") {\n\t    // Only handles strings\n\t    return;\n\t  }\n\n\t  data = btoa(encodeURIComponent(content));\n\t  datauri = \"data:\" + mime + \";base64,\" + data;\n\t  return datauri;\n\t}\n\t/**\n\t * Get type of an object\n\t * @param {object} obj\n\t * @returns {string} type\n\t * @memberof Core\n\t */\n\n\tfunction type(obj) {\n\t  return Object.prototype.toString.call(obj).slice(8, -1);\n\t}\n\t/**\n\t * Parse xml (or html) markup\n\t * @param {string} markup\n\t * @param {string} mime\n\t * @param {boolean} forceXMLDom force using xmlDom to parse instead of native parser\n\t * @returns {document} document\n\t * @memberof Core\n\t */\n\n\tfunction parse(markup, mime, forceXMLDom) {\n\t  var doc;\n\t  var Parser;\n\n\t  if (typeof DOMParser === \"undefined\" || forceXMLDom) {\n\t    Parser = XMLDom.DOMParser;\n\t  } else {\n\t    Parser = DOMParser;\n\t  } // Remove byte order mark before parsing\n\t  // https://www.w3.org/International/questions/qa-byte-order-mark\n\n\n\t  if (markup.charCodeAt(0) === 0xFEFF) {\n\t    markup = markup.slice(1);\n\t  }\n\n\t  doc = new Parser().parseFromString(markup, mime);\n\t  return doc;\n\t}\n\t/**\n\t * querySelector polyfill\n\t * @param {element} el\n\t * @param {string} sel selector string\n\t * @returns {element} element\n\t * @memberof Core\n\t */\n\n\tfunction qs(el, sel) {\n\t  var elements;\n\n\t  if (!el) {\n\t    throw new Error(\"No Element Provided\");\n\t  }\n\n\t  if (typeof el.querySelector != \"undefined\") {\n\t    return el.querySelector(sel);\n\t  } else {\n\t    elements = el.getElementsByTagName(sel);\n\n\t    if (elements.length) {\n\t      return elements[0];\n\t    }\n\t  }\n\t}\n\t/**\n\t * querySelectorAll polyfill\n\t * @param {element} el\n\t * @param {string} sel selector string\n\t * @returns {element[]} elements\n\t * @memberof Core\n\t */\n\n\tfunction qsa(el, sel) {\n\t  if (typeof el.querySelector != \"undefined\") {\n\t    return el.querySelectorAll(sel);\n\t  } else {\n\t    return el.getElementsByTagName(sel);\n\t  }\n\t}\n\t/**\n\t * querySelector by property\n\t * @param {element} el\n\t * @param {string} sel selector string\n\t * @param {object[]} props\n\t * @returns {element[]} elements\n\t * @memberof Core\n\t */\n\n\tfunction qsp(el, sel, props) {\n\t  var q, filtered;\n\n\t  if (typeof el.querySelector != \"undefined\") {\n\t    sel += \"[\";\n\n\t    for (var prop in props) {\n\t      sel += prop + \"~='\" + props[prop] + \"'\";\n\t    }\n\n\t    sel += \"]\";\n\t    return el.querySelector(sel);\n\t  } else {\n\t    q = el.getElementsByTagName(sel);\n\t    filtered = Array.prototype.slice.call(q, 0).filter(function (el) {\n\t      for (var prop in props) {\n\t        if (el.getAttribute(prop) === props[prop]) {\n\t          return true;\n\t        }\n\t      }\n\n\t      return false;\n\t    });\n\n\t    if (filtered) {\n\t      return filtered[0];\n\t    }\n\t  }\n\t}\n\t/**\n\t * Sprint through all text nodes in a document\n\t * @memberof Core\n\t * @param  {element} root element to start with\n\t * @param  {function} func function to run on each element\n\t */\n\n\tfunction sprint(root, func) {\n\t  var doc = root.ownerDocument || root;\n\n\t  if (typeof doc.createTreeWalker !== \"undefined\") {\n\t    treeWalker(root, func, NodeFilter.SHOW_TEXT);\n\t  } else {\n\t    walk(root, function (node) {\n\t      if (node && node.nodeType === 3) {\n\t        // Node.TEXT_NODE\n\t        func(node);\n\t      }\n\t    }, true);\n\t  }\n\t}\n\t/**\n\t * Create a treeWalker\n\t * @memberof Core\n\t * @param  {element} root element to start with\n\t * @param  {function} func function to run on each element\n\t * @param  {function | object} filter funtion or object to filter with\n\t */\n\n\tfunction treeWalker(root, func, filter) {\n\t  var treeWalker = document.createTreeWalker(root, filter, null, false);\n\t  var node;\n\n\t  while (node = treeWalker.nextNode()) {\n\t    func(node);\n\t  }\n\t}\n\t/**\n\t * @memberof Core\n\t * @param {node} node\n\t * @param {callback} return false for continue,true for break inside callback\n\t */\n\n\tfunction walk(node, callback) {\n\t  if (callback(node)) {\n\t    return true;\n\t  }\n\n\t  node = node.firstChild;\n\n\t  if (node) {\n\t    do {\n\t      var walked = walk(node, callback);\n\n\t      if (walked) {\n\t        return true;\n\t      }\n\n\t      node = node.nextSibling;\n\t    } while (node);\n\t  }\n\t}\n\t/**\n\t * Convert a blob to a base64 encoded string\n\t * @param {Blog} blob\n\t * @returns {string}\n\t * @memberof Core\n\t */\n\n\tfunction blob2base64(blob) {\n\t  return new Promise(function (resolve, reject) {\n\t    var reader = new FileReader();\n\t    reader.readAsDataURL(blob);\n\n\t    reader.onloadend = function () {\n\t      resolve(reader.result);\n\t    };\n\t  });\n\t}\n\t/**\n\t * Creates a new pending promise and provides methods to resolve or reject it.\n\t * From: https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Deferred#backwards_forwards_compatible\n\t * @memberof Core\n\t */\n\n\tfunction defer() {\n\t  var _this = this;\n\n\t  /* A method to resolve the associated Promise with the value passed.\n\t   * If the promise is already settled it does nothing.\n\t   *\n\t   * @param {anything} value : This value is used to resolve the promise\n\t   * If the value is a Promise then the associated promise assumes the state\n\t   * of Promise passed as value.\n\t   */\n\t  this.resolve = null;\n\t  /* A method to reject the assocaited Promise with the value passed.\n\t   * If the promise is already settled it does nothing.\n\t   *\n\t   * @param {anything} reason: The reason for the rejection of the Promise.\n\t   * Generally its an Error object. If however a Promise is passed, then the Promise\n\t   * itself will be the reason for rejection no matter the state of the Promise.\n\t   */\n\n\t  this.reject = null;\n\t  this.id = uuid();\n\t  /* A newly created Pomise object.\n\t   * Initially in pending state.\n\t   */\n\n\t  this.promise = new Promise(function (resolve, reject) {\n\t    _this.resolve = resolve;\n\t    _this.reject = reject;\n\t  });\n\t  Object.freeze(this);\n\t}\n\t/**\n\t * querySelector with filter by epub type\n\t * @param {element} html\n\t * @param {string} element element type to find\n\t * @param {string} type epub type to find\n\t * @returns {element[]} elements\n\t * @memberof Core\n\t */\n\n\tfunction querySelectorByType(html, element, type) {\n\t  var query;\n\n\t  if (typeof html.querySelector != \"undefined\") {\n\t    query = html.querySelector(\"\".concat(element, \"[*|type=\\\"\").concat(type, \"\\\"]\"));\n\t  } // Handle IE not supporting namespaced epub:type in querySelector\n\n\n\t  if (!query || query.length === 0) {\n\t    query = qsa(html, element);\n\n\t    for (var i = 0; i < query.length; i++) {\n\t      if (query[i].getAttributeNS(\"http://www.idpf.org/2007/ops\", \"type\") === type || query[i].getAttribute(\"epub:type\") === type) {\n\t        return query[i];\n\t      }\n\t    }\n\t  } else {\n\t    return query;\n\t  }\n\t}\n\t/**\n\t * Find direct decendents of an element\n\t * @param {element} el\n\t * @returns {element[]} children\n\t * @memberof Core\n\t */\n\n\tfunction findChildren(el) {\n\t  var result = [];\n\t  var childNodes = el.childNodes;\n\n\t  for (var i = 0; i < childNodes.length; i++) {\n\t    var node = childNodes[i];\n\n\t    if (node.nodeType === 1) {\n\t      result.push(node);\n\t    }\n\t  }\n\n\t  return result;\n\t}\n\t/**\n\t * Find all parents (ancestors) of an element\n\t * @param {element} node\n\t * @returns {element[]} parents\n\t * @memberof Core\n\t */\n\n\tfunction parents(node) {\n\t  var nodes = [node];\n\n\t  for (; node; node = node.parentNode) {\n\t    nodes.unshift(node);\n\t  }\n\n\t  return nodes;\n\t}\n\t/**\n\t * Find all direct decendents of a specific type\n\t * @param {element} el\n\t * @param {string} nodeName\n\t * @param {boolean} [single]\n\t * @returns {element[]} children\n\t * @memberof Core\n\t */\n\n\tfunction filterChildren(el, nodeName, single) {\n\t  var result = [];\n\t  var childNodes = el.childNodes;\n\n\t  for (var i = 0; i < childNodes.length; i++) {\n\t    var node = childNodes[i];\n\n\t    if (node.nodeType === 1 && node.nodeName.toLowerCase() === nodeName) {\n\t      if (single) {\n\t        return node;\n\t      } else {\n\t        result.push(node);\n\t      }\n\t    }\n\t  }\n\n\t  if (!single) {\n\t    return result;\n\t  }\n\t}\n\t/**\n\t * Filter all parents (ancestors) with tag name\n\t * @param {element} node\n\t * @param {string} tagname\n\t * @returns {element[]} parents\n\t * @memberof Core\n\t */\n\n\tfunction getParentByTagName(node, tagname) {\n\t  var parent;\n\t  if (node === null || tagname === \"\") return;\n\t  parent = node.parentNode;\n\n\t  while (parent.nodeType === 1) {\n\t    if (parent.tagName.toLowerCase() === tagname) {\n\t      return parent;\n\t    }\n\n\t    parent = parent.parentNode;\n\t  }\n\t}\n\t/**\n\t * Get the next section in the spine\n\t */\n\n\tfunction nextSection(section, spine) {\n\t  var nextIndex = section.index;\n\n\t  while (nextIndex < spine.length - 1) {\n\t    var next = spine[nextIndex + 1];\n\n\t    if (next && (next.linear === true || next.linear === \"yes\")) {\n\t      return next;\n\t    }\n\n\t    nextIndex += 1;\n\t  }\n\n\t  return;\n\t}\n\t/**\n\t * Get the previous section in the spine\n\t */\n\n\tfunction prevSection(section, spine) {\n\t  var prevIndex = section.index;\n\n\t  while (prevIndex > 0) {\n\t    var prev = spine[prevIndex - 1];\n\n\t    if (prev && (prev.linear === true || prev.linear === \"yes\")) {\n\t      return prev;\n\t    }\n\n\t    prevIndex -= 1;\n\t  }\n\n\t  return;\n\t}\n\t/**\n\t * Serialize the contents of a document\n\t */\n\n\tfunction serialize(doc) {\n\t  var userAgent = typeof navigator !== \"undefined\" && navigator.userAgent || \"\";\n\t  var isIE = userAgent.indexOf(\"Trident\") >= 0;\n\t  var Serializer;\n\n\t  if (typeof XMLSerializer === \"undefined\" || isIE) {\n\t    Serializer = XMLDom.XMLSerializer;\n\t  } else {\n\t    Serializer = XMLSerializer;\n\t  }\n\n\t  var serializer = new Serializer();\n\t  return serializer.serializeToString(doc);\n\t}\n\t/**\n\t * Lightweight Polyfill for DOM Range\n\t * @class\n\t * @memberof Core\n\t */\n\n\tvar RangeObject =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function RangeObject() {\n\t    classCallCheck(this, RangeObject);\n\n\t    this.collapsed = false;\n\t    this.commonAncestorContainer = undefined;\n\t    this.endContainer = undefined;\n\t    this.endOffset = undefined;\n\t    this.startContainer = undefined;\n\t    this.startOffset = undefined;\n\t  }\n\n\t  createClass(RangeObject, [{\n\t    key: \"setStart\",\n\t    value: function setStart(startNode, startOffset) {\n\t      this.startContainer = startNode;\n\t      this.startOffset = startOffset;\n\n\t      if (!this.endContainer) {\n\t        this.collapse(true);\n\t      } else {\n\t        this.commonAncestorContainer = this._commonAncestorContainer();\n\t      }\n\n\t      this._checkCollapsed();\n\t    }\n\t  }, {\n\t    key: \"setEnd\",\n\t    value: function setEnd(endNode, endOffset) {\n\t      this.endContainer = endNode;\n\t      this.endOffset = endOffset;\n\n\t      if (!this.startContainer) {\n\t        this.collapse(false);\n\t      } else {\n\t        this.collapsed = false;\n\t        this.commonAncestorContainer = this._commonAncestorContainer();\n\t      }\n\n\t      this._checkCollapsed();\n\t    }\n\t  }, {\n\t    key: \"collapse\",\n\t    value: function collapse(toStart) {\n\t      this.collapsed = true;\n\n\t      if (toStart) {\n\t        this.endContainer = this.startContainer;\n\t        this.endOffset = this.startOffset;\n\t        this.commonAncestorContainer = this.startContainer.parentNode;\n\t      } else {\n\t        this.startContainer = this.endContainer;\n\t        this.startOffset = this.endOffset;\n\t        this.commonAncestorContainer = this.endOffset.parentNode;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"selectNode\",\n\t    value: function selectNode(referenceNode) {\n\t      var parent = referenceNode.parentNode;\n\t      var index = Array.prototype.indexOf.call(parent.childNodes, referenceNode);\n\t      this.setStart(parent, index);\n\t      this.setEnd(parent, index + 1);\n\t    }\n\t  }, {\n\t    key: \"selectNodeContents\",\n\t    value: function selectNodeContents(referenceNode) {\n\t      // let end = referenceNode.childNodes[referenceNode.childNodes - 1];\n\t      var endIndex = referenceNode.nodeType === 3 ? referenceNode.textContent.length : parent.childNodes.length;\n\t      this.setStart(referenceNode, 0);\n\t      this.setEnd(referenceNode, endIndex);\n\t    }\n\t  }, {\n\t    key: \"_commonAncestorContainer\",\n\t    value: function _commonAncestorContainer(startContainer, endContainer) {\n\t      var startParents = parents(startContainer || this.startContainer);\n\t      var endParents = parents(endContainer || this.endContainer);\n\t      if (startParents[0] != endParents[0]) return undefined;\n\n\t      for (var i = 0; i < startParents.length; i++) {\n\t        if (startParents[i] != endParents[i]) {\n\t          return startParents[i - 1];\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: \"_checkCollapsed\",\n\t    value: function _checkCollapsed() {\n\t      if (this.startContainer === this.endContainer && this.startOffset === this.endOffset) {\n\t        this.collapsed = true;\n\t      } else {\n\t        this.collapsed = false;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"toString\",\n\t    value: function toString() {// TODO: implement walking between start and end to find text\n\t    }\n\t  }]);\n\n\t  return RangeObject;\n\t}();\n\n\tvar utils = /*#__PURE__*/Object.freeze({\n\t\trequestAnimationFrame: requestAnimationFrame$1,\n\t\tELEMENT_NODE: ELEMENT_NODE,\n\t\tTEXT_NODE: TEXT_NODE,\n\t\tCOMMENT_NODE: COMMENT_NODE,\n\t\tDOCUMENT_NODE: DOCUMENT_NODE,\n\t\t_URL: _URL,\n\t\tuuid: uuid,\n\t\tdocumentHeight: documentHeight,\n\t\tisElement: isElement,\n\t\tisNumber: isNumber,\n\t\tisFloat: isFloat,\n\t\tprefixed: prefixed,\n\t\tdefaults: defaults,\n\t\textend: extend,\n\t\tinsert: insert,\n\t\tlocationOf: locationOf,\n\t\tindexOfSorted: indexOfSorted$1,\n\t\tbounds: bounds,\n\t\tborders: borders,\n\t\tnodeBounds: nodeBounds,\n\t\twindowBounds: windowBounds,\n\t\tindexOfNode: indexOfNode,\n\t\tindexOfTextNode: indexOfTextNode,\n\t\tindexOfElementNode: indexOfElementNode,\n\t\tisXml: isXml,\n\t\tcreateBlob: createBlob,\n\t\tcreateBlobUrl: createBlobUrl,\n\t\trevokeBlobUrl: revokeBlobUrl,\n\t\tcreateBase64Url: createBase64Url,\n\t\ttype: type,\n\t\tparse: parse,\n\t\tqs: qs,\n\t\tqsa: qsa,\n\t\tqsp: qsp,\n\t\tsprint: sprint,\n\t\ttreeWalker: treeWalker,\n\t\twalk: walk,\n\t\tblob2base64: blob2base64,\n\t\tdefer: defer,\n\t\tquerySelectorByType: querySelectorByType,\n\t\tfindChildren: findChildren,\n\t\tparents: parents,\n\t\tfilterChildren: filterChildren,\n\t\tgetParentByTagName: getParentByTagName,\n\t\tnextSection: nextSection,\n\t\tprevSection: prevSection,\n\t\tserialize: serialize,\n\t\tRangeObject: RangeObject\n\t});\n\n\tif (!process$1) {\n\t  var process$1 = {\n\t    \"cwd\" : function () { return '/' }\n\t  };\n\t}\n\n\tfunction assertPath(path) {\n\t  if (typeof path !== 'string') {\n\t    throw new TypeError('Path must be a string. Received ' + path);\n\t  }\n\t}\n\n\t// Resolves . and .. elements in a path with directory names\n\tfunction normalizeStringPosix(path, allowAboveRoot) {\n\t  var res = '';\n\t  var lastSlash = -1;\n\t  var dots = 0;\n\t  var code;\n\t  for (var i = 0; i <= path.length; ++i) {\n\t    if (i < path.length)\n\t      code = path.charCodeAt(i);\n\t    else if (code === 47/*/*/)\n\t      break;\n\t    else\n\t      code = 47/*/*/;\n\t    if (code === 47/*/*/) {\n\t      if (lastSlash === i - 1 || dots === 1) ; else if (lastSlash !== i - 1 && dots === 2) {\n\t        if (res.length < 2 ||\n\t            res.charCodeAt(res.length - 1) !== 46/*.*/ ||\n\t            res.charCodeAt(res.length - 2) !== 46/*.*/) {\n\t          if (res.length > 2) {\n\t            var start = res.length - 1;\n\t            var j = start;\n\t            for (; j >= 0; --j) {\n\t              if (res.charCodeAt(j) === 47/*/*/)\n\t                break;\n\t            }\n\t            if (j !== start) {\n\t              if (j === -1)\n\t                res = '';\n\t              else\n\t                res = res.slice(0, j);\n\t              lastSlash = i;\n\t              dots = 0;\n\t              continue;\n\t            }\n\t          } else if (res.length === 2 || res.length === 1) {\n\t            res = '';\n\t            lastSlash = i;\n\t            dots = 0;\n\t            continue;\n\t          }\n\t        }\n\t        if (allowAboveRoot) {\n\t          if (res.length > 0)\n\t            res += '/..';\n\t          else\n\t            res = '..';\n\t        }\n\t      } else {\n\t        if (res.length > 0)\n\t          res += '/' + path.slice(lastSlash + 1, i);\n\t        else\n\t          res = path.slice(lastSlash + 1, i);\n\t      }\n\t      lastSlash = i;\n\t      dots = 0;\n\t    } else if (code === 46/*.*/ && dots !== -1) {\n\t      ++dots;\n\t    } else {\n\t      dots = -1;\n\t    }\n\t  }\n\t  return res;\n\t}\n\n\tfunction _format(sep, pathObject) {\n\t  var dir = pathObject.dir || pathObject.root;\n\t  var base = pathObject.base ||\n\t    ((pathObject.name || '') + (pathObject.ext || ''));\n\t  if (!dir) {\n\t    return base;\n\t  }\n\t  if (dir === pathObject.root) {\n\t    return dir + base;\n\t  }\n\t  return dir + sep + base;\n\t}\n\n\tvar posix = {\n\t  // path.resolve([from ...], to)\n\t  resolve: function resolve() {\n\t    var resolvedPath = '';\n\t    var resolvedAbsolute = false;\n\t    var cwd;\n\n\t    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n\t      var path;\n\t      if (i >= 0)\n\t        path = arguments[i];\n\t      else {\n\t        if (cwd === undefined)\n\t          cwd = process$1.cwd();\n\t        path = cwd;\n\t      }\n\n\t      assertPath(path);\n\n\t      // Skip empty entries\n\t      if (path.length === 0) {\n\t        continue;\n\t      }\n\n\t      resolvedPath = path + '/' + resolvedPath;\n\t      resolvedAbsolute = path.charCodeAt(0) === 47/*/*/;\n\t    }\n\n\t    // At this point the path should be resolved to a full absolute path, but\n\t    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n\t    // Normalize the path\n\t    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n\t    if (resolvedAbsolute) {\n\t      if (resolvedPath.length > 0)\n\t        return '/' + resolvedPath;\n\t      else\n\t        return '/';\n\t    } else if (resolvedPath.length > 0) {\n\t      return resolvedPath;\n\t    } else {\n\t      return '.';\n\t    }\n\t  },\n\n\n\t  normalize: function normalize(path) {\n\t    assertPath(path);\n\n\t    if (path.length === 0)\n\t      return '.';\n\n\t    var isAbsolute = path.charCodeAt(0) === 47/*/*/;\n\t    var trailingSeparator = path.charCodeAt(path.length - 1) === 47/*/*/;\n\n\t    // Normalize the path\n\t    path = normalizeStringPosix(path, !isAbsolute);\n\n\t    if (path.length === 0 && !isAbsolute)\n\t      path = '.';\n\t    if (path.length > 0 && trailingSeparator)\n\t      path += '/';\n\n\t    if (isAbsolute)\n\t      return '/' + path;\n\t    return path;\n\t  },\n\n\n\t  isAbsolute: function isAbsolute(path) {\n\t    assertPath(path);\n\t    return path.length > 0 && path.charCodeAt(0) === 47/*/*/;\n\t  },\n\n\n\t  join: function join() {\n\t    if (arguments.length === 0)\n\t      return '.';\n\t    var joined;\n\t    for (var i = 0; i < arguments.length; ++i) {\n\t      var arg = arguments[i];\n\t      assertPath(arg);\n\t      if (arg.length > 0) {\n\t        if (joined === undefined)\n\t          joined = arg;\n\t        else\n\t          joined += '/' + arg;\n\t      }\n\t    }\n\t    if (joined === undefined)\n\t      return '.';\n\t    return posix.normalize(joined);\n\t  },\n\n\n\t  relative: function relative(from, to) {\n\t    assertPath(from);\n\t    assertPath(to);\n\n\t    if (from === to)\n\t      return '';\n\n\t    from = posix.resolve(from);\n\t    to = posix.resolve(to);\n\n\t    if (from === to)\n\t      return '';\n\n\t    // Trim any leading backslashes\n\t    var fromStart = 1;\n\t    for (; fromStart < from.length; ++fromStart) {\n\t      if (from.charCodeAt(fromStart) !== 47/*/*/)\n\t        break;\n\t    }\n\t    var fromEnd = from.length;\n\t    var fromLen = (fromEnd - fromStart);\n\n\t    // Trim any leading backslashes\n\t    var toStart = 1;\n\t    for (; toStart < to.length; ++toStart) {\n\t      if (to.charCodeAt(toStart) !== 47/*/*/)\n\t        break;\n\t    }\n\t    var toEnd = to.length;\n\t    var toLen = (toEnd - toStart);\n\n\t    // Compare paths to find the longest common path from root\n\t    var length = (fromLen < toLen ? fromLen : toLen);\n\t    var lastCommonSep = -1;\n\t    var i = 0;\n\t    for (; i <= length; ++i) {\n\t      if (i === length) {\n\t        if (toLen > length) {\n\t          if (to.charCodeAt(toStart + i) === 47/*/*/) {\n\t            // We get here if `from` is the exact base path for `to`.\n\t            // For example: from='/foo/bar'; to='/foo/bar/baz'\n\t            return to.slice(toStart + i + 1);\n\t          } else if (i === 0) {\n\t            // We get here if `from` is the root\n\t            // For example: from='/'; to='/foo'\n\t            return to.slice(toStart + i);\n\t          }\n\t        } else if (fromLen > length) {\n\t          if (from.charCodeAt(fromStart + i) === 47/*/*/) {\n\t            // We get here if `to` is the exact base path for `from`.\n\t            // For example: from='/foo/bar/baz'; to='/foo/bar'\n\t            lastCommonSep = i;\n\t          } else if (i === 0) {\n\t            // We get here if `to` is the root.\n\t            // For example: from='/foo'; to='/'\n\t            lastCommonSep = 0;\n\t          }\n\t        }\n\t        break;\n\t      }\n\t      var fromCode = from.charCodeAt(fromStart + i);\n\t      var toCode = to.charCodeAt(toStart + i);\n\t      if (fromCode !== toCode)\n\t        break;\n\t      else if (fromCode === 47/*/*/)\n\t        lastCommonSep = i;\n\t    }\n\n\t    var out = '';\n\t    // Generate the relative path based on the path difference between `to`\n\t    // and `from`\n\t    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n\t      if (i === fromEnd || from.charCodeAt(i) === 47/*/*/) {\n\t        if (out.length === 0)\n\t          out += '..';\n\t        else\n\t          out += '/..';\n\t      }\n\t    }\n\n\t    // Lastly, append the rest of the destination (`to`) path that comes after\n\t    // the common path parts\n\t    if (out.length > 0)\n\t      return out + to.slice(toStart + lastCommonSep);\n\t    else {\n\t      toStart += lastCommonSep;\n\t      if (to.charCodeAt(toStart) === 47/*/*/)\n\t        ++toStart;\n\t      return to.slice(toStart);\n\t    }\n\t  },\n\n\n\t  _makeLong: function _makeLong(path) {\n\t    return path;\n\t  },\n\n\n\t  dirname: function dirname(path) {\n\t    assertPath(path);\n\t    if (path.length === 0)\n\t      return '.';\n\t    var code = path.charCodeAt(0);\n\t    var hasRoot = (code === 47/*/*/);\n\t    var end = -1;\n\t    var matchedSlash = true;\n\t    for (var i = path.length - 1; i >= 1; --i) {\n\t      code = path.charCodeAt(i);\n\t      if (code === 47/*/*/) {\n\t        if (!matchedSlash) {\n\t          end = i;\n\t          break;\n\t        }\n\t      } else {\n\t        // We saw the first non-path separator\n\t        matchedSlash = false;\n\t      }\n\t    }\n\n\t    if (end === -1)\n\t      return hasRoot ? '/' : '.';\n\t    if (hasRoot && end === 1)\n\t      return '//';\n\t    return path.slice(0, end);\n\t  },\n\n\n\t  basename: function basename(path, ext) {\n\t    if (ext !== undefined && typeof ext !== 'string')\n\t      throw new TypeError('\"ext\" argument must be a string');\n\t    assertPath(path);\n\n\t    var start = 0;\n\t    var end = -1;\n\t    var matchedSlash = true;\n\t    var i;\n\n\t    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n\t      if (ext.length === path.length && ext === path)\n\t        return '';\n\t      var extIdx = ext.length - 1;\n\t      var firstNonSlashEnd = -1;\n\t      for (i = path.length - 1; i >= 0; --i) {\n\t        var code = path.charCodeAt(i);\n\t        if (code === 47/*/*/) {\n\t          // If we reached a path separator that was not part of a set of path\n\t          // separators at the end of the string, stop now\n\t          if (!matchedSlash) {\n\t            start = i + 1;\n\t            break;\n\t          }\n\t        } else {\n\t          if (firstNonSlashEnd === -1) {\n\t            // We saw the first non-path separator, remember this index in case\n\t            // we need it if the extension ends up not matching\n\t            matchedSlash = false;\n\t            firstNonSlashEnd = i + 1;\n\t          }\n\t          if (extIdx >= 0) {\n\t            // Try to match the explicit extension\n\t            if (code === ext.charCodeAt(extIdx)) {\n\t              if (--extIdx === -1) {\n\t                // We matched the extension, so mark this as the end of our path\n\t                // component\n\t                end = i;\n\t              }\n\t            } else {\n\t              // Extension does not match, so our result is the entire path\n\t              // component\n\t              extIdx = -1;\n\t              end = firstNonSlashEnd;\n\t            }\n\t          }\n\t        }\n\t      }\n\n\t      if (start === end)\n\t        end = firstNonSlashEnd;\n\t      else if (end === -1)\n\t        end = path.length;\n\t      return path.slice(start, end);\n\t    } else {\n\t      for (i = path.length - 1; i >= 0; --i) {\n\t        if (path.charCodeAt(i) === 47/*/*/) {\n\t          // If we reached a path separator that was not part of a set of path\n\t          // separators at the end of the string, stop now\n\t          if (!matchedSlash) {\n\t            start = i + 1;\n\t            break;\n\t          }\n\t        } else if (end === -1) {\n\t          // We saw the first non-path separator, mark this as the end of our\n\t          // path component\n\t          matchedSlash = false;\n\t          end = i + 1;\n\t        }\n\t      }\n\n\t      if (end === -1)\n\t        return '';\n\t      return path.slice(start, end);\n\t    }\n\t  },\n\n\n\t  extname: function extname(path) {\n\t    assertPath(path);\n\t    var startDot = -1;\n\t    var startPart = 0;\n\t    var end = -1;\n\t    var matchedSlash = true;\n\t    // Track the state of characters (if any) we see before our first dot and\n\t    // after any path separator we find\n\t    var preDotState = 0;\n\t    for (var i = path.length - 1; i >= 0; --i) {\n\t      var code = path.charCodeAt(i);\n\t      if (code === 47/*/*/) {\n\t        // If we reached a path separator that was not part of a set of path\n\t        // separators at the end of the string, stop now\n\t        if (!matchedSlash) {\n\t          startPart = i + 1;\n\t          break;\n\t        }\n\t        continue;\n\t      }\n\t      if (end === -1) {\n\t        // We saw the first non-path separator, mark this as the end of our\n\t        // extension\n\t        matchedSlash = false;\n\t        end = i + 1;\n\t      }\n\t      if (code === 46/*.*/) {\n\t        // If this is our first dot, mark it as the start of our extension\n\t        if (startDot === -1)\n\t          startDot = i;\n\t        else if (preDotState !== 1)\n\t          preDotState = 1;\n\t      } else if (startDot !== -1) {\n\t        // We saw a non-dot and non-path separator before our dot, so we should\n\t        // have a good chance at having a non-empty extension\n\t        preDotState = -1;\n\t      }\n\t    }\n\n\t    if (startDot === -1 ||\n\t        end === -1 ||\n\t        // We saw a non-dot character immediately before the dot\n\t        preDotState === 0 ||\n\t        // The (right-most) trimmed path component is exactly '..'\n\t        (preDotState === 1 &&\n\t         startDot === end - 1 &&\n\t         startDot === startPart + 1)) {\n\t      return '';\n\t    }\n\t    return path.slice(startDot, end);\n\t  },\n\n\n\t  format: function format(pathObject) {\n\t    if (pathObject === null || typeof pathObject !== 'object') {\n\t      throw new TypeError(\n\t        'Parameter \"pathObject\" must be an object, not ' + typeof(pathObject)\n\t      );\n\t    }\n\t    return _format('/', pathObject);\n\t  },\n\n\n\t  parse: function parse(path) {\n\t    assertPath(path);\n\n\t    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n\t    if (path.length === 0)\n\t      return ret;\n\t    var code = path.charCodeAt(0);\n\t    var isAbsolute = (code === 47/*/*/);\n\t    var start;\n\t    if (isAbsolute) {\n\t      ret.root = '/';\n\t      start = 1;\n\t    } else {\n\t      start = 0;\n\t    }\n\t    var startDot = -1;\n\t    var startPart = 0;\n\t    var end = -1;\n\t    var matchedSlash = true;\n\t    var i = path.length - 1;\n\n\t    // Track the state of characters (if any) we see before our first dot and\n\t    // after any path separator we find\n\t    var preDotState = 0;\n\n\t    // Get non-dir info\n\t    for (; i >= start; --i) {\n\t      code = path.charCodeAt(i);\n\t      if (code === 47/*/*/) {\n\t        // If we reached a path separator that was not part of a set of path\n\t        // separators at the end of the string, stop now\n\t        if (!matchedSlash) {\n\t          startPart = i + 1;\n\t          break;\n\t        }\n\t        continue;\n\t      }\n\t      if (end === -1) {\n\t        // We saw the first non-path separator, mark this as the end of our\n\t        // extension\n\t        matchedSlash = false;\n\t        end = i + 1;\n\t      }\n\t      if (code === 46/*.*/) {\n\t        // If this is our first dot, mark it as the start of our extension\n\t        if (startDot === -1)\n\t          startDot = i;\n\t        else if (preDotState !== 1)\n\t          preDotState = 1;\n\t      } else if (startDot !== -1) {\n\t        // We saw a non-dot and non-path separator before our dot, so we should\n\t        // have a good chance at having a non-empty extension\n\t        preDotState = -1;\n\t      }\n\t    }\n\n\t    if (startDot === -1 ||\n\t        end === -1 ||\n\t        // We saw a non-dot character immediately before the dot\n\t        preDotState === 0 ||\n\t        // The (right-most) trimmed path component is exactly '..'\n\t        (preDotState === 1 &&\n\t         startDot === end - 1 &&\n\t         startDot === startPart + 1)) {\n\t      if (end !== -1) {\n\t        if (startPart === 0 && isAbsolute)\n\t          ret.base = ret.name = path.slice(1, end);\n\t        else\n\t          ret.base = ret.name = path.slice(startPart, end);\n\t      }\n\t    } else {\n\t      if (startPart === 0 && isAbsolute) {\n\t        ret.name = path.slice(1, startDot);\n\t        ret.base = path.slice(1, end);\n\t      } else {\n\t        ret.name = path.slice(startPart, startDot);\n\t        ret.base = path.slice(startPart, end);\n\t      }\n\t      ret.ext = path.slice(startDot, end);\n\t    }\n\n\t    if (startPart > 0)\n\t      ret.dir = path.slice(0, startPart - 1);\n\t    else if (isAbsolute)\n\t      ret.dir = '/';\n\n\t    return ret;\n\t  },\n\n\n\t  sep: '/',\n\t  delimiter: ':',\n\t  posix: null\n\t};\n\n\n\tvar path = posix;\n\n\t/**\n\t * Creates a Path object for parsing and manipulation of a path strings\n\t *\n\t * Uses a polyfill for Nodejs path: https://nodejs.org/api/path.html\n\t * @param\t{string} pathString\ta url string (relative or absolute)\n\t * @class\n\t */\n\n\tvar Path =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function Path(pathString) {\n\t    classCallCheck(this, Path);\n\n\t    var protocol;\n\t    var parsed;\n\t    protocol = pathString.indexOf(\"://\");\n\n\t    if (protocol > -1) {\n\t      pathString = new URL(pathString).pathname;\n\t    }\n\n\t    parsed = this.parse(pathString);\n\t    this.path = pathString;\n\n\t    if (this.isDirectory(pathString)) {\n\t      this.directory = pathString;\n\t    } else {\n\t      this.directory = parsed.dir + \"/\";\n\t    }\n\n\t    this.filename = parsed.base;\n\t    this.extension = parsed.ext.slice(1);\n\t  }\n\t  /**\n\t   * Parse the path: https://nodejs.org/api/path.html#path_path_parse_path\n\t   * @param\t{string} what\n\t   * @returns {object}\n\t   */\n\n\n\t  createClass(Path, [{\n\t    key: \"parse\",\n\t    value: function parse(what) {\n\t      return path.parse(what);\n\t    }\n\t    /**\n\t     * @param\t{string} what\n\t     * @returns {boolean}\n\t     */\n\n\t  }, {\n\t    key: \"isAbsolute\",\n\t    value: function isAbsolute(what) {\n\t      return path.isAbsolute(what || this.path);\n\t    }\n\t    /**\n\t     * Check if path ends with a directory\n\t     * @param\t{string} what\n\t     * @returns {boolean}\n\t     */\n\n\t  }, {\n\t    key: \"isDirectory\",\n\t    value: function isDirectory(what) {\n\t      return what.charAt(what.length - 1) === \"/\";\n\t    }\n\t    /**\n\t     * Resolve a path against the directory of the Path\n\t     *\n\t     * https://nodejs.org/api/path.html#path_path_resolve_paths\n\t     * @param\t{string} what\n\t     * @returns {string} resolved\n\t     */\n\n\t  }, {\n\t    key: \"resolve\",\n\t    value: function resolve(what) {\n\t      return path.resolve(this.directory, what);\n\t    }\n\t    /**\n\t     * Resolve a path relative to the directory of the Path\n\t     *\n\t     * https://nodejs.org/api/path.html#path_path_relative_from_to\n\t     * @param\t{string} what\n\t     * @returns {string} relative\n\t     */\n\n\t  }, {\n\t    key: \"relative\",\n\t    value: function relative(what) {\n\t      return path.relative(this.directory, what);\n\t    }\n\t  }, {\n\t    key: \"splitPath\",\n\t    value: function splitPath(filename) {\n\t      return this.splitPathRe.exec(filename).slice(1);\n\t    }\n\t    /**\n\t     * Return the path string\n\t     * @returns {string} path\n\t     */\n\n\t  }, {\n\t    key: \"toString\",\n\t    value: function toString() {\n\t      return this.path;\n\t    }\n\t  }]);\n\n\t  return Path;\n\t}();\n\n\t/**\n\t * creates a Url object for parsing and manipulation of a url string\n\t * @param\t{string} urlString\ta url string (relative or absolute)\n\t * @param\t{string} [baseString] optional base for the url,\n\t * default to window.location.href\n\t */\n\n\tvar Url =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function Url(urlString, baseString) {\n\t    classCallCheck(this, Url);\n\n\t    var absolute = urlString.indexOf(\"://\") > -1;\n\t    var pathname = urlString;\n\t    var basePath;\n\t    this.Url = undefined;\n\t    this.href = urlString;\n\t    this.protocol = \"\";\n\t    this.origin = \"\";\n\t    this.hash = \"\";\n\t    this.hash = \"\";\n\t    this.search = \"\";\n\t    this.base = baseString;\n\n\t    if (!absolute && baseString !== false && typeof baseString !== \"string\" && typeof window !== \"undefined\" && typeof window.location !== \"undefined\") {\n\t      this.base = window.location.href;\n\t    } // URL Polyfill doesn't throw an error if base is empty\n\n\n\t    if (absolute || this.base) {\n\t      try {\n\t        if (this.base) {\n\t          // Safari doesn't like an undefined base\n\t          this.Url = new URL(urlString, this.base);\n\t        } else {\n\t          this.Url = new URL(urlString);\n\t        }\n\n\t        this.href = this.Url.href;\n\t        this.protocol = this.Url.protocol;\n\t        this.origin = this.Url.origin;\n\t        this.hash = this.Url.hash;\n\t        this.search = this.Url.search;\n\t        pathname = this.Url.pathname;\n\t      } catch (e) {\n\t        // Skip URL parsing\n\t        this.Url = undefined; // resolve the pathname from the base\n\n\t        if (this.base) {\n\t          basePath = new Path(this.base);\n\t          pathname = basePath.resolve(pathname);\n\t        }\n\t      }\n\t    }\n\n\t    this.Path = new Path(pathname);\n\t    this.directory = this.Path.directory;\n\t    this.filename = this.Path.filename;\n\t    this.extension = this.Path.extension;\n\t  }\n\t  /**\n\t   * @returns {Path}\n\t   */\n\n\n\t  createClass(Url, [{\n\t    key: \"path\",\n\t    value: function path$$1() {\n\t      return this.Path;\n\t    }\n\t    /**\n\t     * Resolves a relative path to a absolute url\n\t     * @param {string} what\n\t     * @returns {string} url\n\t     */\n\n\t  }, {\n\t    key: \"resolve\",\n\t    value: function resolve(what) {\n\t      var isAbsolute = what.indexOf(\"://\") > -1;\n\t      var fullpath;\n\n\t      if (isAbsolute) {\n\t        return what;\n\t      }\n\n\t      fullpath = path.resolve(this.directory, what);\n\t      return this.origin + fullpath;\n\t    }\n\t    /**\n\t     * Resolve a path relative to the url\n\t     * @param {string} what\n\t     * @returns {string} path\n\t     */\n\n\t  }, {\n\t    key: \"relative\",\n\t    value: function relative(what) {\n\t      return path.relative(what, this.directory);\n\t    }\n\t    /**\n\t     * @returns {string}\n\t     */\n\n\t  }, {\n\t    key: \"toString\",\n\t    value: function toString() {\n\t      return this.href;\n\t    }\n\t  }]);\n\n\t  return Url;\n\t}();\n\n\tvar ELEMENT_NODE$1 = 1;\n\tvar TEXT_NODE$1 = 3; // const COMMENT_NODE = 8;\n\n\tvar DOCUMENT_NODE$1 = 9;\n\t/**\n\t\t* Parsing and creation of EpubCFIs: http://www.idpf.org/epub/linking/cfi/epub-cfi.html\n\n\t\t* Implements:\n\t\t* - Character Offset: epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/2/1:3)\n\t\t* - Simple Ranges : epubcfi(/6/4[chap01ref]!/4[body01]/10[para05],/2/1:1,/3:4)\n\n\t\t* Does Not Implement:\n\t\t* - Temporal Offset (~)\n\t\t* - Spatial Offset (@)\n\t\t* - Temporal-Spatial Offset (~ + @)\n\t\t* - Text Location Assertion ([)\n\t\t* @class\n\t\t@param {string | Range | Node } [cfiFrom]\n\t\t@param {string | object} [base]\n\t\t@param {string} [ignoreClass] class to ignore when parsing DOM\n\t*/\n\n\tvar EpubCFI =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function EpubCFI(cfiFrom, base, ignoreClass) {\n\t    classCallCheck(this, EpubCFI);\n\n\t    var type$$1;\n\t    this.str = \"\";\n\t    this.base = {};\n\t    this.spinePos = 0; // For compatibility\n\n\t    this.range = false; // true || false;\n\n\t    this.path = {};\n\t    this.start = null;\n\t    this.end = null; // Allow instantiation without the \"new\" keyword\n\n\t    if (!(this instanceof EpubCFI)) {\n\t      return new EpubCFI(cfiFrom, base, ignoreClass);\n\t    }\n\n\t    if (typeof base === \"string\") {\n\t      this.base = this.parseComponent(base);\n\t    } else if (_typeof_1(base) === \"object\" && base.steps) {\n\t      this.base = base;\n\t    }\n\n\t    type$$1 = this.checkType(cfiFrom);\n\n\t    if (type$$1 === \"string\") {\n\t      this.str = cfiFrom;\n\t      return extend(this, this.parse(cfiFrom));\n\t    } else if (type$$1 === \"range\") {\n\t      return extend(this, this.fromRange(cfiFrom, this.base, ignoreClass));\n\t    } else if (type$$1 === \"node\") {\n\t      return extend(this, this.fromNode(cfiFrom, this.base, ignoreClass));\n\t    } else if (type$$1 === \"EpubCFI\" && cfiFrom.path) {\n\t      return cfiFrom;\n\t    } else if (!cfiFrom) {\n\t      return this;\n\t    } else {\n\t      throw new TypeError(\"not a valid argument for EpubCFI\");\n\t    }\n\t  }\n\t  /**\n\t   * Check the type of constructor input\n\t   * @private\n\t   */\n\n\n\t  createClass(EpubCFI, [{\n\t    key: \"checkType\",\n\t    value: function checkType(cfi) {\n\t      if (this.isCfiString(cfi)) {\n\t        return \"string\"; // Is a range object\n\t      } else if (_typeof_1(cfi) === \"object\" && (type(cfi) === \"Range\" || typeof cfi.startContainer != \"undefined\")) {\n\t        return \"range\";\n\t      } else if (_typeof_1(cfi) === \"object\" && typeof cfi.nodeType != \"undefined\") {\n\t        // || typeof cfi === \"function\"\n\t        return \"node\";\n\t      } else if (_typeof_1(cfi) === \"object\" && cfi instanceof EpubCFI) {\n\t        return \"EpubCFI\";\n\t      } else {\n\t        return false;\n\t      }\n\t    }\n\t    /**\n\t     * Parse a cfi string to a CFI object representation\n\t     * @param {string} cfiStr\n\t     * @returns {object} cfi\n\t     */\n\n\t  }, {\n\t    key: \"parse\",\n\t    value: function parse$$1(cfiStr) {\n\t      var cfi = {\n\t        spinePos: -1,\n\t        range: false,\n\t        base: {},\n\t        path: {},\n\t        start: null,\n\t        end: null\n\t      };\n\t      var baseComponent, pathComponent, range;\n\n\t      if (typeof cfiStr !== \"string\") {\n\t        return {\n\t          spinePos: -1\n\t        };\n\t      }\n\n\t      if (cfiStr.indexOf(\"epubcfi(\") === 0 && cfiStr[cfiStr.length - 1] === \")\") {\n\t        // Remove intial epubcfi( and ending )\n\t        cfiStr = cfiStr.slice(8, cfiStr.length - 1);\n\t      }\n\n\t      baseComponent = this.getChapterComponent(cfiStr); // Make sure this is a valid cfi or return\n\n\t      if (!baseComponent) {\n\t        return {\n\t          spinePos: -1\n\t        };\n\t      }\n\n\t      cfi.base = this.parseComponent(baseComponent);\n\t      pathComponent = this.getPathComponent(cfiStr);\n\t      cfi.path = this.parseComponent(pathComponent);\n\t      range = this.getRange(cfiStr);\n\n\t      if (range) {\n\t        cfi.range = true;\n\t        cfi.start = this.parseComponent(range[0]);\n\t        cfi.end = this.parseComponent(range[1]);\n\t      } // Get spine node position\n\t      // cfi.spineSegment = cfi.base.steps[1];\n\t      // Chapter segment is always the second step\n\n\n\t      if (!cfi.base.steps || cfi.base.steps.length < 2) {\n\t        return {\n\t          spinePos: -1\n\t        };\n\t      } else {\n\t        cfi.spinePos = cfi.base.steps[1].index;\n\t      }\n\n\t      return cfi;\n\t    }\n\t  }, {\n\t    key: \"parseComponent\",\n\t    value: function parseComponent(componentStr) {\n\t      var component = {\n\t        steps: [],\n\t        terminal: {\n\t          offset: null,\n\t          assertion: null\n\t        }\n\t      };\n\t      var parts = componentStr.split(\":\");\n\t      var steps = parts[0].split(\"/\");\n\t      var terminal;\n\n\t      if (parts.length > 1) {\n\t        terminal = parts[1];\n\t        component.terminal = this.parseTerminal(terminal);\n\t      }\n\n\t      if (steps[0] === \"\") {\n\t        steps.shift(); // Ignore the first slash\n\t      }\n\n\t      component.steps = steps.map(function (step) {\n\t        return this.parseStep(step);\n\t      }.bind(this));\n\t      return component;\n\t    }\n\t  }, {\n\t    key: \"parseStep\",\n\t    value: function parseStep(stepStr) {\n\t      var type$$1, num, index, has_brackets, id;\n\t      has_brackets = stepStr.match(/\\[(.*)\\]/);\n\n\t      if (has_brackets && has_brackets[1]) {\n\t        id = has_brackets[1];\n\t      } //-- Check if step is a text node or element\n\n\n\t      num = parseInt(stepStr);\n\n\t      if (isNaN(num)) {\n\t        return;\n\t      }\n\n\t      if (num % 2 === 0) {\n\t        // Even = is an element\n\t        type$$1 = \"element\";\n\t        index = num / 2 - 1;\n\t      } else {\n\t        type$$1 = \"text\";\n\t        index = (num - 1) / 2;\n\t      }\n\n\t      return {\n\t        \"type\": type$$1,\n\t        \"index\": index,\n\t        \"id\": id || null\n\t      };\n\t    }\n\t  }, {\n\t    key: \"parseTerminal\",\n\t    value: function parseTerminal(termialStr) {\n\t      var characterOffset, textLocationAssertion;\n\t      var assertion = termialStr.match(/\\[(.*)\\]/);\n\n\t      if (assertion && assertion[1]) {\n\t        characterOffset = parseInt(termialStr.split(\"[\")[0]);\n\t        textLocationAssertion = assertion[1];\n\t      } else {\n\t        characterOffset = parseInt(termialStr);\n\t      }\n\n\t      if (!isNumber(characterOffset)) {\n\t        characterOffset = null;\n\t      }\n\n\t      return {\n\t        \"offset\": characterOffset,\n\t        \"assertion\": textLocationAssertion\n\t      };\n\t    }\n\t  }, {\n\t    key: \"getChapterComponent\",\n\t    value: function getChapterComponent(cfiStr) {\n\t      var indirection = cfiStr.split(\"!\");\n\t      return indirection[0];\n\t    }\n\t  }, {\n\t    key: \"getPathComponent\",\n\t    value: function getPathComponent(cfiStr) {\n\t      var indirection = cfiStr.split(\"!\");\n\n\t      if (indirection[1]) {\n\t        var ranges = indirection[1].split(\",\");\n\t        return ranges[0];\n\t      }\n\t    }\n\t  }, {\n\t    key: \"getRange\",\n\t    value: function getRange(cfiStr) {\n\t      var ranges = cfiStr.split(\",\");\n\n\t      if (ranges.length === 3) {\n\t        return [ranges[1], ranges[2]];\n\t      }\n\n\t      return false;\n\t    }\n\t  }, {\n\t    key: \"getCharecterOffsetComponent\",\n\t    value: function getCharecterOffsetComponent(cfiStr) {\n\t      var splitStr = cfiStr.split(\":\");\n\t      return splitStr[1] || \"\";\n\t    }\n\t  }, {\n\t    key: \"joinSteps\",\n\t    value: function joinSteps(steps) {\n\t      if (!steps) {\n\t        return \"\";\n\t      }\n\n\t      return steps.map(function (part) {\n\t        var segment = \"\";\n\n\t        if (part.type === \"element\") {\n\t          segment += (part.index + 1) * 2;\n\t        }\n\n\t        if (part.type === \"text\") {\n\t          segment += 1 + 2 * part.index; // TODO: double check that this is odd\n\t        }\n\n\t        if (part.id) {\n\t          segment += \"[\" + part.id + \"]\";\n\t        }\n\n\t        return segment;\n\t      }).join(\"/\");\n\t    }\n\t  }, {\n\t    key: \"segmentString\",\n\t    value: function segmentString(segment) {\n\t      var segmentString = \"/\";\n\t      segmentString += this.joinSteps(segment.steps);\n\n\t      if (segment.terminal && segment.terminal.offset != null) {\n\t        segmentString += \":\" + segment.terminal.offset;\n\t      }\n\n\t      if (segment.terminal && segment.terminal.assertion != null) {\n\t        segmentString += \"[\" + segment.terminal.assertion + \"]\";\n\t      }\n\n\t      return segmentString;\n\t    }\n\t    /**\n\t     * Convert CFI to a epubcfi(...) string\n\t     * @returns {string} epubcfi\n\t     */\n\n\t  }, {\n\t    key: \"toString\",\n\t    value: function toString() {\n\t      var cfiString = \"epubcfi(\";\n\t      cfiString += this.segmentString(this.base);\n\t      cfiString += \"!\";\n\t      cfiString += this.segmentString(this.path); // Add Range, if present\n\n\t      if (this.range && this.start) {\n\t        cfiString += \",\";\n\t        cfiString += this.segmentString(this.start);\n\t      }\n\n\t      if (this.range && this.end) {\n\t        cfiString += \",\";\n\t        cfiString += this.segmentString(this.end);\n\t      }\n\n\t      cfiString += \")\";\n\t      return cfiString;\n\t    }\n\t    /**\n\t     * Compare which of two CFIs is earlier in the text\n\t     * @returns {number} First is earlier = 1, Second is earlier = -1, They are equal = 0\n\t     */\n\n\t  }, {\n\t    key: \"compare\",\n\t    value: function compare(cfiOne, cfiTwo) {\n\t      var stepsA, stepsB;\n\t      var terminalA, terminalB;\n\n\t      if (typeof cfiOne === \"string\") {\n\t        cfiOne = new EpubCFI(cfiOne);\n\t      }\n\n\t      if (typeof cfiTwo === \"string\") {\n\t        cfiTwo = new EpubCFI(cfiTwo);\n\t      } // Compare Spine Positions\n\n\n\t      if (cfiOne.spinePos > cfiTwo.spinePos) {\n\t        return 1;\n\t      }\n\n\t      if (cfiOne.spinePos < cfiTwo.spinePos) {\n\t        return -1;\n\t      }\n\n\t      if (cfiOne.range) {\n\t        stepsA = cfiOne.path.steps.concat(cfiOne.start.steps);\n\t        terminalA = cfiOne.start.terminal;\n\t      } else {\n\t        stepsA = cfiOne.path.steps;\n\t        terminalA = cfiOne.path.terminal;\n\t      }\n\n\t      if (cfiTwo.range) {\n\t        stepsB = cfiTwo.path.steps.concat(cfiTwo.start.steps);\n\t        terminalB = cfiTwo.start.terminal;\n\t      } else {\n\t        stepsB = cfiTwo.path.steps;\n\t        terminalB = cfiTwo.path.terminal;\n\t      } // Compare Each Step in the First item\n\n\n\t      for (var i = 0; i < stepsA.length; i++) {\n\t        if (!stepsA[i]) {\n\t          return -1;\n\t        }\n\n\t        if (!stepsB[i]) {\n\t          return 1;\n\t        }\n\n\t        if (stepsA[i].index > stepsB[i].index) {\n\t          return 1;\n\t        }\n\n\t        if (stepsA[i].index < stepsB[i].index) {\n\t          return -1;\n\t        } // Otherwise continue checking\n\n\t      } // All steps in First equal to Second and First is Less Specific\n\n\n\t      if (stepsA.length < stepsB.length) {\n\t        return 1;\n\t      } // Compare the charecter offset of the text node\n\n\n\t      if (terminalA.offset > terminalB.offset) {\n\t        return 1;\n\t      }\n\n\t      if (terminalA.offset < terminalB.offset) {\n\t        return -1;\n\t      } // CFI's are equal\n\n\n\t      return 0;\n\t    }\n\t  }, {\n\t    key: \"step\",\n\t    value: function step(node) {\n\t      var nodeType = node.nodeType === TEXT_NODE$1 ? \"text\" : \"element\";\n\t      return {\n\t        \"id\": node.id,\n\t        \"tagName\": node.tagName,\n\t        \"type\": nodeType,\n\t        \"index\": this.position(node)\n\t      };\n\t    }\n\t  }, {\n\t    key: \"filteredStep\",\n\t    value: function filteredStep(node, ignoreClass) {\n\t      var filteredNode = this.filter(node, ignoreClass);\n\t      var nodeType; // Node filtered, so ignore\n\n\t      if (!filteredNode) {\n\t        return;\n\t      } // Otherwise add the filter node in\n\n\n\t      nodeType = filteredNode.nodeType === TEXT_NODE$1 ? \"text\" : \"element\";\n\t      return {\n\t        \"id\": filteredNode.id,\n\t        \"tagName\": filteredNode.tagName,\n\t        \"type\": nodeType,\n\t        \"index\": this.filteredPosition(filteredNode, ignoreClass)\n\t      };\n\t    }\n\t  }, {\n\t    key: \"pathTo\",\n\t    value: function pathTo(node, offset, ignoreClass) {\n\t      var segment = {\n\t        steps: [],\n\t        terminal: {\n\t          offset: null,\n\t          assertion: null\n\t        }\n\t      };\n\t      var currentNode = node;\n\t      var step;\n\n\t      while (currentNode && currentNode.parentNode && currentNode.parentNode.nodeType != DOCUMENT_NODE$1) {\n\t        if (ignoreClass) {\n\t          step = this.filteredStep(currentNode, ignoreClass);\n\t        } else {\n\t          step = this.step(currentNode);\n\t        }\n\n\t        if (step) {\n\t          segment.steps.unshift(step);\n\t        }\n\n\t        currentNode = currentNode.parentNode;\n\t      }\n\n\t      if (offset != null && offset >= 0) {\n\t        segment.terminal.offset = offset; // Make sure we are getting to a textNode if there is an offset\n\n\t        if (segment.steps[segment.steps.length - 1].type != \"text\") {\n\t          segment.steps.push({\n\t            \"type\": \"text\",\n\t            \"index\": 0\n\t          });\n\t        }\n\t      }\n\n\t      return segment;\n\t    }\n\t  }, {\n\t    key: \"equalStep\",\n\t    value: function equalStep(stepA, stepB) {\n\t      if (!stepA || !stepB) {\n\t        return false;\n\t      }\n\n\t      if (stepA.index === stepB.index && stepA.id === stepB.id && stepA.type === stepB.type) {\n\t        return true;\n\t      }\n\n\t      return false;\n\t    }\n\t    /**\n\t     * Create a CFI object from a Range\n\t     * @param {Range} range\n\t     * @param {string | object} base\n\t     * @param {string} [ignoreClass]\n\t     * @returns {object} cfi\n\t     */\n\n\t  }, {\n\t    key: \"fromRange\",\n\t    value: function fromRange(range, base, ignoreClass) {\n\t      var cfi = {\n\t        range: false,\n\t        base: {},\n\t        path: {},\n\t        start: null,\n\t        end: null\n\t      };\n\t      var start = range.startContainer;\n\t      var end = range.endContainer;\n\t      var startOffset = range.startOffset;\n\t      var endOffset = range.endOffset;\n\t      var needsIgnoring = false;\n\n\t      if (ignoreClass) {\n\t        // Tell pathTo if / what to ignore\n\t        needsIgnoring = start.ownerDocument.querySelector(\".\" + ignoreClass) != null;\n\t      }\n\n\t      if (typeof base === \"string\") {\n\t        cfi.base = this.parseComponent(base);\n\t        cfi.spinePos = cfi.base.steps[1].index;\n\t      } else if (_typeof_1(base) === \"object\") {\n\t        cfi.base = base;\n\t      }\n\n\t      if (range.collapsed) {\n\t        if (needsIgnoring) {\n\t          startOffset = this.patchOffset(start, startOffset, ignoreClass);\n\t        }\n\n\t        cfi.path = this.pathTo(start, startOffset, ignoreClass);\n\t      } else {\n\t        cfi.range = true;\n\n\t        if (needsIgnoring) {\n\t          startOffset = this.patchOffset(start, startOffset, ignoreClass);\n\t        }\n\n\t        cfi.start = this.pathTo(start, startOffset, ignoreClass);\n\n\t        if (needsIgnoring) {\n\t          endOffset = this.patchOffset(end, endOffset, ignoreClass);\n\t        }\n\n\t        cfi.end = this.pathTo(end, endOffset, ignoreClass); // Create a new empty path\n\n\t        cfi.path = {\n\t          steps: [],\n\t          terminal: null\n\t        }; // Push steps that are shared between start and end to the common path\n\n\t        var len = cfi.start.steps.length;\n\t        var i;\n\n\t        for (i = 0; i < len; i++) {\n\t          if (this.equalStep(cfi.start.steps[i], cfi.end.steps[i])) {\n\t            if (i === len - 1) {\n\t              // Last step is equal, check terminals\n\t              if (cfi.start.terminal === cfi.end.terminal) {\n\t                // CFI's are equal\n\t                cfi.path.steps.push(cfi.start.steps[i]); // Not a range\n\n\t                cfi.range = false;\n\t              }\n\t            } else {\n\t              cfi.path.steps.push(cfi.start.steps[i]);\n\t            }\n\t          } else {\n\t            break;\n\t          }\n\t        }\n\n\t        cfi.start.steps = cfi.start.steps.slice(cfi.path.steps.length);\n\t        cfi.end.steps = cfi.end.steps.slice(cfi.path.steps.length); // TODO: Add Sanity check to make sure that the end if greater than the start\n\t      }\n\n\t      return cfi;\n\t    }\n\t    /**\n\t     * Create a CFI object from a Node\n\t     * @param {Node} anchor\n\t     * @param {string | object} base\n\t     * @param {string} [ignoreClass]\n\t     * @returns {object} cfi\n\t     */\n\n\t  }, {\n\t    key: \"fromNode\",\n\t    value: function fromNode(anchor, base, ignoreClass) {\n\t      var cfi = {\n\t        range: false,\n\t        base: {},\n\t        path: {},\n\t        start: null,\n\t        end: null\n\t      };\n\n\t      if (typeof base === \"string\") {\n\t        cfi.base = this.parseComponent(base);\n\t        cfi.spinePos = cfi.base.steps[1].index;\n\t      } else if (_typeof_1(base) === \"object\") {\n\t        cfi.base = base;\n\t      }\n\n\t      cfi.path = this.pathTo(anchor, null, ignoreClass);\n\t      return cfi;\n\t    }\n\t  }, {\n\t    key: \"filter\",\n\t    value: function filter(anchor, ignoreClass) {\n\t      var needsIgnoring;\n\t      var sibling; // to join with\n\n\t      var parent, previousSibling, nextSibling;\n\t      var isText = false;\n\n\t      if (anchor.nodeType === TEXT_NODE$1) {\n\t        isText = true;\n\t        parent = anchor.parentNode;\n\t        needsIgnoring = anchor.parentNode.classList.contains(ignoreClass);\n\t      } else {\n\t        isText = false;\n\t        needsIgnoring = anchor.classList.contains(ignoreClass);\n\t      }\n\n\t      if (needsIgnoring && isText) {\n\t        previousSibling = parent.previousSibling;\n\t        nextSibling = parent.nextSibling; // If the sibling is a text node, join the nodes\n\n\t        if (previousSibling && previousSibling.nodeType === TEXT_NODE$1) {\n\t          sibling = previousSibling;\n\t        } else if (nextSibling && nextSibling.nodeType === TEXT_NODE$1) {\n\t          sibling = nextSibling;\n\t        }\n\n\t        if (sibling) {\n\t          return sibling;\n\t        } else {\n\t          // Parent will be ignored on next step\n\t          return anchor;\n\t        }\n\t      } else if (needsIgnoring && !isText) {\n\t        // Otherwise just skip the element node\n\t        return false;\n\t      } else {\n\t        // No need to filter\n\t        return anchor;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"patchOffset\",\n\t    value: function patchOffset(anchor, offset, ignoreClass) {\n\t      if (anchor.nodeType != TEXT_NODE$1) {\n\t        throw new Error(\"Anchor must be a text node\");\n\t      }\n\n\t      var curr = anchor;\n\t      var totalOffset = offset; // If the parent is a ignored node, get offset from it's start\n\n\t      if (anchor.parentNode.classList.contains(ignoreClass)) {\n\t        curr = anchor.parentNode;\n\t      }\n\n\t      while (curr.previousSibling) {\n\t        if (curr.previousSibling.nodeType === ELEMENT_NODE$1) {\n\t          // Originally a text node, so join\n\t          if (curr.previousSibling.classList.contains(ignoreClass)) {\n\t            totalOffset += curr.previousSibling.textContent.length;\n\t          } else {\n\t            break; // Normal node, dont join\n\t          }\n\t        } else {\n\t          // If the previous sibling is a text node, join the nodes\n\t          totalOffset += curr.previousSibling.textContent.length;\n\t        }\n\n\t        curr = curr.previousSibling;\n\t      }\n\n\t      return totalOffset;\n\t    }\n\t  }, {\n\t    key: \"normalizedMap\",\n\t    value: function normalizedMap(children, nodeType, ignoreClass) {\n\t      var output = {};\n\t      var prevIndex = -1;\n\t      var i,\n\t          len = children.length;\n\t      var currNodeType;\n\t      var prevNodeType;\n\n\t      for (i = 0; i < len; i++) {\n\t        currNodeType = children[i].nodeType; // Check if needs ignoring\n\n\t        if (currNodeType === ELEMENT_NODE$1 && children[i].classList.contains(ignoreClass)) {\n\t          currNodeType = TEXT_NODE$1;\n\t        }\n\n\t        if (i > 0 && currNodeType === TEXT_NODE$1 && prevNodeType === TEXT_NODE$1) {\n\t          // join text nodes\n\t          output[i] = prevIndex;\n\t        } else if (nodeType === currNodeType) {\n\t          prevIndex = prevIndex + 1;\n\t          output[i] = prevIndex;\n\t        }\n\n\t        prevNodeType = currNodeType;\n\t      }\n\n\t      return output;\n\t    }\n\t  }, {\n\t    key: \"position\",\n\t    value: function position(anchor) {\n\t      var children, index;\n\n\t      if (anchor.nodeType === ELEMENT_NODE$1) {\n\t        children = anchor.parentNode.children;\n\n\t        if (!children) {\n\t          children = findChildren(anchor.parentNode);\n\t        }\n\n\t        index = Array.prototype.indexOf.call(children, anchor);\n\t      } else {\n\t        children = this.textNodes(anchor.parentNode);\n\t        index = children.indexOf(anchor);\n\t      }\n\n\t      return index;\n\t    }\n\t  }, {\n\t    key: \"filteredPosition\",\n\t    value: function filteredPosition(anchor, ignoreClass) {\n\t      var children, index, map;\n\n\t      if (anchor.nodeType === ELEMENT_NODE$1) {\n\t        children = anchor.parentNode.children;\n\t        map = this.normalizedMap(children, ELEMENT_NODE$1, ignoreClass);\n\t      } else {\n\t        children = anchor.parentNode.childNodes; // Inside an ignored node\n\n\t        if (anchor.parentNode.classList.contains(ignoreClass)) {\n\t          anchor = anchor.parentNode;\n\t          children = anchor.parentNode.childNodes;\n\t        }\n\n\t        map = this.normalizedMap(children, TEXT_NODE$1, ignoreClass);\n\t      }\n\n\t      index = Array.prototype.indexOf.call(children, anchor);\n\t      return map[index];\n\t    }\n\t  }, {\n\t    key: \"stepsToXpath\",\n\t    value: function stepsToXpath(steps) {\n\t      var xpath = [\".\", \"*\"];\n\t      steps.forEach(function (step) {\n\t        var position = step.index + 1;\n\n\t        if (step.id) {\n\t          xpath.push(\"*[position()=\" + position + \" and @id='\" + step.id + \"']\");\n\t        } else if (step.type === \"text\") {\n\t          xpath.push(\"text()[\" + position + \"]\");\n\t        } else {\n\t          xpath.push(\"*[\" + position + \"]\");\n\t        }\n\t      });\n\t      return xpath.join(\"/\");\n\t    }\n\t    /*\n\t    \tTo get the last step if needed:\n\t    \t// Get the terminal step\n\t    lastStep = steps[steps.length-1];\n\t    // Get the query string\n\t    query = this.stepsToQuery(steps);\n\t    // Find the containing element\n\t    startContainerParent = doc.querySelector(query);\n\t    // Find the text node within that element\n\t    if(startContainerParent && lastStep.type == \"text\") {\n\t    \tcontainer = startContainerParent.childNodes[lastStep.index];\n\t    }\n\t    */\n\n\t  }, {\n\t    key: \"stepsToQuerySelector\",\n\t    value: function stepsToQuerySelector(steps) {\n\t      var query = [\"html\"];\n\t      steps.forEach(function (step) {\n\t        var position = step.index + 1;\n\n\t        if (step.id) {\n\t          query.push(\"#\" + step.id);\n\t        } else if (step.type === \"text\") ; else {\n\t          query.push(\"*:nth-child(\" + position + \")\");\n\t        }\n\t      });\n\t      return query.join(\">\");\n\t    }\n\t  }, {\n\t    key: \"textNodes\",\n\t    value: function textNodes(container, ignoreClass) {\n\t      return Array.prototype.slice.call(container.childNodes).filter(function (node) {\n\t        if (node.nodeType === TEXT_NODE$1) {\n\t          return true;\n\t        } else if (ignoreClass && node.classList.contains(ignoreClass)) {\n\t          return true;\n\t        }\n\n\t        return false;\n\t      });\n\t    }\n\t  }, {\n\t    key: \"walkToNode\",\n\t    value: function walkToNode(steps, _doc, ignoreClass) {\n\t      var doc = _doc || document;\n\t      var container = doc.documentElement;\n\t      var children;\n\t      var step;\n\t      var len = steps.length;\n\t      var i;\n\n\t      for (i = 0; i < len; i++) {\n\t        step = steps[i];\n\n\t        if (step.type === \"element\") {\n\t          //better to get a container using id as some times step.index may not be correct\n\t          //For ex.https://github.com/futurepress/epub.js/issues/561\n\t          if (step.id) {\n\t            container = doc.getElementById(step.id);\n\t          } else {\n\t            children = container.children || findChildren(container);\n\t            container = children[step.index];\n\t          }\n\t        } else if (step.type === \"text\") {\n\t          container = this.textNodes(container, ignoreClass)[step.index];\n\t        }\n\n\t        if (!container) {\n\t          //Break the for loop as due to incorrect index we can get error if\n\t          //container is undefined so that other functionailties works fine\n\t          //like navigation\n\t          break;\n\t        }\n\t      }\n\n\t      return container;\n\t    }\n\t  }, {\n\t    key: \"findNode\",\n\t    value: function findNode(steps, _doc, ignoreClass) {\n\t      var doc = _doc || document;\n\t      var container;\n\t      var xpath;\n\n\t      if (!ignoreClass && typeof doc.evaluate != \"undefined\") {\n\t        xpath = this.stepsToXpath(steps);\n\t        container = doc.evaluate(xpath, doc, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;\n\t      } else if (ignoreClass) {\n\t        container = this.walkToNode(steps, doc, ignoreClass);\n\t      } else {\n\t        container = this.walkToNode(steps, doc);\n\t      }\n\n\t      return container;\n\t    }\n\t  }, {\n\t    key: \"fixMiss\",\n\t    value: function fixMiss(steps, offset, _doc, ignoreClass) {\n\t      var container = this.findNode(steps.slice(0, -1), _doc, ignoreClass);\n\t      var children = container.childNodes;\n\t      var map = this.normalizedMap(children, TEXT_NODE$1, ignoreClass);\n\t      var child;\n\t      var len;\n\t      var lastStepIndex = steps[steps.length - 1].index;\n\n\t      for (var childIndex in map) {\n\t        if (!map.hasOwnProperty(childIndex)) return;\n\n\t        if (map[childIndex] === lastStepIndex) {\n\t          child = children[childIndex];\n\t          len = child.textContent.length;\n\n\t          if (offset > len) {\n\t            offset = offset - len;\n\t          } else {\n\t            if (child.nodeType === ELEMENT_NODE$1) {\n\t              container = child.childNodes[0];\n\t            } else {\n\t              container = child;\n\t            }\n\n\t            break;\n\t          }\n\t        }\n\t      }\n\n\t      return {\n\t        container: container,\n\t        offset: offset\n\t      };\n\t    }\n\t    /**\n\t     * Creates a DOM range representing a CFI\n\t     * @param {document} _doc document referenced in the base\n\t     * @param {string} [ignoreClass]\n\t     * @return {Range}\n\t     */\n\n\t  }, {\n\t    key: \"toRange\",\n\t    value: function toRange(_doc, ignoreClass) {\n\t      var doc = _doc || document;\n\t      var range;\n\t      var start, end, startContainer, endContainer;\n\t      var cfi = this;\n\t      var startSteps, endSteps;\n\t      var needsIgnoring = ignoreClass ? doc.querySelector(\".\" + ignoreClass) != null : false;\n\t      var missed;\n\n\t      if (typeof doc.createRange !== \"undefined\") {\n\t        range = doc.createRange();\n\t      } else {\n\t        range = new RangeObject();\n\t      }\n\n\t      if (cfi.range) {\n\t        start = cfi.start;\n\t        startSteps = cfi.path.steps.concat(start.steps);\n\t        startContainer = this.findNode(startSteps, doc, needsIgnoring ? ignoreClass : null);\n\t        end = cfi.end;\n\t        endSteps = cfi.path.steps.concat(end.steps);\n\t        endContainer = this.findNode(endSteps, doc, needsIgnoring ? ignoreClass : null);\n\t      } else {\n\t        start = cfi.path;\n\t        startSteps = cfi.path.steps;\n\t        startContainer = this.findNode(cfi.path.steps, doc, needsIgnoring ? ignoreClass : null);\n\t      }\n\n\t      if (startContainer) {\n\t        try {\n\t          if (start.terminal.offset != null) {\n\t            range.setStart(startContainer, start.terminal.offset);\n\t          } else {\n\t            range.setStart(startContainer, 0);\n\t          }\n\t        } catch (e) {\n\t          missed = this.fixMiss(startSteps, start.terminal.offset, doc, needsIgnoring ? ignoreClass : null);\n\t          range.setStart(missed.container, missed.offset);\n\t        }\n\t      } else {\n\t        console.log(\"No startContainer found for\", this.toString()); // No start found\n\n\t        return null;\n\t      }\n\n\t      if (endContainer) {\n\t        try {\n\t          if (end.terminal.offset != null) {\n\t            range.setEnd(endContainer, end.terminal.offset);\n\t          } else {\n\t            range.setEnd(endContainer, 0);\n\t          }\n\t        } catch (e) {\n\t          missed = this.fixMiss(endSteps, cfi.end.terminal.offset, doc, needsIgnoring ? ignoreClass : null);\n\t          range.setEnd(missed.container, missed.offset);\n\t        }\n\t      } // doc.defaultView.getSelection().addRange(range);\n\n\n\t      return range;\n\t    }\n\t    /**\n\t     * Check if a string is wrapped with \"epubcfi()\"\n\t     * @param {string} str\n\t     * @returns {boolean}\n\t     */\n\n\t  }, {\n\t    key: \"isCfiString\",\n\t    value: function isCfiString(str) {\n\t      if (typeof str === \"string\" && str.indexOf(\"epubcfi(\") === 0 && str[str.length - 1] === \")\") {\n\t        return true;\n\t      }\n\n\t      return false;\n\t    }\n\t  }, {\n\t    key: \"generateChapterComponent\",\n\t    value: function generateChapterComponent(_spineNodeIndex, _pos, id) {\n\t      var pos = parseInt(_pos),\n\t          spineNodeIndex = (_spineNodeIndex + 1) * 2,\n\t          cfi = \"/\" + spineNodeIndex + \"/\";\n\t      cfi += (pos + 1) * 2;\n\n\t      if (id) {\n\t        cfi += \"[\" + id + \"]\";\n\t      }\n\n\t      return cfi;\n\t    }\n\t    /**\n\t     * Collapse a CFI Range to a single CFI Position\n\t     * @param {boolean} [toStart=false]\n\t     */\n\n\t  }, {\n\t    key: \"collapse\",\n\t    value: function collapse(toStart) {\n\t      if (!this.range) {\n\t        return;\n\t      }\n\n\t      this.range = false;\n\n\t      if (toStart) {\n\t        this.path.steps = this.path.steps.concat(this.start.steps);\n\t        this.path.terminal = this.start.terminal;\n\t      } else {\n\t        this.path.steps = this.path.steps.concat(this.end.steps);\n\t        this.path.terminal = this.end.terminal;\n\t      }\n\t    }\n\t  }]);\n\n\t  return EpubCFI;\n\t}();\n\n\t/**\n\t * Hooks allow for injecting functions that must all complete in order before finishing\n\t * They will execute in parallel but all must finish before continuing\n\t * Functions may return a promise if they are asycn.\n\t * @param {any} context scope of this\n\t * @example this.content = new EPUBJS.Hook(this);\n\t */\n\tvar Hook =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function Hook(context) {\n\t    classCallCheck(this, Hook);\n\n\t    this.context = context || this;\n\t    this.hooks = [];\n\t  }\n\t  /**\n\t   * Adds a function to be run before a hook completes\n\t   * @example this.content.register(function(){...});\n\t   */\n\n\n\t  createClass(Hook, [{\n\t    key: \"register\",\n\t    value: function register() {\n\t      for (var i = 0; i < arguments.length; ++i) {\n\t        if (typeof arguments[i] === \"function\") {\n\t          this.hooks.push(arguments[i]);\n\t        } else {\n\t          // unpack array\n\t          for (var j = 0; j < arguments[i].length; ++j) {\n\t            this.hooks.push(arguments[i][j]);\n\t          }\n\t        }\n\t      }\n\t    }\n\t    /**\n\t     * Triggers a hook to run all functions\n\t     * @example this.content.trigger(args).then(function(){...});\n\t     */\n\n\t  }, {\n\t    key: \"trigger\",\n\t    value: function trigger() {\n\t      var args = arguments;\n\t      var context = this.context;\n\t      var promises = [];\n\t      this.hooks.forEach(function (task) {\n\t        var executing = task.apply(context, args);\n\n\t        if (executing && typeof executing[\"then\"] === \"function\") {\n\t          // Task is a function that returns a promise\n\t          promises.push(executing);\n\t        } // Otherwise Task resolves immediately, continue\n\n\t      });\n\t      return Promise.all(promises);\n\t    } // Adds a function to be run before a hook completes\n\n\t  }, {\n\t    key: \"list\",\n\t    value: function list() {\n\t      return this.hooks;\n\t    }\n\t  }, {\n\t    key: \"clear\",\n\t    value: function clear() {\n\t      return this.hooks = [];\n\t    }\n\t  }]);\n\n\t  return Hook;\n\t}();\n\n\tfunction replaceBase(doc, section) {\n\t  var base;\n\t  var head;\n\t  var url = section.href;\n\t  var absolute = url.indexOf(\"://\") > -1;\n\n\t  if (!doc) {\n\t    return;\n\t  }\n\n\t  head = qs(doc, \"head\");\n\t  base = qs(head, \"base\");\n\n\t  if (!base) {\n\t    base = doc.createElement(\"base\");\n\t    head.insertBefore(base, head.firstChild);\n\t  } // Fix for Safari crashing if the url doesn't have an origin\n\n\n\t  if (!absolute && typeof window !== \"undefined\" && window.location) {\n\t    var parts = window.location.href.split(\"/\");\n\t    var directory = \"\";\n\t    parts.pop();\n\t    directory = parts.join(\"/\");\n\t    url = directory + url;\n\t  }\n\n\t  base.setAttribute(\"href\", url);\n\t}\n\tfunction replaceCanonical(doc, section) {\n\t  var head;\n\t  var link;\n\t  var url = section.canonical || section.href;\n\n\t  if (!doc) {\n\t    return;\n\t  }\n\n\t  head = qs(doc, \"head\");\n\t  link = qs(head, \"link[rel='canonical']\");\n\n\t  if (link) {\n\t    link.setAttribute(\"href\", url);\n\t  } else {\n\t    link = doc.createElement(\"link\");\n\t    link.setAttribute(\"rel\", \"canonical\");\n\t    link.setAttribute(\"href\", url);\n\t    head.appendChild(link);\n\t  }\n\t}\n\tfunction replaceMeta(doc, section) {\n\t  var head;\n\t  var meta;\n\t  var id = section.idref || section.href;\n\n\t  if (!doc) {\n\t    return;\n\t  }\n\n\t  head = qs(doc, \"head\");\n\t  meta = qs(head, \"link[property='dc.identifier']\");\n\n\t  if (meta) {\n\t    meta.setAttribute(\"content\", id);\n\t  } else {\n\t    meta = doc.createElement(\"meta\");\n\t    meta.setAttribute(\"name\", \"dc.identifier\");\n\t    meta.setAttribute(\"content\", id);\n\t    head.appendChild(meta);\n\t  }\n\t} // TODO: move me to Contents\n\n\tfunction replaceLinks(contents, fn) {\n\t  var links = contents.querySelectorAll(\"a[href]\");\n\n\t  if (!links.length) {\n\t    return;\n\t  }\n\n\t  var base = qs(contents.ownerDocument, \"base\");\n\t  var location = base ? base.getAttribute(\"href\") : contents.ownerDocument.defaultView.location.href;\n\n\t  var replaceLink = function (link) {\n\t    var href = link.getAttribute(\"href\");\n\n\t    if (href.indexOf(\"mailto:\") === 0) {\n\t      return;\n\t    }\n\n\t    var absolute = href.indexOf(\"://\") > -1;\n\t    var linkUrl = new Url(href, location);\n\n\t    if (absolute) {\n\t      link.setAttribute(\"target\", \"_blank\");\n\t    } else {\n\t      link.onclick = function () {\n\t        if (linkUrl && linkUrl.hash) {\n\t          fn(linkUrl.Path.path + linkUrl.hash);\n\t        } else if (linkUrl) {\n\t          fn(linkUrl.Path.path);\n\t        } else {\n\t          fn(href);\n\t        }\n\n\t        return false;\n\t      };\n\t    }\n\t  }.bind(this);\n\n\t  for (var i = 0; i < links.length; i++) {\n\t    replaceLink(links[i]);\n\t  }\n\t}\n\n\tfunction request(url, type$$1, withCredentials, headers) {\n\t  var supportsURL = typeof window != \"undefined\" ? window.URL : false; // TODO: fallback for url if window isn't defined\n\n\t  var BLOB_RESPONSE = supportsURL ? \"blob\" : \"arraybuffer\";\n\t  var deferred = new defer();\n\t  var xhr = new XMLHttpRequest(); //-- Check from PDF.js:\n\t  //   https://github.com/mozilla/pdf.js/blob/master/web/compatibility.js\n\n\t  var xhrPrototype = XMLHttpRequest.prototype;\n\t  var header;\n\n\t  if (!(\"overrideMimeType\" in xhrPrototype)) {\n\t    // IE10 might have response, but not overrideMimeType\n\t    Object.defineProperty(xhrPrototype, \"overrideMimeType\", {\n\t      value: function xmlHttpRequestOverrideMimeType() {}\n\t    });\n\t  }\n\n\t  if (withCredentials) {\n\t    xhr.withCredentials = true;\n\t  }\n\n\t  xhr.onreadystatechange = handler;\n\t  xhr.onerror = err;\n\t  xhr.open(\"GET\", url, true);\n\n\t  for (header in headers) {\n\t    xhr.setRequestHeader(header, headers[header]);\n\t  }\n\n\t  if (type$$1 == \"json\") {\n\t    xhr.setRequestHeader(\"Accept\", \"application/json\");\n\t  } // If type isn\"t set, determine it from the file extension\n\n\n\t  if (!type$$1) {\n\t    type$$1 = new Path(url).extension;\n\t  }\n\n\t  if (type$$1 == \"blob\") {\n\t    xhr.responseType = BLOB_RESPONSE;\n\t  }\n\n\t  if (isXml(type$$1)) {\n\t    // xhr.responseType = \"document\";\n\t    xhr.overrideMimeType(\"text/xml\"); // for OPF parsing\n\t  }\n\n\t  if (type$$1 == \"binary\") {\n\t    xhr.responseType = \"arraybuffer\";\n\t  }\n\n\t  xhr.send();\n\n\t  function err(e) {\n\t    deferred.reject(e);\n\t  }\n\n\t  function handler() {\n\t    if (this.readyState === XMLHttpRequest.DONE) {\n\t      var responseXML = false;\n\n\t      if (this.responseType === \"\" || this.responseType === \"document\") {\n\t        responseXML = this.responseXML;\n\t      }\n\n\t      if (this.status === 200 || this.status === 0 || responseXML) {\n\t        //-- Firefox is reporting 0 for blob urls\n\t        var r;\n\n\t        if (!this.response && !responseXML) {\n\t          deferred.reject({\n\t            status: this.status,\n\t            message: \"Empty Response\",\n\t            stack: new Error().stack\n\t          });\n\t          return deferred.promise;\n\t        }\n\n\t        if (this.status === 403) {\n\t          deferred.reject({\n\t            status: this.status,\n\t            response: this.response,\n\t            message: \"Forbidden\",\n\t            stack: new Error().stack\n\t          });\n\t          return deferred.promise;\n\t        }\n\n\t        if (type$$1 == \"text\") {\n\t          r = this.responseText;\n\t        } else if (responseXML) {\n\t          r = this.responseXML;\n\t        } else if (isXml(type$$1)) {\n\t          // xhr.overrideMimeType(\"text/xml\"); // for OPF parsing\n\t          // If this.responseXML wasn't set, try to parse using a DOMParser from text\n\t          r = parse(this.response, \"text/xml\");\n\t        } else if (type$$1 == \"xhtml\") {\n\t          r = parse(this.response, \"application/xhtml+xml\");\n\t        } else if (type$$1 == \"html\" || type$$1 == \"htm\") {\n\t          r = parse(this.response, \"text/html\");\n\t        } else if (type$$1 == \"json\") {\n\t          r = JSON.parse(this.response);\n\t        } else if (type$$1 == \"blob\") {\n\t          if (supportsURL) {\n\t            r = this.response;\n\t          } else {\n\t            //-- Safari doesn't support responseType blob, so create a blob from arraybuffer\n\t            r = new Blob([this.response]);\n\t          }\n\t        } else {\n\t          r = this.response;\n\t        }\n\n\t        deferred.resolve(r);\n\t      } else {\n\t        deferred.reject({\n\t          status: this.status,\n\t          message: this.response,\n\t          stack: new Error().stack\n\t        });\n\t      }\n\t    }\n\t  }\n\n\t  return deferred.promise;\n\t}\n\n\t/**\n\t * Represents a Section of the Book\n\t *\n\t * In most books this is equivelent to a Chapter\n\t * @param {object} item  The spine item representing the section\n\t * @param {object} hooks hooks for serialize and content\n\t * @param {object} settings\n\t * @param {object} settings.replacements\n\t */\n\n\tvar Section =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function Section(item, hooks, settings) {\n\t    classCallCheck(this, Section);\n\n\t    this.item = item;\n\t    this.idref = item.idref;\n\t    this.linear = item.linear === \"yes\";\n\t    this.properties = item.properties;\n\t    this.index = item.index;\n\t    this.href = item.href;\n\t    this.source = item.source;\n\t    this.canonical = item.canonical;\n\t    this.type = item.type;\n\t    this.next = item.next;\n\t    this.prev = item.prev;\n\t    this.cfiBase = item.cfiBase;\n\n\t    if (hooks) {\n\t      this.hooks = hooks;\n\t    } else {\n\t      this.hooks = {};\n\t      this.hooks.serialize = new Hook(this);\n\t      this.hooks.content = new Hook(this);\n\t    }\n\n\t    this.document = undefined;\n\t    this.contents = undefined;\n\t    this.output = undefined;\n\t    this.originalHref = undefined;\n\t    this.settings = settings || {};\n\t  }\n\t  /**\n\t   * Load the section from its url\n\t   * @param  {method} [_request] a request method to use for loading\n\t   * @return {document} a promise with the xml document\n\t   */\n\n\n\t  createClass(Section, [{\n\t    key: \"load\",\n\t    value: function load(_request) {\n\t      var request$$1 = _request || this.request || request;\n\t      var loading = new defer();\n\t      var loaded = loading.promise;\n\n\t      if (this.contents) {\n\t        loading.resolve(this.contents);\n\t      } else {\n\t        var type$$1 = this.type === \"application/xhtml+xml\" ? \"xhtml\" : \"html\";\n\t        request$$1(this.href, type$$1).then(function (xml) {\n\t          this.document = xml;\n\t          this.contents = xml.documentElement;\n\t          return this.hooks.content.trigger(this.document, this);\n\t        }.bind(this)).then(function () {\n\t          loading.resolve(this.contents);\n\t        }.bind(this)).catch(function (error) {\n\t          loading.reject(error);\n\t        });\n\t      }\n\n\t      return loaded;\n\t    }\n\t    /**\n\t     * Adds a base tag for resolving urls in the section\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"base\",\n\t    value: function base() {\n\t      return replaceBase(this.document, this);\n\t    }\n\t    /**\n\t     * Render the contents of a section\n\t     * @param  {method} [_request] a request method to use for loading\n\t     * @return {string} output a serialized XML Document\n\t     */\n\n\t  }, {\n\t    key: \"render\",\n\t    value: function render(_request) {\n\t      var rendering = new defer();\n\t      var rendered = rendering.promise;\n\t      this.output; // TODO: better way to return this from hooks?\n\n\t      this.load(_request).then(function (contents) {\n\t        var userAgent = typeof navigator !== \"undefined\" && navigator.userAgent || \"\";\n\t        var isIE = userAgent.indexOf(\"Trident\") >= 0;\n\t        var Serializer;\n\n\t        if (typeof XMLSerializer === \"undefined\" || isIE) {\n\t          Serializer = XMLDom.XMLSerializer;\n\t        } else {\n\t          Serializer = XMLSerializer;\n\t        }\n\n\t        var serializer = new Serializer();\n\t        this.output = serializer.serializeToString(contents);\n\t        return this.output;\n\t      }.bind(this)).then(function () {\n\t        return this.hooks.serialize.trigger(this.output, this);\n\t      }.bind(this)).then(function () {\n\t        rendering.resolve(this.output);\n\t      }.bind(this)).catch(function (error) {\n\t        rendering.reject(error);\n\t      });\n\t      return rendered;\n\t    }\n\t    /**\n\t     * Find a string in a section\n\t     * @param  {string} _query The query string to find\n\t     * @return {object[]} A list of matches, with form {cfi, excerpt}\n\t     */\n\n\t  }, {\n\t    key: \"find\",\n\t    value: function find(_query) {\n\t      var section = this;\n\t      var matches = [];\n\n\t      var query = _query.toLowerCase();\n\n\t      var find = function find(node) {\n\t        var text = node.textContent.toLowerCase();\n\t        var range = section.document.createRange();\n\t        var cfi;\n\t        var pos;\n\t        var last = -1;\n\t        var excerpt;\n\t        var limit = 150;\n\n\t        while (pos != -1) {\n\t          // Search for the query\n\t          pos = text.indexOf(query, last + 1);\n\n\t          if (pos != -1) {\n\t            // We found it! Generate a CFI\n\t            range = section.document.createRange();\n\t            range.setStart(node, pos);\n\t            range.setEnd(node, pos + query.length);\n\t            cfi = section.cfiFromRange(range); // Generate the excerpt\n\n\t            if (node.textContent.length < limit) {\n\t              excerpt = node.textContent;\n\t            } else {\n\t              excerpt = node.textContent.substring(pos - limit / 2, pos + limit / 2);\n\t              excerpt = \"...\" + excerpt + \"...\";\n\t            } // Add the CFI to the matches list\n\n\n\t            matches.push({\n\t              cfi: cfi,\n\t              excerpt: excerpt\n\t            });\n\t          }\n\n\t          last = pos;\n\t        }\n\t      };\n\n\t      sprint(section.document, function (node) {\n\t        find(node);\n\t      });\n\t      return matches;\n\t    }\n\t    /**\n\t    * Reconciles the current chapters layout properies with\n\t    * the global layout properities.\n\t    * @param {object} globalLayout  The global layout settings object, chapter properties string\n\t    * @return {object} layoutProperties Object with layout properties\n\t    */\n\n\t  }, {\n\t    key: \"reconcileLayoutSettings\",\n\t    value: function reconcileLayoutSettings(globalLayout) {\n\t      //-- Get the global defaults\n\t      var settings = {\n\t        layout: globalLayout.layout,\n\t        spread: globalLayout.spread,\n\t        orientation: globalLayout.orientation\n\t      }; //-- Get the chapter's display type\n\n\t      this.properties.forEach(function (prop) {\n\t        var rendition = prop.replace(\"rendition:\", \"\");\n\t        var split = rendition.indexOf(\"-\");\n\t        var property, value;\n\n\t        if (split != -1) {\n\t          property = rendition.slice(0, split);\n\t          value = rendition.slice(split + 1);\n\t          settings[property] = value;\n\t        }\n\t      });\n\t      return settings;\n\t    }\n\t    /**\n\t     * Get a CFI from a Range in the Section\n\t     * @param  {range} _range\n\t     * @return {string} cfi an EpubCFI string\n\t     */\n\n\t  }, {\n\t    key: \"cfiFromRange\",\n\t    value: function cfiFromRange(_range) {\n\t      return new EpubCFI(_range, this.cfiBase).toString();\n\t    }\n\t    /**\n\t     * Get a CFI from an Element in the Section\n\t     * @param  {element} el\n\t     * @return {string} cfi an EpubCFI string\n\t     */\n\n\t  }, {\n\t    key: \"cfiFromElement\",\n\t    value: function cfiFromElement(el) {\n\t      return new EpubCFI(el, this.cfiBase).toString();\n\t    }\n\t    /**\n\t     * Unload the section document\n\t     */\n\n\t  }, {\n\t    key: \"unload\",\n\t    value: function unload() {\n\t      this.document = undefined;\n\t      this.contents = undefined;\n\t      this.output = undefined;\n\t    }\n\t    /**\n\t     * Return an object representation of the item\n\t     * @return {object}\n\t     */\n\n\t  }, {\n\t    key: \"toObject\",\n\t    value: function toObject() {\n\t      return {\n\t        idref: this.idref,\n\t        linear: this.linear ? \"yes\" : \"no\",\n\t        href: this.href,\n\t        source: this.source,\n\t        type: this.type,\n\t        canonical: this.canonical,\n\t        cfiBase: this.cfiBase\n\t      };\n\t    }\n\t    /**\n\t     * Create a url from the content\n\t     */\n\n\t  }, {\n\t    key: \"createUrl\",\n\t    value: function createUrl(request$$1) {\n\t      var _this = this;\n\n\t      //var parsedUrl = new Url(url);\n\t      //var mimeType = mime.lookup(parsedUrl.filename);\n\t      var mimeType = this.type;\n\t      return this.render(request$$1).then(function (text) {\n\t        return new Blob([text], {\n\t          type: mimeType\n\t        });\n\t      }).then(function (blob) {\n\t        if (_this.settings.replacements && _this.settings.replacements === \"base64\") {\n\t          return blob2base64(blob).then(function (blob) {\n\t            return createBase64Url(blob, mimeType);\n\t          });\n\t        } else {\n\t          return createBlobUrl(blob, mimeType);\n\t        }\n\t      }).then(function (url) {\n\t        _this.originalHref = _this.href;\n\t        _this.href = url;\n\n\t        _this.unload();\n\n\t        return url;\n\t      });\n\t    }\n\t  }, {\n\t    key: \"destroy\",\n\t    value: function destroy() {\n\t      this.unload();\n\t      this.hooks.serialize.clear();\n\t      this.hooks.content.clear();\n\n\t      if (this.originalHref) {\n\t        revokeBlobUrl(this.href);\n\t      }\n\n\t      this.hooks = undefined;\n\t      this.idref = undefined;\n\t      this.linear = undefined;\n\t      this.properties = undefined;\n\t      this.index = undefined;\n\t      this.href = undefined;\n\t      this.source = undefined;\n\t      this.next = undefined;\n\t      this.prev = undefined;\n\t      this.cfiBase = undefined;\n\t    }\n\t  }]);\n\n\t  return Section;\n\t}();\n\n\t/**\n\t * A collection of Spine Items\n\t */\n\n\tvar Spine =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function Spine(items) {\n\t    classCallCheck(this, Spine);\n\n\t    this.spineItems = [];\n\t    this.spineByHref = {};\n\t    this.spineById = {};\n\t    this.hooks = {};\n\t    this.hooks.serialize = new Hook();\n\t    this.hooks.content = new Hook(); // Register replacements\n\n\t    this.hooks.content.register(replaceBase);\n\t    this.hooks.content.register(replaceCanonical);\n\t    this.hooks.content.register(replaceMeta);\n\t    this.epubcfi = new EpubCFI();\n\t    this.loaded = false;\n\t    this.items = undefined;\n\t    this.manifest = undefined;\n\t    this.spineNodeIndex = undefined;\n\t    this.baseUrl = undefined;\n\t    this.length = undefined;\n\n\t    if (items) {\n\t      this.unpack(items);\n\t    }\n\t  }\n\t  /**\n\t   * Unpack items from a opf into spine items\n\t   * @param  {items} items\n\t   */\n\n\n\t  createClass(Spine, [{\n\t    key: \"unpack\",\n\t    value: function unpack(items) {\n\t      var _this = this;\n\n\t      this.items = items;\n\t      this.length = this.items.length;\n\t      this.items.forEach(function (item, index) {\n\t        if (item.linear === \"yes\") {\n\t          item.prev = function () {\n\t            var prevIndex = item.index;\n\n\t            while (prevIndex > 0) {\n\t              var prev = this.get(prevIndex - 1);\n\n\t              if (prev && prev.linear) {\n\t                return prev;\n\t              }\n\n\t              prevIndex -= 1;\n\t            }\n\n\t            return;\n\t          }.bind(_this);\n\n\t          item.next = function () {\n\t            var nextIndex = item.index;\n\n\t            while (nextIndex < this.spineItems.length - 1) {\n\t              var next = this.get(nextIndex + 1);\n\n\t              if (next && next.linear) {\n\t                return next;\n\t              }\n\n\t              nextIndex += 1;\n\t            }\n\n\t            return;\n\t          }.bind(_this);\n\t        } else {\n\t          item.prev = function () {\n\t            return;\n\t          };\n\n\t          item.next = function () {\n\t            return;\n\t          };\n\t        }\n\n\t        var spineItem = new Section(item, _this.hooks);\n\n\t        _this.append(spineItem);\n\t      });\n\t      this.loaded = true;\n\t    }\n\t    /**\n\t     * Get an item from the spine\n\t     * @param  {string|number} [target]\n\t     * @return {Section} section\n\t     * @example spine.get();\n\t     * @example spine.get(1);\n\t     * @example spine.get(\"chap1.html\");\n\t     * @example spine.get(\"id1234\");\n\t     */\n\n\t  }, {\n\t    key: \"get\",\n\t    value: function get(target) {\n\t      var index;\n\n\t      if (typeof target === \"undefined\") {\n\t        while (index < this.spineItems.length) {\n\t          var next = this.spineItems[index];\n\n\t          if (next && next.linear) {\n\t            break;\n\t          }\n\n\t          index += 1;\n\t        }\n\t      } else if (this.epubcfi.isCfiString(target)) {\n\t        var cfi = new EpubCFI(target);\n\t        index = cfi.spinePos;\n\t      } else if (typeof target === \"number\" || isNaN(target) === false) {\n\t        index = target;\n\t      } else if (typeof target === \"string\" && target.indexOf(\"#\") === 0) {\n\t        index = this.spineById[target.substring(1)];\n\t      } else if (typeof target === \"string\") {\n\t        // Remove fragments\n\t        target = target.split(\"#\")[0];\n\n\t        if (this.spineById[target] !== undefined) {\n\t          index = this.spineById[target];\n\t        } else if (this.spineById[target] !== undefined) {\n\t          index = this.spineByHref[target];\n\t        } else {\n\t          index = this.spineByHref[encodeURI(target)];\n\t        }\n\t      }\n\n\t      if (index != undefined) {\n\t        return this.spineItems[index];\n\t      }\n\t    }\n\t    /**\n\t     * Append a Section to the Spine\n\t     * @private\n\t     * @param  {Section} section\n\t     */\n\n\t  }, {\n\t    key: \"append\",\n\t    value: function append(section) {\n\t      var index = this.spineItems.length;\n\t      section.index = index;\n\t      this.spineItems.push(section); // Encode and Decode href lookups\n\t      // see pr for details: https://github.com/futurepress/epub.js/pull/358\n\n\t      this.spineByHref[decodeURI(section.href)] = index;\n\t      this.spineByHref[encodeURI(section.href)] = index;\n\t      this.spineByHref[section.href] = index;\n\n\t      if (section.source) {\n\t        this.spineByHref[section.source] = index;\n\t      }\n\n\t      this.spineById[section.idref] = index;\n\t      return index;\n\t    }\n\t    /**\n\t     * Prepend a Section to the Spine\n\t     * @private\n\t     * @param  {Section} section\n\t     */\n\n\t  }, {\n\t    key: \"prepend\",\n\t    value: function prepend(section) {\n\t      // var index = this.spineItems.unshift(section);\n\t      this.spineByHref[section.href] = 0;\n\t      this.spineById[section.idref] = 0; // Re-index\n\n\t      this.spineItems.forEach(function (item, index) {\n\t        item.index = index;\n\t      });\n\t      return 0;\n\t    } // insert(section, index) {\n\t    //\n\t    // };\n\n\t    /**\n\t     * Remove a Section from the Spine\n\t     * @private\n\t     * @param  {Section} section\n\t     */\n\n\t  }, {\n\t    key: \"remove\",\n\t    value: function remove(section) {\n\t      var index = this.spineItems.indexOf(section);\n\n\t      if (index > -1) {\n\t        delete this.spineByHref[section.href];\n\t        delete this.spineById[section.idref];\n\t        return this.spineItems.splice(index, 1);\n\t      }\n\t    }\n\t    /**\n\t     * Loop over the Sections in the Spine\n\t     * @return {method} forEach\n\t     */\n\n\t  }, {\n\t    key: \"each\",\n\t    value: function each() {\n\t      return this.spineItems.forEach.apply(this.spineItems, arguments);\n\t    }\n\t    /**\n\t     * Find the first Section in the Spine\n\t     * @return {Section} first section\n\t     */\n\n\t  }, {\n\t    key: \"first\",\n\t    value: function first() {\n\t      var index = 0;\n\n\t      do {\n\t        var next = this.get(index);\n\n\t        if (next && next.linear) {\n\t          return next;\n\t        }\n\n\t        index += 1;\n\t      } while (index < this.spineItems.length);\n\t    }\n\t    /**\n\t     * Find the last Section in the Spine\n\t     * @return {Section} last section\n\t     */\n\n\t  }, {\n\t    key: \"last\",\n\t    value: function last() {\n\t      var index = this.spineItems.length - 1;\n\n\t      do {\n\t        var prev = this.get(index);\n\n\t        if (prev && prev.linear) {\n\t          return prev;\n\t        }\n\n\t        index -= 1;\n\t      } while (index >= 0);\n\t    }\n\t    /**\n\t     * Export an Array of all Spine Items\n\t     * @return {array}\n\t     */\n\n\t  }, {\n\t    key: \"toArray\",\n\t    value: function toArray() {\n\t      return this.spineItems.map(function (item, index) {\n\t        return item.toObject();\n\t      });\n\t    }\n\t  }, {\n\t    key: \"toJSON\",\n\t    value: function toJSON() {\n\t      return JSON.stringify(this.toArray());\n\t    }\n\t  }, {\n\t    key: \"destroy\",\n\t    value: function destroy() {\n\t      this.each(function (section) {\n\t        return section.destroy();\n\t      });\n\t      this.spineItems = undefined;\n\t      this.spineByHref = undefined;\n\t      this.spineById = undefined;\n\t      this.hooks.serialize.clear();\n\t      this.hooks.content.clear();\n\t      this.hooks = undefined;\n\t      this.epubcfi = undefined;\n\t      this.loaded = false;\n\t      this.items = undefined;\n\t      this.manifest = undefined;\n\t      this.spineNodeIndex = undefined;\n\t      this.baseUrl = undefined;\n\t      this.length = undefined;\n\t    }\n\t  }]);\n\n\t  return Spine;\n\t}();\n\n\t/**\n\t * Queue for handling tasks one at a time\n\t * @class\n\t * @param {scope} context what this will resolve to in the tasks\n\t */\n\n\tvar Queue =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function Queue(context) {\n\t    classCallCheck(this, Queue);\n\n\t    this._q = [];\n\t    this.context = context;\n\t    this.tick = requestAnimationFrame$1;\n\t    this.running = false;\n\t    this.paused = false;\n\t  }\n\t  /**\n\t   * Add an item to the queue\n\t   * @return {Promise}\n\t   */\n\n\n\t  createClass(Queue, [{\n\t    key: \"enqueue\",\n\t    value: function enqueue() {\n\t      var deferred, promise;\n\t      var queued;\n\t      var task = [].shift.call(arguments);\n\t      var args = arguments; // Handle single args without context\n\t      // if(args && !Array.isArray(args)) {\n\t      //   args = [args];\n\t      // }\n\n\t      if (!task) {\n\t        throw new Error(\"No Task Provided\");\n\t      }\n\n\t      if (typeof task === \"function\") {\n\t        deferred = new defer();\n\t        promise = deferred.promise;\n\t        queued = {\n\t          \"task\": task,\n\t          \"args\": args,\n\t          //\"context\"  : context,\n\t          \"deferred\": deferred,\n\t          \"promise\": promise\n\t        };\n\t      } else {\n\t        // Task is a promise\n\t        queued = {\n\t          \"promise\": task\n\t        };\n\t      }\n\n\t      this._q.push(queued); // Wait to start queue flush\n\n\n\t      if (this.paused == false && !this.running) {\n\t        // setTimeout(this.flush.bind(this), 0);\n\t        // this.tick.call(window, this.run.bind(this));\n\t        this.run();\n\t      }\n\n\t      return queued.promise;\n\t    }\n\t    /**\n\t     * Run one item\n\t     * @return {Promise}\n\t     */\n\n\t  }, {\n\t    key: \"dequeue\",\n\t    value: function dequeue() {\n\t      var inwait, task, result;\n\n\t      if (this._q.length && !this.paused) {\n\t        inwait = this._q.shift();\n\t        task = inwait.task;\n\n\t        if (task) {\n\t          // console.log(task)\n\t          result = task.apply(this.context, inwait.args);\n\n\t          if (result && typeof result[\"then\"] === \"function\") {\n\t            // Task is a function that returns a promise\n\t            return result.then(function () {\n\t              inwait.deferred.resolve.apply(this.context, arguments);\n\t            }.bind(this), function () {\n\t              inwait.deferred.reject.apply(this.context, arguments);\n\t            }.bind(this));\n\t          } else {\n\t            // Task resolves immediately\n\t            inwait.deferred.resolve.apply(this.context, result);\n\t            return inwait.promise;\n\t          }\n\t        } else if (inwait.promise) {\n\t          // Task is a promise\n\t          return inwait.promise;\n\t        }\n\t      } else {\n\t        inwait = new defer();\n\t        inwait.deferred.resolve();\n\t        return inwait.promise;\n\t      }\n\t    } // Run All Immediately\n\n\t  }, {\n\t    key: \"dump\",\n\t    value: function dump() {\n\t      while (this._q.length) {\n\t        this.dequeue();\n\t      }\n\t    }\n\t    /**\n\t     * Run all tasks sequentially, at convince\n\t     * @return {Promise}\n\t     */\n\n\t  }, {\n\t    key: \"run\",\n\t    value: function run() {\n\t      var _this = this;\n\n\t      if (!this.running) {\n\t        this.running = true;\n\t        this.defered = new defer();\n\t      }\n\n\t      this.tick.call(window, function () {\n\t        if (_this._q.length) {\n\t          _this.dequeue().then(function () {\n\t            this.run();\n\t          }.bind(_this));\n\t        } else {\n\t          _this.defered.resolve();\n\n\t          _this.running = undefined;\n\t        }\n\t      }); // Unpause\n\n\t      if (this.paused == true) {\n\t        this.paused = false;\n\t      }\n\n\t      return this.defered.promise;\n\t    }\n\t    /**\n\t     * Flush all, as quickly as possible\n\t     * @return {Promise}\n\t     */\n\n\t  }, {\n\t    key: \"flush\",\n\t    value: function flush() {\n\t      if (this.running) {\n\t        return this.running;\n\t      }\n\n\t      if (this._q.length) {\n\t        this.running = this.dequeue().then(function () {\n\t          this.running = undefined;\n\t          return this.flush();\n\t        }.bind(this));\n\t        return this.running;\n\t      }\n\t    }\n\t    /**\n\t     * Clear all items in wait\n\t     */\n\n\t  }, {\n\t    key: \"clear\",\n\t    value: function clear() {\n\t      this._q = [];\n\t    }\n\t    /**\n\t     * Get the number of tasks in the queue\n\t     * @return {number} tasks\n\t     */\n\n\t  }, {\n\t    key: \"length\",\n\t    value: function length() {\n\t      return this._q.length;\n\t    }\n\t    /**\n\t     * Pause a running queue\n\t     */\n\n\t  }, {\n\t    key: \"pause\",\n\t    value: function pause() {\n\t      this.paused = true;\n\t    }\n\t    /**\n\t     * End the queue\n\t     */\n\n\t  }, {\n\t    key: \"stop\",\n\t    value: function stop() {\n\t      this._q = [];\n\t      this.running = false;\n\t      this.paused = true;\n\t    }\n\t  }]);\n\n\t  return Queue;\n\t}();\n\n\tvar EPUBJS_VERSION = \"0.4\"; // Dom events to listen for\n\n\tvar DOM_EVENTS = [\"keydown\", \"keyup\", \"keypressed\", \"mouseup\", \"mousedown\", \"click\", \"touchend\", \"touchstart\"];\n\tvar EVENTS = {\n\t  BOOK: {\n\t    OPEN_FAILED: \"openFailed\",\n\t    READY: \"ready\"\n\t  },\n\t  CONTENTS: {\n\t    EXPAND: \"expand\",\n\t    RESIZE: \"resize\",\n\t    SELECTED: \"selected\",\n\t    SELECTED_RANGE: \"selectedRange\",\n\t    LINK_CLICKED: \"linkClicked\"\n\t  },\n\t  LOCATIONS: {\n\t    CHANGED: \"changed\"\n\t  },\n\t  MANAGERS: {\n\t    RESIZE: \"resize\",\n\t    RESIZED: \"resized\",\n\t    ORIENTATION_CHANGE: \"orientationchange\",\n\t    ADDED: \"added\",\n\t    SCROLL: \"scroll\",\n\t    SCROLLED: \"scrolled\"\n\t  },\n\t  VIEWS: {\n\t    AXIS: \"axis\",\n\t    LOAD_ERROR: \"loaderror\",\n\t    RENDERED: \"rendered\",\n\t    RESIZED: \"resized\",\n\t    DISPLAYED: \"displayed\",\n\t    SHOWN: \"shown\",\n\t    HIDDEN: \"hidden\",\n\t    MARK_CLICKED: \"markClicked\"\n\t  },\n\t  RENDITION: {\n\t    STARTED: \"started\",\n\t    ATTACHED: \"attached\",\n\t    DISPLAYED: \"displayed\",\n\t    DISPLAY_ERROR: \"displayerror\",\n\t    RENDERED: \"rendered\",\n\t    REMOVED: \"removed\",\n\t    RESIZED: \"resized\",\n\t    ORIENTATION_CHANGE: \"orientationchange\",\n\t    LOCATION_CHANGED: \"locationChanged\",\n\t    RELOCATED: \"relocated\",\n\t    MARK_CLICKED: \"markClicked\",\n\t    SELECTED: \"selected\",\n\t    LAYOUT: \"layout\",\n\t    WORKER_FAILED: \"workerFailed\",\n\t    WORKER_INACTIVE: \"workerInactive\"\n\t  },\n\t  LAYOUT: {\n\t    UPDATED: \"updated\"\n\t  }\n\t};\n\n\t/**\n\t * Locators\n\t * @param {object} [manifest]\n\t */\n\n\tvar Locators =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function Locators(manifest) {\n\t    classCallCheck(this, Locators);\n\n\t    if (manifest) {\n\t      this.unpack(manifest);\n\t    }\n\t  }\n\n\t  createClass(Locators, [{\n\t    key: \"unpack\",\n\t    value: function unpack(manifest) {\n\t      if (manifest.locations) {\n\t        this.unpackLocations(manifest.locations);\n\t      }\n\n\t      if (manifest.pages) {\n\t        this.unpackPages(manifest.page);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"unpackLocations\",\n\t    value: function unpackLocations(locations) {\n\t      this.locations = locations;\n\t      this.totalLocations = this.locations.length - 1;\n\t    }\n\t  }, {\n\t    key: \"unpackPages\",\n\t    value: function unpackPages(pages) {\n\t      var _this = this;\n\n\t      this.pages = pages;\n\t      this.firstPage = parseInt(this.pages[0]);\n\t      this.lastPage = parseInt(this.pages[this.pages.length - 1]);\n\t      this.totalPages = this.lastPage - this.firstPage;\n\t      pages.forEach(function (item) {\n\t        if (item.cfi) {\n\t          _this.pageLocations.push(item.cfi);\n\t        }\n\t      });\n\t    }\n\t    /**\n\t     * Get a location from an EpubCFI\n\t     * @param {EpubCFI} cfi\n\t     * @return {number}\n\t     */\n\n\t  }, {\n\t    key: \"locationFromCfi\",\n\t    value: function locationFromCfi(cfi) {\n\t      var loc;\n\n\t      if (EpubCFI.prototype.isCfiString(cfi)) {\n\t        cfi = new EpubCFI(cfi);\n\t      } // Check if the location has not been set yet\n\n\n\t      if (this.locations.length === 0) {\n\t        return -1;\n\t      }\n\n\t      loc = locationOf(cfi, this.locations, EpubCFI.prototype.compare);\n\n\t      if (loc > this.totalLocations) {\n\t        return this.totalLocations;\n\t      }\n\n\t      return loc;\n\t    }\n\t    /**\n\t     * Get a percentage position in locations from an EpubCFI\n\t     * @param {EpubCFI} cfi\n\t     * @return {number}\n\t     */\n\n\t  }, {\n\t    key: \"percentageFromCfi\",\n\t    value: function percentageFromCfi(cfi) {\n\t      if (this.locations.length === 0) {\n\t        return null;\n\t      } // Find closest cfi\n\n\n\t      var loc = this.locationFromCfi(cfi); // Get percentage in total\n\n\t      return this.percentageFromLocation(loc);\n\t    }\n\t    /**\n\t     * Get a percentage position from a location index\n\t     * @param {number} location\n\t     * @return {number}\n\t     */\n\n\t  }, {\n\t    key: \"percentageFromLocation\",\n\t    value: function percentageFromLocation(loc) {\n\t      if (!loc || !this.totalLocations) {\n\t        return 0;\n\t      }\n\n\t      return loc / this.totalLocations;\n\t    }\n\t    /**\n\t     * Get an EpubCFI from location index\n\t     * @param {number} loc\n\t     * @return {EpubCFI} cfi\n\t     */\n\n\t  }, {\n\t    key: \"cfiFromLocation\",\n\t    value: function cfiFromLocation(loc) {\n\t      var cfi = -1; // check that pg is an int\n\n\t      if (typeof loc != \"number\") {\n\t        loc = parseInt(loc);\n\t      }\n\n\t      if (loc >= 0 && loc < this.locations.length) {\n\t        cfi = this.locations[loc];\n\t      }\n\n\t      return cfi;\n\t    }\n\t    /**\n\t     * Get an EpubCFI from location percentage\n\t     * @param {number} percentage\n\t     * @return {EpubCFI} cfi\n\t     */\n\n\t  }, {\n\t    key: \"cfiFromPercentage\",\n\t    value: function cfiFromPercentage(percentage) {\n\t      var loc;\n\n\t      if (percentage > 1) {\n\t        console.warn(\"Normalize cfiFromPercentage value to between 0 - 1\");\n\t      } // Make sure 1 goes to very end\n\n\n\t      if (percentage >= 1) {\n\t        var cfi = new EpubCFI(this.locations[this.totalLocations]);\n\t        cfi.collapse();\n\t        return cfi.toString();\n\t      }\n\n\t      loc = Math.ceil(this.totalLocations * percentage);\n\t      return this.cfiFromLocation(loc);\n\t    }\n\t    /**\n\t     * Get a PageList result from a EpubCFI\n\t     * @param  {string} cfi EpubCFI String\n\t     * @return {string} page\n\t     */\n\n\t  }, {\n\t    key: \"pageFromCfi\",\n\t    value: function pageFromCfi(cfi) {\n\t      var pg = -1; // Check if the pageList has not been set yet\n\n\t      if (!this.pageLocations || this.pageLocations.length === 0) {\n\t        return -1;\n\t      } // check if the cfi is in the location list\n\n\n\t      var index = indexOfSorted(cfi, this.pageLocations, EpubCFI.prototype.compare);\n\n\t      if (index != -1) {\n\t        pg = this.pages[index];\n\t      } else {\n\t        // Otherwise add it to the list of locations\n\t        // Insert it in the correct position in the locations page\n\t        index = locationOf(cfi, this.pageLocations, EpubCFI.prototype.compare); // Get the page at the location just before the new one, or return the first\n\n\t        pg = index - 1 >= 0 ? this.pages[index - 1] : this.pages[0];\n\n\t        if (pg !== undefined) ; else {\n\t          pg = -1;\n\t        }\n\t      }\n\n\t      return pg;\n\t    }\n\t    /**\n\t     * Get an EpubCFI from a Page List Item\n\t     * @param  {string} pg\n\t     * @return {string} cfi\n\t     */\n\n\t  }, {\n\t    key: \"cfiFromPage\",\n\t    value: function cfiFromPage(pg) {\n\t      var cfi = -1; // check that pg is an int\n\n\t      if (typeof pg != \"number\") {\n\t        pg = parseInt(pg);\n\t      } // check if the cfi is in the page list\n\t      // Pages could be unsorted.\n\n\n\t      var index = this.pages.indexOf(pg);\n\n\t      if (index != -1) {\n\t        cfi = this.pageLocations[index];\n\t      } // TODO: handle pages not in the list\n\n\n\t      return cfi;\n\t    }\n\t    /**\n\t     * Get a Page from Book percentage\n\t     * @param  {number} percent\n\t     * @return {string} page\n\t     */\n\n\t  }, {\n\t    key: \"pageFromPercentage\",\n\t    value: function pageFromPercentage(percent) {\n\t      var pg = Math.round(this.totalPages * percent);\n\t      return pg;\n\t    }\n\t    /**\n\t     * Returns a value between 0 - 1 corresponding to the location of a page\n\t     * @param  {int} pg the page\n\t     * @return {number} percentage\n\t     */\n\n\t  }, {\n\t    key: \"percentageFromPage\",\n\t    value: function percentageFromPage(pg) {\n\t      var percentage = (pg - this.firstPage) / this.totalPages;\n\t      return Math.round(percentage * 1000) / 1000;\n\t    }\n\t    /**\n\t     * Returns a value between 0 - 1 corresponding to the location of a cfi\n\t     * @param  {string} cfi EpubCFI String\n\t     * @return {number} percentage\n\t     */\n\n\t  }, {\n\t    key: \"percentagePageFromCfi\",\n\t    value: function percentagePageFromCfi(cfi) {\n\t      var pg = this.pageFromCfi(cfi);\n\t      var percentage = this.percentageFromPage(pg);\n\t      return percentage;\n\t    }\n\t  }, {\n\t    key: \"destroy\",\n\t    value: function destroy() {}\n\t  }]);\n\n\t  return Locators;\n\t}();\n\n\teventEmitter(Locators.prototype);\n\n\t/**\n\t * Navigation wrapper\n\t * @param {[object]} manifest\n\t */\n\n\tvar Navigation =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function Navigation(manifest) {\n\t    classCallCheck(this, Navigation);\n\n\t    this.toc = [];\n\t    this.tocByHref = {};\n\t    this.tocById = {};\n\t    this.landmarks = [];\n\t    this.landmarksByType = {};\n\n\t    if (manifest) {\n\t      this.unpack(manifest);\n\t    }\n\t  }\n\t  /**\n\t   * Get an item from the navigation\n\t   * @param  {string} target\n\t   * @return {object} navItems\n\t   */\n\n\n\t  createClass(Navigation, [{\n\t    key: \"get\",\n\t    value: function get(target) {\n\t      var index;\n\n\t      if (!target) {\n\t        return this.toc;\n\t      }\n\n\t      if (target.indexOf(\"#\") === 0) {\n\t        index = this.tocById[target.substring(1)];\n\t      } else if (target in this.tocByHref) {\n\t        index = this.tocByHref[target];\n\t      }\n\n\t      return this.toc[index];\n\t    }\n\t    /**\n\t     * Get a landmark by type\n\t     * List of types: https://idpf.github.io/epub-vocabs/structure/\n\t     * @param  {string} type\n\t     * @return {object} landmarkItems\n\t     */\n\n\t  }, {\n\t    key: \"landmark\",\n\t    value: function landmark(type$$1) {\n\t      var index;\n\t      index = this.landmarksByType[type$$1];\n\t      return this.landmarks[index];\n\t    }\n\t    /**\n\t     * Unpack manifest object\n\t     */\n\n\t  }, {\n\t    key: \"unpack\",\n\t    value: function unpack(manifest) {\n\t      if (manifest.toc) {\n\t        this.unpackToc(manifest.toc);\n\t      }\n\n\t      if (manifest.landmarks) {\n\t        this.unpackLandmarks(manifest.landmarks);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"unpackToc\",\n\t    value: function unpackToc(toc) {\n\t      var _this = this;\n\n\t      this.toc = toc;\n\t      toc.forEach(function (item, index) {\n\t        _this.tocByHref[item.href] = index;\n\n\t        if (item.source) {\n\t          _this.tocByHref[item.href] = index;\n\t        }\n\n\t        if (item.id) {\n\t          _this.tocId[item.id] = index;\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: \"unpackLandmarks\",\n\t    value: function unpackLandmarks(landmarks) {\n\t      var _this2 = this;\n\n\t      this.landmarks = landmarks;\n\t      landmarks.forEach(function (item, index) {\n\t        _this2.landmarksByType[item.type] = index;\n\t      });\n\t    }\n\t  }, {\n\t    key: \"destroy\",\n\t    value: function destroy() {\n\t      this.toc = undefined;\n\t      this.tocByHref = undefined;\n\t      this.tocById = undefined;\n\t      this.landmarks = undefined;\n\t      this.landmarksByType = undefined;\n\t    }\n\t  }]);\n\n\t  return Navigation;\n\t}();\n\n\t/**\n\t * An Epub Book representation with methods for the loading and manipulation\n\t * of its contents.\n\t * @class\n\t * @param {json | object} [manifest]\n\t * @returns {Book}\n\t * @example new Book(manifest)\n\t */\n\n\tvar Book =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function Book(manifest) {\n\t    classCallCheck(this, Book);\n\n\t    /**\n\t     * @member {Spine} sections\n\t     * @memberof Book\n\t     */\n\t    this.sections = new Spine();\n\t    /**\n\t     * @member {Navigation} navigation\n\t     * @memberof Book\n\t     */\n\n\t    this.navigation = new Navigation();\n\t    /**\n\t     * @member {Locators} locators\n\t     * @memberof Book\n\t     */\n\n\t    this.locators = new Locators();\n\t    /**\n\t     * @member {object} manifest\n\t     * @memberof Book\n\t     */\n\n\t    this.manifest = {\n\t      \"@context\": \"http://readium.org/webpub/default.jsonld\",\n\t      metadata: {\n\t        \"@type\": \"http://schema.org/Book\"\n\t      },\n\t      resources: [],\n\t      toc: [],\n\t      landmarks: [],\n\t      locations: [],\n\t      pages: [],\n\t      spine: [],\n\t      links: []\n\t    };\n\n\t    if (manifest) {\n\t      this.parse(manifest);\n\t    }\n\t  }\n\n\t  createClass(Book, [{\n\t    key: \"parse\",\n\t    value: function parse$$1(manifest) {\n\t      if (!manifest) {\n\t        return;\n\t      }\n\n\t      if (typeof manifest === \"string\") {\n\t        manifest = JSON.parse(manifest);\n\t      }\n\n\t      var _manifest = manifest,\n\t          metadata = _manifest.metadata,\n\t          resources = _manifest.resources,\n\t          toc = _manifest.toc,\n\t          landmarks = _manifest.landmarks,\n\t          locations = _manifest.locations,\n\t          pages = _manifest.pages,\n\t          spine = _manifest.spine,\n\t          links = _manifest.links;\n\t      this.metadata = metadata;\n\t      this.resources = resources;\n\t      this.spine = spine;\n\t      this.toc = toc;\n\t      this.landmarks = landmarks;\n\t      this.locations = locations;\n\t      this.pages = pages;\n\t      this.links = links;\n\t    }\n\t    /**\n\t     * Get or set the Url\n\t     * @param {string} [url]\n\t     * @return {string} href\n\t     */\n\n\t  }, {\n\t    key: \"section\",\n\n\t    /**\n\t     * Gets a Section of the Book from the Spine\n\t     * Alias for `book.spine.get`\n\t     * @param {string} target\n\t     * @return {Section}\n\t     */\n\t    value: function section(target) {\n\t      return this.sections.get(target);\n\t    }\n\t    /**\n\t     * Get or set the cover url\n\t     * @param {string} [coverUrl]\n\t     * @return {string} coverUrl\n\t     */\n\n\t  }, {\n\t    key: \"getRange\",\n\n\t    /**\n\t     * Find a DOM Range for a given CFI Range\n\t     * @param  {EpubCFI} cfiRange a epub cfi range\n\t     * @return {Range}\n\t     */\n\t    value: function getRange(cfiRange) {\n\t      var cfi = new EpubCFI(cfiRange);\n\t      var item = this.sections.get(cfi.spinePos);\n\n\t      if (!item) {\n\t        return new Promise(function (resolve, reject) {\n\t          reject(\"CFI could not be found\");\n\t        });\n\t      }\n\n\t      return item.load().then(function (contents) {\n\t        var range = cfi.toRange(item.document);\n\t        return range;\n\t      });\n\t    }\n\t    /**\n\t     * Generates the Book Key using the identifer in the manifest or other string provided\n\t     * @param  {string} [identifier] to use instead of metadata identifier\n\t     * @return {string} key\n\t     */\n\n\t  }, {\n\t    key: \"key\",\n\t    value: function key(identifier) {\n\t      var ident = identifier || this.metadata.identifier;\n\t      return \"epubjs-\".concat(EPUBJS_VERSION, \"-\").concat(ident);\n\t    }\n\t    /**\n\t     * Generates a object representation of the book structure\n\t     * @return {object}\n\t     */\n\n\t  }, {\n\t    key: \"toObject\",\n\t    value: function toObject() {\n\t      return this.manifest;\n\t    }\n\t    /**\n\t     * Generates a JSON output of the book structure\n\t     */\n\n\t  }, {\n\t    key: \"toJSON\",\n\t    value: function toJSON(key) {\n\t      return JSON.stringify(this.manifest);\n\t    }\n\t    /**\n\t     * Destroy the Book and all associated objects\n\t     */\n\n\t  }, {\n\t    key: \"destroy\",\n\t    value: function destroy() {\n\t      this.sections && this.sections.destroy();\n\t      this.locators && this.locators.destroy();\n\t      this.navigation && this.navigation.destroy();\n\t      this.sections = undefined;\n\t      this.locators = undefined;\n\t      this.navigation = undefined;\n\t      this.manifest = undefined;\n\t    }\n\t  }, {\n\t    key: \"url\",\n\t    get: function get() {\n\t      var selfLink = this.manifest.links.find(function (link) {\n\t        return link.rel === \"self\";\n\t      });\n\t      return selfLink && selfLink.href;\n\t    },\n\t    set: function set(url) {\n\t      var selfLink = this.manifest.links.find(function (link) {\n\t        return link.rel === \"self\";\n\t      });\n\n\t      if (selfLink) {\n\t        selfLink.href = url;\n\t      } else {\n\t        selfLink = {\n\t          rel: \"self\",\n\t          href: url,\n\t          type: \"application/webpub+json\"\n\t        };\n\t        this.manifest.links.push(selfLink);\n\t      } // Set the Path object for resolving links\n\n\n\t      this.path = selfLink.href;\n\t      return selfLink && selfLink.href;\n\t    }\n\t    /**\n\t     * Get or set the Path to resolve content\n\t     * @param {string} [url]\n\t     * @return {string} Path\n\t     */\n\n\t  }, {\n\t    key: \"path\",\n\t    get: function get() {\n\t      return this._path;\n\t    },\n\t    set: function set(url) {\n\t      var uri = new Url(url);\n\t      this._path = uri.Path;\n\t      return this._path;\n\t    }\n\t    /**\n\t     * Get or set the Spine\n\t     * @param {array} [spineItems]\n\t     * @return {array} spineItems\n\t     */\n\n\t  }, {\n\t    key: \"spine\",\n\t    get: function get() {\n\t      return this.manifest.spine;\n\t    },\n\t    set: function set(items) {\n\t      if (!items) {\n\t        return;\n\t      }\n\n\t      this.sections.unpack(items);\n\t      this.manifest.spine = items;\n\t      return this.manifest.spine;\n\t    }\n\t  }, {\n\t    key: \"cover\",\n\t    get: function get() {\n\t      var coverLink = this.manifest.links.find(function (link) {\n\t        return link.rel === \"cover\";\n\t      });\n\t      return coverLink && coverLink.href;\n\t    },\n\t    set: function set(url) {\n\t      var coverLink = this.manifest.links.find(function (link) {\n\t        return link.rel === \"cover\";\n\t      });\n\n\t      if (coverLink) {\n\t        coverLink.href = url;\n\t      } else {\n\t        coverLink = {\n\t          rel: \"cover\",\n\t          href: url\n\t        };\n\t        this.manifest.links.push(coverLink);\n\t      }\n\n\t      return coverLink && coverLink.href;\n\t    }\n\t    /**\n\t     * Get or set the metadata\n\t     * @param {object} [metadata]\n\t     * @return {object} metadata\n\t     */\n\n\t  }, {\n\t    key: \"metadata\",\n\t    get: function get() {\n\t      return this.manifest.metadata;\n\t    },\n\t    set: function set(metadata) {\n\t      if (!metadata) {\n\t        return;\n\t      }\n\n\t      this.manifest.metadata = metadata; // Set metadata type\n\n\t      if (!metadata[\"@type\"]) {\n\t        this.manifest.metadata[\"@type\"] = \"http://schema.org/Book\";\n\t      }\n\n\t      return this.manifest.metadata;\n\t    }\n\t    /**\n\t     * Get or set the resources\n\t     * @param {object} [resources]\n\t     * @return {object} resources\n\t     */\n\n\t  }, {\n\t    key: \"resources\",\n\t    get: function get() {\n\t      return this.manifest.resources;\n\t    },\n\t    set: function set(resources) {\n\t      var _this = this;\n\n\t      if (!resources) {\n\t        return;\n\t      }\n\n\t      this.manifest.resources = resources.map(function (item) {\n\t        // Add Cover Rel\n\t        if (item.properties && item.properties.length) {\n\t          if (item.properties.indexOf(\"cover-image\") > -1) {\n\t            item.rel = \"cover\";\n\t          } // Add Contents Rel\n\n\n\t          if (item.properties.indexOf(\"nav\") > -1) {\n\t            item.rel = \"contents\";\n\t          }\n\n\t          if (item.rel && item.rel === \"cover\") {\n\t            _this.cover = item.href;\n\t          }\n\t        }\n\n\t        return item;\n\t      });\n\t      return this.manifest.resources;\n\t    }\n\t    /**\n\t     * Get or set the toc\n\t     * @param {array} [toc]\n\t     * @return {array} toc\n\t     */\n\n\t  }, {\n\t    key: \"toc\",\n\t    get: function get() {\n\t      return this.manifest.toc;\n\t    },\n\t    set: function set(toc) {\n\t      if (!toc) {\n\t        return;\n\t      }\n\n\t      this.navigation.unpackToc(toc);\n\t      return this.manifest.toc = toc;\n\t    }\n\t    /**\n\t     * Get or set the landmarks\n\t     * @param {array} [landmarks]\n\t     * @return {array} landmarks\n\t     */\n\n\t  }, {\n\t    key: \"landmarks\",\n\t    get: function get() {\n\t      return this.manifest.landmarks;\n\t    },\n\t    set: function set(landmarks) {\n\t      if (!landmarks) {\n\t        return;\n\t      }\n\n\t      this.navigation.unpackLandmarks(landmarks);\n\t      return this.manifest.landmarks = landmarks;\n\t    }\n\t    /**\n\t     * Get or set the locations\n\t     * @param {array} [locations]\n\t     * @return {array} locations\n\t     */\n\n\t  }, {\n\t    key: \"locations\",\n\t    get: function get() {\n\t      return this.manifest.locations;\n\t    },\n\t    set: function set(locations) {\n\t      if (!locations) {\n\t        return;\n\t      }\n\n\t      this.locators.unpackLocations(locations);\n\t      return this.manifest.locations = locations;\n\t    }\n\t    /**\n\t     * Get or set the pages\n\t     * @param {array} [pageList]\n\t     * @return {array} pageList\n\t     */\n\n\t  }, {\n\t    key: \"pages\",\n\t    get: function get() {\n\t      return this.manifest.pages;\n\t    },\n\t    set: function set(pageList) {\n\t      if (!pageList) {\n\t        return;\n\t      }\n\n\t      this.locators.unpackPages(pageList);\n\t      return this.manifest.pages = pageList;\n\t    }\n\t    /**\n\t     * Get or set links\n\t     * @param {array} [links]\n\t     * @return {array} links\n\t     */\n\n\t  }, {\n\t    key: \"links\",\n\t    get: function get() {\n\t      return this.manifest.links;\n\t    },\n\t    set: function set(links) {\n\t      var _this2 = this;\n\n\t      if (!links) {\n\t        return;\n\t      }\n\n\t      links.forEach(function (link) {\n\t        if (link.rel === \"cover\") {\n\t          _this2.cover = link.href;\n\t        }\n\n\t        if (link.rel === \"self\") {\n\t          _this2.path = link.href;\n\t        }\n\t      });\n\t      return this.manifest.links = links;\n\t    }\n\t    /**\n\t     * Get or set the source of the book.\n\t     * If returns with an object, the links in the books have been replaced\n\t     * with service workers urls, or blob urls\n\t     * @param {array} [links]\n\t     * @return {array} links\n\t     */\n\n\t  }, {\n\t    key: \"source\",\n\t    get: function get() {\n\t      var sourceLink = this.manifest.links.find(function (link) {\n\t        return link.rel === \"source\";\n\t      });\n\t      return sourceLink;\n\t    },\n\t    set: function set(url) {\n\t      var sourceLink = this.manifest.links.find(function (link) {\n\t        return link.rel === \"source\";\n\t      });\n\n\t      if (sourceLink) {\n\t        sourceLink.href = url;\n\t      } else {\n\t        sourceLink = {\n\t          rel: \"source\",\n\t          href: url,\n\t          type: \"application/epub+zip\"\n\t        };\n\t        this.manifest.links.push(sourceLink);\n\t      }\n\n\t      return sourceLink;\n\t    }\n\t  }]);\n\n\t  return Book;\n\t}(); //-- Enable binding events to book\n\n\n\teventEmitter(Book.prototype);\n\n\t/**\n\t * Figures out the CSS values to apply for a layout\n\t * @class\n\t * @param {object} settings\n\t * @param {string} [settings.layout='reflowable']\n\t * @param {string} [settings.spread]\n\t * @param {number} [settings.minSpreadWidth=800]\n\t * @param {boolean} [settings.evenSpreads=false]\n\t */\n\n\tvar Layout =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function Layout(settings) {\n\t    classCallCheck(this, Layout);\n\n\t    this.settings = settings;\n\t    this.name = settings.layout || \"reflowable\";\n\t    this._spread = settings.spread === \"none\" ? false : true;\n\t    this._minSpreadWidth = settings.minSpreadWidth || 800;\n\t    this._evenSpreads = settings.evenSpreads || false;\n\n\t    if (settings.flow === \"scrolled\" || settings.flow === \"scrolled-continuous\" || settings.flow === \"scrolled-doc\") {\n\t      this._flow = \"scrolled\";\n\t    } else {\n\t      this._flow = \"paginated\";\n\t    }\n\n\t    this.width = 0;\n\t    this.height = 0;\n\t    this.spreadWidth = 0;\n\t    this.delta = 0;\n\t    this.columnWidth = 0;\n\t    this.gap = 0;\n\t    this.divisor = 1;\n\t    this.props = {\n\t      name: this.name,\n\t      spread: this._spread,\n\t      flow: this._flow,\n\t      width: 0,\n\t      height: 0,\n\t      spreadWidth: 0,\n\t      delta: 0,\n\t      columnWidth: 0,\n\t      gap: 0,\n\t      divisor: 1\n\t    };\n\t  }\n\t  /**\n\t   * Switch the flow between paginated and scrolled\n\t   * @param  {string} flow paginated | scrolled\n\t   * @return {string} simplified flow\n\t   */\n\n\n\t  createClass(Layout, [{\n\t    key: \"flow\",\n\t    value: function flow(_flow) {\n\t      if (typeof _flow != \"undefined\") {\n\t        if (_flow === \"scrolled\" || _flow === \"scrolled-continuous\" || _flow === \"scrolled-doc\") {\n\t          this._flow = \"scrolled\";\n\t        } else {\n\t          this._flow = \"paginated\";\n\t        } // this.props.flow = this._flow;\n\n\n\t        this.update({\n\t          flow: this._flow\n\t        });\n\t      }\n\n\t      return this._flow;\n\t    }\n\t    /**\n\t     * Switch between using spreads or not, and set the\n\t     * width at which they switch to single.\n\t     * @param  {string} spread \"none\" | \"always\" | \"auto\"\n\t     * @param  {number} min integer in pixels\n\t     * @return {boolean} spread true | false\n\t     */\n\n\t  }, {\n\t    key: \"spread\",\n\t    value: function spread(_spread, min) {\n\t      if (_spread) {\n\t        this._spread = _spread === \"none\" ? false : true; // this.props.spread = this._spread;\n\n\t        this.update({\n\t          spread: this._spread\n\t        });\n\t      }\n\n\t      if (min >= 0) {\n\t        this._minSpreadWidth = min;\n\t      }\n\n\t      return this._spread;\n\t    }\n\t    /**\n\t     * Calculate the dimensions of the pagination\n\t     * @param  {number} _width  width of the rendering\n\t     * @param  {number} _height height of the rendering\n\t     * @param  {number} _gap    width of the gap between columns\n\t     */\n\n\t  }, {\n\t    key: \"calculate\",\n\t    value: function calculate(_width, _height, _gap) {\n\t      var divisor = 1;\n\t      var gap = _gap || 0; //-- Check the width and create even width columns\n\t      // var fullWidth = Math.floor(_width);\n\n\t      var width = _width;\n\t      var height = _height;\n\t      var section = Math.floor(width / 12);\n\t      var columnWidth;\n\t      var spreadWidth;\n\t      var pageWidth;\n\t      var delta;\n\n\t      if (this._spread && width >= this._minSpreadWidth) {\n\t        divisor = 2;\n\t      } else {\n\t        divisor = 1;\n\t      }\n\n\t      if (this.name === \"reflowable\" && this._flow === \"paginated\" && !(_gap >= 0)) {\n\t        gap = section % 2 === 0 ? section : section - 1;\n\t      }\n\n\t      if (this.name === \"pre-paginated\") {\n\t        gap = 0;\n\t      } //-- Double Page\n\n\n\t      if (divisor > 1) {\n\t        // width = width - gap;\n\t        // columnWidth = (width - gap) / divisor;\n\t        // gap = gap / divisor;\n\t        columnWidth = width / divisor - gap;\n\t        pageWidth = columnWidth + gap;\n\t      } else {\n\t        columnWidth = width;\n\t        pageWidth = width;\n\t      }\n\n\t      if (this.name === \"pre-paginated\" && divisor > 1) {\n\t        width = columnWidth;\n\t      }\n\n\t      spreadWidth = columnWidth * divisor + gap;\n\t      delta = width;\n\t      this.width = width;\n\t      this.height = height;\n\t      this.spreadWidth = spreadWidth;\n\t      this.pageWidth = pageWidth;\n\t      this.delta = delta;\n\t      this.columnWidth = columnWidth;\n\t      this.gap = gap;\n\t      this.divisor = divisor; // this.props.width = width;\n\t      // this.props.height = _height;\n\t      // this.props.spreadWidth = spreadWidth;\n\t      // this.props.pageWidth = pageWidth;\n\t      // this.props.delta = delta;\n\t      //\n\t      // this.props.columnWidth = colWidth;\n\t      // this.props.gap = gap;\n\t      // this.props.divisor = divisor;\n\n\t      this.update({\n\t        width: width,\n\t        height: height,\n\t        spreadWidth: spreadWidth,\n\t        pageWidth: pageWidth,\n\t        delta: delta,\n\t        columnWidth: columnWidth,\n\t        gap: gap,\n\t        divisor: divisor\n\t      });\n\t    }\n\t    /**\n\t     * Apply Css to a Document\n\t     * @param  {Contents} contents\n\t     * @return {Promise}\n\t     */\n\n\t  }, {\n\t    key: \"format\",\n\t    value: function format(contents) {\n\t      var formating;\n\n\t      if (this.name === \"pre-paginated\") {\n\t        formating = contents.fit(this.columnWidth, this.height);\n\t      } else if (this._flow === \"paginated\") {\n\t        formating = contents.columns(this.width, this.height, this.columnWidth, this.gap);\n\t      } else {\n\t        // scrolled\n\t        formating = contents.size(this.width, null);\n\t      }\n\n\t      return formating; // might be a promise in some View Managers\n\t    }\n\t    /**\n\t     * Count number of pages\n\t     * @param  {number} totalLength\n\t     * @param  {number} pageLength\n\t     * @return {{spreads: Number, pages: Number}}\n\t     */\n\n\t  }, {\n\t    key: \"count\",\n\t    value: function count(totalLength, pageLength) {\n\t      var spreads, pages;\n\n\t      if (this.name === \"pre-paginated\") {\n\t        spreads = 1;\n\t        pages = 1;\n\t      } else if (this._flow === \"paginated\") {\n\t        pageLength = pageLength || this.delta;\n\t        spreads = Math.ceil(totalLength / pageLength);\n\t        pages = spreads * this.divisor;\n\t      } else {\n\t        // scrolled\n\t        pageLength = pageLength || this.height;\n\t        spreads = Math.ceil(totalLength / pageLength);\n\t        pages = spreads;\n\t      }\n\n\t      return {\n\t        spreads: spreads,\n\t        pages: pages\n\t      };\n\t    }\n\t    /**\n\t     * Update props that have changed\n\t     * @private\n\t     * @param  {object} props\n\t     */\n\n\t  }, {\n\t    key: \"update\",\n\t    value: function update(props) {\n\t      var _this = this;\n\n\t      // Remove props that haven't changed\n\t      Object.keys(props).forEach(function (propName) {\n\t        if (_this.props[propName] === props[propName]) {\n\t          delete props[propName];\n\t        }\n\t      });\n\n\t      if (Object.keys(props).length > 0) {\n\t        var newProps = extend(this.props, props);\n\t        this.emit(EVENTS.LAYOUT.UPDATED, newProps, props);\n\t      }\n\t    }\n\t  }]);\n\n\t  return Layout;\n\t}();\n\n\teventEmitter(Layout.prototype);\n\n\t/**\n\t * Themes to apply to displayed content\n\t * @class\n\t * @param {Rendition} rendition\n\t */\n\n\tvar Themes =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function Themes(rendition) {\n\t    classCallCheck(this, Themes);\n\n\t    this.rendition = rendition;\n\t    this._themes = {\n\t      \"default\": {\n\t        \"rules\": {},\n\t        \"url\": \"\",\n\t        \"serialized\": \"\"\n\t      }\n\t    };\n\t    this._overrides = {};\n\t    this._current = \"default\";\n\t    this._injected = [];\n\t    this.rendition.hooks.content.register(this.inject.bind(this));\n\t    this.rendition.hooks.content.register(this.overrides.bind(this));\n\t  }\n\t  /**\n\t   * Add themes to be used by a rendition\n\t   * @param {object | string}\n\t   * @example themes.register(\"light\", \"http://example.com/light.css\")\n\t   * @example themes.register(\"light\", { \"body\": { \"color\": \"purple\"}})\n\t   * @example themes.register({ \"light\" : {...}, \"dark\" : {...}})\n\t   */\n\n\n\t  createClass(Themes, [{\n\t    key: \"register\",\n\t    value: function register() {\n\t      if (arguments.length === 0) {\n\t        return;\n\t      }\n\n\t      if (arguments.length === 1 && _typeof_1(arguments[0]) === \"object\") {\n\t        return this.registerThemes(arguments[0]);\n\t      }\n\n\t      if (arguments.length === 1 && typeof arguments[0] === \"string\") {\n\t        return this.default(arguments[0]);\n\t      }\n\n\t      if (arguments.length === 2 && typeof arguments[1] === \"string\") {\n\t        return this.registerUrl(arguments[0], arguments[1]);\n\t      }\n\n\t      if (arguments.length === 2 && _typeof_1(arguments[1]) === \"object\") {\n\t        return this.registerRules(arguments[0], arguments[1]);\n\t      }\n\t    }\n\t    /**\n\t     * Add a default theme to be used by a rendition\n\t     * @param {object | string} theme\n\t     * @example themes.register(\"http://example.com/default.css\")\n\t     * @example themes.register({ \"body\": { \"color\": \"purple\"}})\n\t     */\n\n\t  }, {\n\t    key: \"default\",\n\t    value: function _default(theme) {\n\t      if (!theme) {\n\t        return;\n\t      }\n\n\t      if (typeof theme === \"string\") {\n\t        return this.registerUrl(\"default\", theme);\n\t      }\n\n\t      if (_typeof_1(theme) === \"object\") {\n\t        return this.registerRules(\"default\", theme);\n\t      }\n\t    }\n\t    /**\n\t     * Register themes object\n\t     * @param {object} themes\n\t     */\n\n\t  }, {\n\t    key: \"registerThemes\",\n\t    value: function registerThemes(themes) {\n\t      for (var theme in themes) {\n\t        if (themes.hasOwnProperty(theme)) {\n\t          if (typeof themes[theme] === \"string\") {\n\t            this.registerUrl(theme, themes[theme]);\n\t          } else {\n\t            this.registerRules(theme, themes[theme]);\n\t          }\n\t        }\n\t      }\n\t    }\n\t    /**\n\t     * Register a url\n\t     * @param {string} name\n\t     * @param {string} input\n\t     */\n\n\t  }, {\n\t    key: \"registerUrl\",\n\t    value: function registerUrl(name, input) {\n\t      var url = new Url(input);\n\t      this._themes[name] = {\n\t        \"url\": url.toString()\n\t      };\n\n\t      if (this._injected[name]) {\n\t        this.update(name);\n\t      }\n\t    }\n\t    /**\n\t     * Register rule\n\t     * @param {string} name\n\t     * @param {object} rules\n\t     */\n\n\t  }, {\n\t    key: \"registerRules\",\n\t    value: function registerRules(name, rules) {\n\t      this._themes[name] = {\n\t        \"rules\": rules\n\t      }; // TODO: serialize css rules\n\n\t      if (this._injected[name]) {\n\t        this.update(name);\n\t      }\n\t    }\n\t    /**\n\t     * Select a theme\n\t     * @param {string} name\n\t     */\n\n\t  }, {\n\t    key: \"select\",\n\t    value: function select(name) {\n\t      var prev = this._current;\n\t      var contents;\n\t      this._current = name;\n\t      this.update(name);\n\t      contents = this.rendition.getContents();\n\t      contents.forEach(function (content) {\n\t        content.removeClass(prev);\n\t        content.addClass(name);\n\t      });\n\t    }\n\t    /**\n\t     * Update a theme\n\t     * @param {string} name\n\t     */\n\n\t  }, {\n\t    key: \"update\",\n\t    value: function update(name) {\n\t      var _this = this;\n\n\t      var contents = this.rendition.getContents();\n\t      contents.forEach(function (content) {\n\t        _this.add(name, content);\n\t      });\n\t    }\n\t    /**\n\t     * Inject all themes into contents\n\t     * @param {Contents} contents\n\t     */\n\n\t  }, {\n\t    key: \"inject\",\n\t    value: function inject(contents) {\n\t      var links = [];\n\t      var themes = this._themes;\n\t      var theme;\n\n\t      for (var name in themes) {\n\t        if (themes.hasOwnProperty(name) && (name === this._current || name === \"default\")) {\n\t          theme = themes[name];\n\n\t          if (theme.rules && Object.keys(theme.rules).length > 0 || theme.url && links.indexOf(theme.url) === -1) {\n\t            this.add(name, contents);\n\t          }\n\n\t          this._injected.push(name);\n\t        }\n\t      }\n\n\t      if (this._current != \"default\") {\n\t        contents.addClass(this._current);\n\t      }\n\t    }\n\t    /**\n\t     * Add Theme to contents\n\t     * @param {string} name\n\t     * @param {Contents} contents\n\t     */\n\n\t  }, {\n\t    key: \"add\",\n\t    value: function add(name, contents) {\n\t      var theme = this._themes[name];\n\n\t      if (!theme || !contents) {\n\t        return;\n\t      }\n\n\t      if (theme.url) {\n\t        contents.addStylesheet(theme.url);\n\t      } else if (theme.serialized) ; else if (theme.rules) {\n\t        contents.addStylesheetRules(theme.rules);\n\t        theme.injected = true;\n\t      }\n\t    }\n\t    /**\n\t     * Add override\n\t     * @param {string} name\n\t     * @param {string} value\n\t     * @param {boolean} priority\n\t     */\n\n\t  }, {\n\t    key: \"override\",\n\t    value: function override(name, value, priority) {\n\t      var _this2 = this;\n\n\t      var contents = this.rendition.getContents();\n\t      this._overrides[name] = {\n\t        value: value,\n\t        priority: priority === true\n\t      };\n\t      contents.forEach(function (content) {\n\t        content.css(name, _this2._overrides[name].value, _this2._overrides[name].priority);\n\t      });\n\t    }\n\t    /**\n\t     * Add all overrides\n\t     * @param {Content} content\n\t     */\n\n\t  }, {\n\t    key: \"overrides\",\n\t    value: function overrides(contents) {\n\t      var overrides = this._overrides;\n\n\t      for (var rule in overrides) {\n\t        if (overrides.hasOwnProperty(rule)) {\n\t          contents.css(rule, overrides[rule].value, overrides[rule].priority);\n\t        }\n\t      }\n\t    }\n\t    /**\n\t     * Adjust the font size of a rendition\n\t     * @param {number} size\n\t     */\n\n\t  }, {\n\t    key: \"fontSize\",\n\t    value: function fontSize(size) {\n\t      this.override(\"font-size\", size);\n\t    }\n\t    /**\n\t     * Adjust the font-family of a rendition\n\t     * @param {string} f\n\t     */\n\n\t  }, {\n\t    key: \"font\",\n\t    value: function font(f) {\n\t      this.override(\"font-family\", f, true);\n\t    }\n\t  }, {\n\t    key: \"destroy\",\n\t    value: function destroy() {\n\t      this.rendition = undefined;\n\t      this._themes = undefined;\n\t      this._overrides = undefined;\n\t      this._current = undefined;\n\t      this._injected = undefined;\n\t    }\n\t  }]);\n\n\t  return Themes;\n\t}();\n\n\t/**\n\t * Map text locations to CFI ranges\n\t * @class\n\t * @param {Layout} layout Layout to apply\n\t * @param {string} [direction=\"ltr\"] Text direction\n\t * @param {string} [axis=\"horizontal\"] vertical or horizontal axis\n\t * @param {boolean} [dev] toggle developer highlighting\n\t */\n\n\tvar Mapping =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function Mapping(layout, direction, axis, dev) {\n\t    classCallCheck(this, Mapping);\n\n\t    this.layout = layout;\n\t    this.horizontal = axis === \"horizontal\" ? true : false;\n\t    this.direction = direction || \"ltr\";\n\t    this._dev = dev;\n\t  }\n\t  /**\n\t   * Find CFI pairs for entire section at once\n\t   */\n\n\n\t  createClass(Mapping, [{\n\t    key: \"section\",\n\t    value: function section(view) {\n\t      var ranges = this.findRanges(view);\n\t      var map = this.rangeListToCfiList(view.section.cfiBase, ranges);\n\t      return map;\n\t    }\n\t    /**\n\t     * Find CFI pairs for a page\n\t     * @param {Contents} contents Contents from view\n\t     * @param {string} cfiBase string of the base for a cfi\n\t     * @param {number} start position to start at\n\t     * @param {number} end position to end at\n\t     */\n\n\t  }, {\n\t    key: \"page\",\n\t    value: function page(contents, cfiBase, start, end) {\n\t      var root = contents && contents.document ? contents.document.body : false;\n\t      var result;\n\n\t      if (!root) {\n\t        return;\n\t      }\n\n\t      result = this.rangePairToCfiPair(cfiBase, {\n\t        start: this.findStart(root, start, end),\n\t        end: this.findEnd(root, start, end)\n\t      });\n\n\t      if (this._dev === true) {\n\t        var doc = contents.document;\n\t        var startRange = new EpubCFI(result.start).toRange(doc);\n\t        var endRange = new EpubCFI(result.end).toRange(doc);\n\t        var selection = doc.defaultView.getSelection();\n\t        var r = doc.createRange();\n\t        selection.removeAllRanges();\n\t        r.setStart(startRange.startContainer, startRange.startOffset);\n\t        r.setEnd(endRange.endContainer, endRange.endOffset);\n\t        selection.addRange(r);\n\t      }\n\n\t      return result;\n\t    }\n\t    /**\n\t     * Walk a node, preforming a function on each node it finds\n\t     * @private\n\t     * @param {Node} root Node to walkToNode\n\t     * @param {function} func walk function\n\t     * @return {*} returns the result of the walk function\n\t     */\n\n\t  }, {\n\t    key: \"walk\",\n\t    value: function walk$$1(root, func) {\n\t      // IE11 has strange issue, if root is text node IE throws exception on\n\t      // calling treeWalker.nextNode(), saying\n\t      // Unexpected call to method or property access instead of returing null value\n\t      if (root && root.nodeType === Node.TEXT_NODE) {\n\t        return;\n\t      } // safeFilter is required so that it can work in IE as filter is a function for IE\n\t      // and for other browser filter is an object.\n\n\n\t      var filter = {\n\t        acceptNode: function acceptNode(node) {\n\t          if (node.data.trim().length > 0) {\n\t            return NodeFilter.FILTER_ACCEPT;\n\t          } else {\n\t            return NodeFilter.FILTER_REJECT;\n\t          }\n\t        }\n\t      };\n\t      var safeFilter = filter.acceptNode;\n\t      safeFilter.acceptNode = filter.acceptNode;\n\t      var treeWalker$$1 = document.createTreeWalker(root, NodeFilter.SHOW_TEXT, safeFilter, false);\n\t      var node;\n\t      var result;\n\n\t      while (node = treeWalker$$1.nextNode()) {\n\t        result = func(node);\n\t        if (result) break;\n\t      }\n\n\t      return result;\n\t    }\n\t  }, {\n\t    key: \"findRanges\",\n\t    value: function findRanges(view) {\n\t      var columns = [];\n\t      var scrollWidth = view.contents.scrollWidth();\n\t      var spreads = Math.ceil(scrollWidth / this.layout.spreadWidth);\n\t      var count = spreads * this.layout.divisor;\n\t      var columnWidth = this.layout.columnWidth;\n\t      var gap = this.layout.gap;\n\t      var start, end;\n\n\t      for (var i = 0; i < count.pages; i++) {\n\t        start = (columnWidth + gap) * i;\n\t        end = columnWidth * (i + 1) + gap * i;\n\t        columns.push({\n\t          start: this.findStart(view.document.body, start, end),\n\t          end: this.findEnd(view.document.body, start, end)\n\t        });\n\t      }\n\n\t      return columns;\n\t    }\n\t    /**\n\t     * Find Start Range\n\t     * @private\n\t     * @param {Node} root root node\n\t     * @param {number} start position to start at\n\t     * @param {number} end position to end at\n\t     * @return {Range}\n\t     */\n\n\t  }, {\n\t    key: \"findStart\",\n\t    value: function findStart(root, start, end) {\n\t      var _this = this;\n\n\t      var stack = [root];\n\t      var $el;\n\t      var found;\n\t      var $prev = root;\n\n\t      while (stack.length) {\n\t        $el = stack.shift();\n\t        found = this.walk($el, function (node) {\n\t          var left, right, top, bottom;\n\t          var elPos;\n\t          elPos = nodeBounds(node);\n\n\t          if (_this.horizontal && _this.direction === \"ltr\") {\n\t            left = _this.horizontal ? elPos.left : elPos.top;\n\t            right = _this.horizontal ? elPos.right : elPos.bottom;\n\n\t            if (left >= start && left <= end) {\n\t              return node;\n\t            } else if (right > start) {\n\t              return node;\n\t            } else {\n\t              $prev = node;\n\t              stack.push(node);\n\t            }\n\t          } else if (_this.horizontal && _this.direction === \"rtl\") {\n\t            left = elPos.left;\n\t            right = elPos.right;\n\n\t            if (right <= end && right >= start) {\n\t              return node;\n\t            } else if (left < end) {\n\t              return node;\n\t            } else {\n\t              $prev = node;\n\t              stack.push(node);\n\t            }\n\t          } else {\n\t            top = elPos.top;\n\t            bottom = elPos.bottom;\n\n\t            if (top >= start && top <= end) {\n\t              return node;\n\t            } else if (bottom > start) {\n\t              return node;\n\t            } else {\n\t              $prev = node;\n\t              stack.push(node);\n\t            }\n\t          }\n\t        });\n\n\t        if (found) {\n\t          return this.findTextStartRange(found, start, end);\n\t        }\n\t      } // Return last element\n\n\n\t      return this.findTextStartRange($prev, start, end);\n\t    }\n\t    /**\n\t     * Find End Range\n\t     * @private\n\t     * @param {Node} root root node\n\t     * @param {number} start position to start at\n\t     * @param {number} end position to end at\n\t     * @return {Range}\n\t     */\n\n\t  }, {\n\t    key: \"findEnd\",\n\t    value: function findEnd(root, start, end) {\n\t      var _this2 = this;\n\n\t      var stack = [root];\n\t      var $el;\n\t      var $prev = root;\n\t      var found;\n\n\t      while (stack.length) {\n\t        $el = stack.shift();\n\t        found = this.walk($el, function (node) {\n\t          var left, right, top, bottom;\n\t          var elPos;\n\t          elPos = nodeBounds(node);\n\n\t          if (_this2.horizontal && _this2.direction === \"ltr\") {\n\t            left = Math.round(elPos.left);\n\t            right = Math.round(elPos.right);\n\n\t            if (left > end && $prev) {\n\t              return $prev;\n\t            } else if (right > end) {\n\t              return node;\n\t            } else {\n\t              $prev = node;\n\t              stack.push(node);\n\t            }\n\t          } else if (_this2.horizontal && _this2.direction === \"rtl\") {\n\t            left = Math.round(_this2.horizontal ? elPos.left : elPos.top);\n\t            right = Math.round(_this2.horizontal ? elPos.right : elPos.bottom);\n\n\t            if (right < start && $prev) {\n\t              return $prev;\n\t            } else if (left < start) {\n\t              return node;\n\t            } else {\n\t              $prev = node;\n\t              stack.push(node);\n\t            }\n\t          } else {\n\t            top = Math.round(elPos.top);\n\t            bottom = Math.round(elPos.bottom);\n\n\t            if (top > end && $prev) {\n\t              return $prev;\n\t            } else if (bottom > end) {\n\t              return node;\n\t            } else {\n\t              $prev = node;\n\t              stack.push(node);\n\t            }\n\t          }\n\t        });\n\n\t        if (found) {\n\t          return this.findTextEndRange(found, start, end);\n\t        }\n\t      } // end of chapter\n\n\n\t      return this.findTextEndRange($prev, start, end);\n\t    }\n\t    /**\n\t     * Find Text Start Range\n\t     * @private\n\t     * @param {Node} root root node\n\t     * @param {number} start position to start at\n\t     * @param {number} end position to end at\n\t     * @return {Range}\n\t     */\n\n\t  }, {\n\t    key: \"findTextStartRange\",\n\t    value: function findTextStartRange(node, start, end) {\n\t      var ranges = this.splitTextNodeIntoRanges(node);\n\t      var range;\n\t      var pos;\n\t      var left, top, right;\n\n\t      for (var i = 0; i < ranges.length; i++) {\n\t        range = ranges[i];\n\t        pos = range.getBoundingClientRect();\n\n\t        if (this.horizontal && this.direction === \"ltr\") {\n\t          left = pos.left;\n\n\t          if (left >= start) {\n\t            return range;\n\t          }\n\t        } else if (this.horizontal && this.direction === \"rtl\") {\n\t          right = pos.right;\n\n\t          if (right <= end) {\n\t            return range;\n\t          }\n\t        } else {\n\t          top = pos.top;\n\n\t          if (top >= start) {\n\t            return range;\n\t          }\n\t        } // prev = range;\n\n\t      }\n\n\t      return ranges[0];\n\t    }\n\t    /**\n\t     * Find Text End Range\n\t     * @private\n\t     * @param {Node} root root node\n\t     * @param {number} start position to start at\n\t     * @param {number} end position to end at\n\t     * @return {Range}\n\t     */\n\n\t  }, {\n\t    key: \"findTextEndRange\",\n\t    value: function findTextEndRange(node, start, end) {\n\t      var ranges = this.splitTextNodeIntoRanges(node);\n\t      var prev;\n\t      var range;\n\t      var pos;\n\t      var left, right, top, bottom;\n\n\t      for (var i = 0; i < ranges.length; i++) {\n\t        range = ranges[i];\n\t        pos = range.getBoundingClientRect();\n\n\t        if (this.horizontal && this.direction === \"ltr\") {\n\t          left = pos.left;\n\t          right = pos.right;\n\n\t          if (left > end && prev) {\n\t            return prev;\n\t          } else if (right > end) {\n\t            return range;\n\t          }\n\t        } else if (this.horizontal && this.direction === \"rtl\") {\n\t          left = pos.left;\n\t          right = pos.right;\n\n\t          if (right < start && prev) {\n\t            return prev;\n\t          } else if (left < start) {\n\t            return range;\n\t          }\n\t        } else {\n\t          top = pos.top;\n\t          bottom = pos.bottom;\n\n\t          if (top > end && prev) {\n\t            return prev;\n\t          } else if (bottom > end) {\n\t            return range;\n\t          }\n\t        }\n\n\t        prev = range;\n\t      } // Ends before limit\n\n\n\t      return ranges[ranges.length - 1];\n\t    }\n\t    /**\n\t     * Split up a text node into ranges for each word\n\t     * @private\n\t     * @param {Node} root root node\n\t     * @param {string} [_splitter] what to split on\n\t     * @return {Range[]}\n\t     */\n\n\t  }, {\n\t    key: \"splitTextNodeIntoRanges\",\n\t    value: function splitTextNodeIntoRanges(node, _splitter) {\n\t      var ranges = [];\n\t      var textContent = node.textContent || \"\";\n\t      var text = textContent.trim();\n\t      var range;\n\t      var doc = node.ownerDocument;\n\t      var splitter = _splitter || \" \";\n\t      var pos = text.indexOf(splitter);\n\n\t      if (pos === -1 || node.nodeType != Node.TEXT_NODE) {\n\t        range = doc.createRange();\n\t        range.selectNodeContents(node);\n\t        return [range];\n\t      }\n\n\t      range = doc.createRange();\n\t      range.setStart(node, 0);\n\t      range.setEnd(node, pos);\n\t      ranges.push(range);\n\t      range = false;\n\n\t      while (pos != -1) {\n\t        pos = text.indexOf(splitter, pos + 1);\n\n\t        if (pos > 0) {\n\t          if (range) {\n\t            range.setEnd(node, pos);\n\t            ranges.push(range);\n\t          }\n\n\t          range = doc.createRange();\n\t          range.setStart(node, pos + 1);\n\t        }\n\t      }\n\n\t      if (range) {\n\t        range.setEnd(node, text.length);\n\t        ranges.push(range);\n\t      }\n\n\t      return ranges;\n\t    }\n\t    /**\n\t     * Turn a pair of ranges into a pair of CFIs\n\t     * @private\n\t     * @param {string} cfiBase base string for an EpubCFI\n\t     * @param {object} rangePair { start: Range, end: Range }\n\t     * @return {object} { start: \"epubcfi(...)\", end: \"epubcfi(...)\" }\n\t     */\n\n\t  }, {\n\t    key: \"rangePairToCfiPair\",\n\t    value: function rangePairToCfiPair(cfiBase, rangePair) {\n\t      var startRange = rangePair.start;\n\t      var endRange = rangePair.end;\n\t      startRange.collapse(true);\n\t      endRange.collapse(false);\n\t      var startCfi = new EpubCFI(startRange, cfiBase).toString();\n\t      var endCfi = new EpubCFI(endRange, cfiBase).toString();\n\t      return {\n\t        start: startCfi,\n\t        end: endCfi\n\t      };\n\t    }\n\t  }, {\n\t    key: \"rangeListToCfiList\",\n\t    value: function rangeListToCfiList(cfiBase, columns) {\n\t      var map = [];\n\t      var cifPair;\n\n\t      for (var i = 0; i < columns.length; i++) {\n\t        cifPair = this.rangePairToCfiPair(cfiBase, columns[i]);\n\t        map.push(cifPair);\n\t      }\n\n\t      return map;\n\t    }\n\t    /**\n\t     * Set the axis for mapping\n\t     * @param {string} axis horizontal | vertical\n\t     * @return {boolean} is it horizontal?\n\t     */\n\n\t  }, {\n\t    key: \"axis\",\n\t    value: function axis(_axis) {\n\t      if (_axis) {\n\t        this.horizontal = _axis === \"horizontal\" ? true : false;\n\t      }\n\n\t      return this.horizontal;\n\t    }\n\t  }]);\n\n\t  return Mapping;\n\t}();\n\n\tvar hasNavigator = typeof navigator !== \"undefined\";\n\tvar isChrome = hasNavigator && /Chrome/.test(navigator.userAgent);\n\tvar isWebkit = hasNavigator && !isChrome && /AppleWebKit/.test(navigator.userAgent);\n\tvar ELEMENT_NODE$2 = 1; // const TEXT_NODE = 3;\n\n\t/**\n\t\t* Handles DOM manipulation, queries and events for View contents\n\t\t* @class\n\t\t* @param {document} doc Document\n\t\t* @param {element} content Parent Element (typically Body)\n\t\t* @param {string} cfiBase Section component of CFIs\n\t\t* @param {number} sectionIndex Index in Spine of Conntent's Section\n\t\t*/\n\n\tvar Contents =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function Contents(doc, content, cfiBase, sectionIndex) {\n\t    classCallCheck(this, Contents);\n\n\t    // Blank Cfi for Parsing\n\t    this.epubcfi = new EpubCFI();\n\t    this.document = doc;\n\t    this.documentElement = this.document.documentElement;\n\t    this.content = content || this.document.body;\n\t    this.window = this.document.defaultView;\n\t    this._size = {\n\t      width: 0,\n\t      height: 0\n\t    };\n\t    this.sectionIndex = sectionIndex || 0;\n\t    this.cfiBase = cfiBase || \"\";\n\t    this.epubReadingSystem(\"epub.js\", EPUBJS_VERSION);\n\t    this.listeners();\n\t  }\n\t  /**\n\t  \t* Get DOM events that are listened for and passed along\n\t  \t*/\n\n\n\t  createClass(Contents, [{\n\t    key: \"width\",\n\n\t    /**\n\t    \t* Get or Set width\n\t    \t* @param {number} [w]\n\t    \t* @returns {number} width\n\t    \t*/\n\t    value: function width(w) {\n\t      // var frame = this.documentElement;\n\t      var frame = this.content;\n\n\t      if (w && isNumber(w)) {\n\t        w = w + \"px\";\n\t      }\n\n\t      if (w) {\n\t        frame.style.width = w; // this.content.style.width = w;\n\t      }\n\n\t      return this.window.getComputedStyle(frame)[\"width\"];\n\t    }\n\t    /**\n\t    \t* Get or Set height\n\t    \t* @param {number} [h]\n\t    \t* @returns {number} height\n\t    \t*/\n\n\t  }, {\n\t    key: \"height\",\n\t    value: function height(h) {\n\t      // var frame = this.documentElement;\n\t      var frame = this.content;\n\n\t      if (h && isNumber(h)) {\n\t        h = h + \"px\";\n\t      }\n\n\t      if (h) {\n\t        frame.style.height = h; // this.content.style.height = h;\n\t      }\n\n\t      return this.window.getComputedStyle(frame)[\"height\"];\n\t    }\n\t    /**\n\t    \t* Get or Set width of the contents\n\t    \t* @param {number} [w]\n\t    \t* @returns {number} width\n\t    \t*/\n\n\t  }, {\n\t    key: \"contentWidth\",\n\t    value: function contentWidth(w) {\n\t      var content = this.content || this.document.body;\n\n\t      if (w && isNumber(w)) {\n\t        w = w + \"px\";\n\t      }\n\n\t      if (w) {\n\t        content.style.width = w;\n\t      }\n\n\t      return this.window.getComputedStyle(content)[\"width\"];\n\t    }\n\t    /**\n\t    \t* Get or Set height of the contents\n\t    \t* @param {number} [h]\n\t    \t* @returns {number} height\n\t    \t*/\n\n\t  }, {\n\t    key: \"contentHeight\",\n\t    value: function contentHeight(h) {\n\t      var content = this.content || this.document.body;\n\n\t      if (h && isNumber(h)) {\n\t        h = h + \"px\";\n\t      }\n\n\t      if (h) {\n\t        content.style.height = h;\n\t      }\n\n\t      return this.window.getComputedStyle(content)[\"height\"];\n\t    }\n\t    /**\n\t    \t* Get the width of the text using Range\n\t    \t* @returns {number} width\n\t    \t*/\n\n\t  }, {\n\t    key: \"textWidth\",\n\t    value: function textWidth() {\n\t      var rect;\n\t      var width;\n\t      var range = this.document.createRange();\n\t      var content = this.content || this.document.body;\n\t      var border = borders(content); // Select the contents of frame\n\n\t      range.selectNodeContents(content); // get the width of the text content\n\n\t      rect = range.getBoundingClientRect();\n\t      width = rect.width;\n\n\t      if (this.content === this.document.body && rect.left) {\n\t        width += rect.left;\n\t      }\n\n\t      if (border && border.width) {\n\t        width += border.width;\n\t      }\n\n\t      return Math.round(width);\n\t    }\n\t    /**\n\t    \t* Get the height of the text using Range\n\t    \t* @returns {number} height\n\t    \t*/\n\n\t  }, {\n\t    key: \"textHeight\",\n\t    value: function textHeight() {\n\t      var rect;\n\t      var height;\n\t      var range = this.document.createRange();\n\t      var content = this.content || this.document.body;\n\t      var border = borders(content);\n\t      range.selectNodeContents(content);\n\t      rect = range.getBoundingClientRect();\n\t      height = rect.height;\n\n\t      if (this.content === this.document.body && rect.top) {\n\t        height += rect.top;\n\t      }\n\n\t      if (height && border.height) {\n\t        height += border.height;\n\t      }\n\n\t      return Math.ceil(height);\n\t    }\n\t    /**\n\t    \t* Get documentElement scrollWidth\n\t    \t* @returns {number} width\n\t    \t*/\n\n\t  }, {\n\t    key: \"scrollWidth\",\n\t    value: function scrollWidth() {\n\t      var width = this.documentElement.scrollWidth;\n\t      return width;\n\t    }\n\t    /**\n\t    \t* Get documentElement scrollHeight\n\t    \t* @returns {number} height\n\t    \t*/\n\n\t  }, {\n\t    key: \"scrollHeight\",\n\t    value: function scrollHeight() {\n\t      var height = this.documentElement.scrollHeight;\n\t      return height;\n\t    }\n\t    /**\n\t    \t* Set overflow css style of the contents\n\t    \t* @param {string} [overflow]\n\t    \t*/\n\n\t  }, {\n\t    key: \"overflow\",\n\t    value: function overflow(_overflow) {\n\t      if (_overflow) {\n\t        this.documentElement.style.overflow = _overflow;\n\t      }\n\n\t      return this.window.getComputedStyle(this.documentElement)[\"overflow\"];\n\t    }\n\t    /**\n\t    \t* Set overflowX css style of the documentElement\n\t    \t* @param {string} [overflow]\n\t    \t*/\n\n\t  }, {\n\t    key: \"overflowX\",\n\t    value: function overflowX(overflow) {\n\t      if (overflow) {\n\t        this.documentElement.style.overflowX = overflow;\n\t      }\n\n\t      return this.window.getComputedStyle(this.documentElement)[\"overflowX\"];\n\t    }\n\t    /**\n\t    \t* Set overflowY css style of the documentElement\n\t    \t* @param {string} [overflow]\n\t    \t*/\n\n\t  }, {\n\t    key: \"overflowY\",\n\t    value: function overflowY(overflow) {\n\t      if (overflow) {\n\t        this.documentElement.style.overflowY = overflow;\n\t      }\n\n\t      return this.window.getComputedStyle(this.documentElement)[\"overflowY\"];\n\t    }\n\t    /**\n\t    \t* Set Css styles on the contents element (typically Body)\n\t    \t* @param {string} property\n\t    \t* @param {string} value\n\t    \t* @param {boolean} [priority] set as \"important\"\n\t    \t*/\n\n\t  }, {\n\t    key: \"css\",\n\t    value: function css(property, value, priority) {\n\t      var content = this.content || this.document.body;\n\n\t      if (value) {\n\t        content.style.setProperty(property, value, priority ? \"important\" : \"\");\n\t      }\n\n\t      return this.window.getComputedStyle(content)[property];\n\t    }\n\t    /**\n\t    \t* Get or Set the viewport element\n\t    \t* @param {object} [options]\n\t    \t* @param {string} [options.width]\n\t    \t* @param {string} [options.height]\n\t    \t* @param {string} [options.scale]\n\t    \t* @param {string} [options.minimum]\n\t    \t* @param {string} [options.maximum]\n\t    \t* @param {string} [options.scalable]\n\t    \t*/\n\n\t  }, {\n\t    key: \"viewport\",\n\t    value: function viewport(options) {\n\t      var $viewport = this.document.querySelector(\"meta[name='viewport']\");\n\t      var parsed = {\n\t        \"width\": undefined,\n\t        \"height\": undefined,\n\t        \"scale\": undefined,\n\t        \"minimum\": undefined,\n\t        \"maximum\": undefined,\n\t        \"scalable\": undefined\n\t      };\n\t      var newContent = [];\n\t      var settings = {};\n\t      /*\n\t      * check for the viewport size\n\t      * <meta name=\"viewport\" content=\"width=1024,height=697\" />\n\t      */\n\n\t      if ($viewport && $viewport.hasAttribute(\"content\")) {\n\t        var content = $viewport.getAttribute(\"content\");\n\n\t        var _width = content.match(/width\\s*=\\s*([^,]*)/);\n\n\t        var _height = content.match(/height\\s*=\\s*([^,]*)/);\n\n\t        var _scale = content.match(/initial-scale\\s*=\\s*([^,]*)/);\n\n\t        var _minimum = content.match(/minimum-scale\\s*=\\s*([^,]*)/);\n\n\t        var _maximum = content.match(/maximum-scale\\s*=\\s*([^,]*)/);\n\n\t        var _scalable = content.match(/user-scalable\\s*=\\s*([^,]*)/);\n\n\t        if (_width && _width.length && typeof _width[1] !== \"undefined\") {\n\t          parsed.width = _width[1];\n\t        }\n\n\t        if (_height && _height.length && typeof _height[1] !== \"undefined\") {\n\t          parsed.height = _height[1];\n\t        }\n\n\t        if (_scale && _scale.length && typeof _scale[1] !== \"undefined\") {\n\t          parsed.scale = _scale[1];\n\t        }\n\n\t        if (_minimum && _minimum.length && typeof _minimum[1] !== \"undefined\") {\n\t          parsed.minimum = _minimum[1];\n\t        }\n\n\t        if (_maximum && _maximum.length && typeof _maximum[1] !== \"undefined\") {\n\t          parsed.maximum = _maximum[1];\n\t        }\n\n\t        if (_scalable && _scalable.length && typeof _scalable[1] !== \"undefined\") {\n\t          parsed.scalable = _scalable[1];\n\t        }\n\t      }\n\n\t      settings = defaults(options || {}, parsed);\n\n\t      if (options) {\n\t        if (settings.width) {\n\t          newContent.push(\"width=\" + settings.width);\n\t        }\n\n\t        if (settings.height) {\n\t          newContent.push(\"height=\" + settings.height);\n\t        }\n\n\t        if (settings.scale) {\n\t          newContent.push(\"initial-scale=\" + settings.scale);\n\t        }\n\n\t        if (settings.scalable === \"no\") {\n\t          newContent.push(\"minimum-scale=\" + settings.scale);\n\t          newContent.push(\"maximum-scale=\" + settings.scale);\n\t          newContent.push(\"user-scalable=\" + settings.scalable);\n\t        } else {\n\t          if (settings.scalable) {\n\t            newContent.push(\"user-scalable=\" + settings.scalable);\n\t          }\n\n\t          if (settings.minimum) {\n\t            newContent.push(\"minimum-scale=\" + settings.minimum);\n\t          }\n\n\t          if (settings.maximum) {\n\t            newContent.push(\"minimum-scale=\" + settings.maximum);\n\t          }\n\t        }\n\n\t        if (!$viewport) {\n\t          $viewport = this.document.createElement(\"meta\");\n\t          $viewport.setAttribute(\"name\", \"viewport\");\n\t          this.document.querySelector(\"head\").appendChild($viewport);\n\t        }\n\n\t        $viewport.setAttribute(\"content\", newContent.join(\", \"));\n\t        this.window.scrollTo(0, 0);\n\t      }\n\n\t      return settings;\n\t    }\n\t    /**\n\t     * Event emitter for when the contents has expanded\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"expand\",\n\t    value: function expand() {\n\t      this.emit(EVENTS.CONTENTS.EXPAND);\n\t    }\n\t    /**\n\t     * Add DOM listeners\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"listeners\",\n\t    value: function listeners() {\n\t      this.imageLoadListeners();\n\t      this.mediaQueryListeners(); // this.fontLoadListeners();\n\n\t      this.addEventListeners();\n\t      this.addSelectionListeners(); // this.transitionListeners();\n\n\t      this.resizeListeners(); // this.resizeObservers();\n\n\t      this.linksHandler();\n\t    }\n\t    /**\n\t     * Remove DOM listeners\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"removeListeners\",\n\t    value: function removeListeners() {\n\t      this.removeEventListeners();\n\t      this.removeSelectionListeners();\n\t      clearTimeout(this.expanding);\n\t    }\n\t    /**\n\t     * Check if size of contents has changed and\n\t     * emit 'resize' event if it has.\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"resizeCheck\",\n\t    value: function resizeCheck() {\n\t      var width = this.textWidth();\n\t      var height = this.textHeight();\n\n\t      if (width != this._size.width || height != this._size.height) {\n\t        this._size = {\n\t          width: width,\n\t          height: height\n\t        };\n\t        this.onResize && this.onResize(this._size);\n\t        this.emit(EVENTS.CONTENTS.RESIZE, this._size);\n\t      }\n\t    }\n\t    /**\n\t     * Poll for resize detection\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"resizeListeners\",\n\t    value: function resizeListeners() {\n\t      // Test size again\n\t      clearTimeout(this.expanding);\n\t      requestAnimationFrame(this.resizeCheck.bind(this));\n\t      this.expanding = setTimeout(this.resizeListeners.bind(this), 350);\n\t    }\n\t    /**\n\t     * Use css transitions to detect resize\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"transitionListeners\",\n\t    value: function transitionListeners() {\n\t      var body = this.content;\n\t      body.style[\"transitionProperty\"] = \"font, font-size, font-size-adjust, font-stretch, font-variation-settings, font-weight, width, height\";\n\t      body.style[\"transitionDuration\"] = \"0.001ms\";\n\t      body.style[\"transitionTimingFunction\"] = \"linear\";\n\t      body.style[\"transitionDelay\"] = \"0\";\n\t      this.document.addEventListener(\"transitionend\", this.resizeCheck.bind(this));\n\t    }\n\t    /**\n\t     * Listen for media query changes and emit 'expand' event\n\t     * Adapted from: https://github.com/tylergaw/media-query-events/blob/master/js/mq-events.js\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"mediaQueryListeners\",\n\t    value: function mediaQueryListeners() {\n\t      var sheets = this.document.styleSheets;\n\n\t      var mediaChangeHandler = function (m) {\n\t        if (m.matches && !this._expanding) {\n\t          setTimeout(this.expand.bind(this), 1);\n\t        }\n\t      }.bind(this);\n\n\t      for (var i = 0; i < sheets.length; i += 1) {\n\t        var rules; // Firefox errors if we access cssRules cross-domain\n\n\t        try {\n\t          rules = sheets[i].cssRules;\n\t        } catch (e) {\n\t          return;\n\t        }\n\n\t        if (!rules) return; // Stylesheets changed\n\n\t        for (var j = 0; j < rules.length; j += 1) {\n\t          //if (rules[j].constructor === CSSMediaRule) {\n\t          if (rules[j].media) {\n\t            var mql = this.window.matchMedia(rules[j].media.mediaText);\n\t            mql.addListener(mediaChangeHandler); //mql.onchange = mediaChangeHandler;\n\t          }\n\t        }\n\t      }\n\t    }\n\t    /**\n\t     * Use MutationObserver to listen for changes in the DOM and check for resize\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"resizeObservers\",\n\t    value: function resizeObservers() {\n\t      var _this = this;\n\n\t      // create an observer instance\n\t      this.observer = new MutationObserver(function (mutations) {\n\t        _this.resizeCheck();\n\t      }); // configuration of the observer:\n\n\t      var config = {\n\t        attributes: true,\n\t        childList: true,\n\t        characterData: true,\n\t        subtree: true\n\t      }; // pass in the target node, as well as the observer options\n\n\t      this.observer.observe(this.document, config);\n\t    }\n\t    /**\n\t     * Test if images are loaded or add listener for when they load\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"imageLoadListeners\",\n\t    value: function imageLoadListeners() {\n\t      var images = this.document.querySelectorAll(\"img\");\n\t      var img;\n\n\t      for (var i = 0; i < images.length; i++) {\n\t        img = images[i];\n\n\t        if (typeof img.naturalWidth !== \"undefined\" && img.naturalWidth === 0) {\n\t          img.onload = this.expand.bind(this);\n\t        }\n\t      }\n\t    }\n\t    /**\n\t     * Listen for font load and check for resize when loaded\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"fontLoadListeners\",\n\t    value: function fontLoadListeners() {\n\t      if (!this.document || !this.document.fonts) {\n\t        return;\n\t      }\n\n\t      this.document.fonts.ready.then(function () {\n\t        this.resizeCheck();\n\t      }.bind(this));\n\t    }\n\t    /**\n\t     * Get the documentElement\n\t     * @returns {element} documentElement\n\t     */\n\n\t  }, {\n\t    key: \"root\",\n\t    value: function root() {\n\t      if (!this.document) return null;\n\t      return this.document.documentElement;\n\t    }\n\t    /**\n\t     * Get the location offset of a EpubCFI or an #id\n\t     * @param {string | EpubCFI} target\n\t     * @param {string} [ignoreClass] for the cfi\n\t     * @returns { {left: Number, top: Number }\n\t     */\n\n\t  }, {\n\t    key: \"locationOf\",\n\t    value: function locationOf$$1(target, ignoreClass) {\n\t      var position;\n\t      var targetPos = {\n\t        \"left\": 0,\n\t        \"top\": 0\n\t      };\n\t      if (!this.document) return targetPos;\n\n\t      if (this.epubcfi.isCfiString(target)) {\n\t        var range = new EpubCFI(target).toRange(this.document, ignoreClass);\n\n\t        if (range) {\n\t          if (range.startContainer.nodeType === Node.ELEMENT_NODE) {\n\t            position = range.startContainer.getBoundingClientRect();\n\t            targetPos.left = position.left;\n\t            targetPos.top = position.top;\n\t          } else {\n\t            // Webkit does not handle collapsed range bounds correctly\n\t            // https://bugs.webkit.org/show_bug.cgi?id=138949\n\t            // Construct a new non-collapsed range\n\t            if (isWebkit) {\n\t              var container = range.startContainer;\n\t              var newRange = new Range();\n\n\t              try {\n\t                if (container.nodeType === ELEMENT_NODE$2) {\n\t                  position = container.getBoundingClientRect();\n\t                } else if (range.startOffset + 2 < container.length) {\n\t                  newRange.setStart(container, range.startOffset);\n\t                  newRange.setEnd(container, range.startOffset + 2);\n\t                  position = newRange.getBoundingClientRect();\n\t                } else if (range.startOffset - 2 > 0) {\n\t                  newRange.setStart(container, range.startOffset - 2);\n\t                  newRange.setEnd(container, range.startOffset);\n\t                  position = newRange.getBoundingClientRect();\n\t                } else {\n\t                  // empty, return the parent element\n\t                  position = container.parentNode.getBoundingClientRect();\n\t                }\n\t              } catch (e) {\n\t                console.error(e, e.stack);\n\t              }\n\t            } else {\n\t              position = range.getBoundingClientRect();\n\t            }\n\t          }\n\t        }\n\t      } else if (typeof target === \"string\" && target.indexOf(\"#\") > -1) {\n\t        var id = target.substring(target.indexOf(\"#\") + 1);\n\t        var el = this.document.getElementById(id);\n\n\t        if (el) {\n\t          position = el.getBoundingClientRect();\n\t        }\n\t      }\n\n\t      if (position) {\n\t        targetPos.left = position.left;\n\t        targetPos.top = position.top;\n\t      }\n\n\t      return targetPos;\n\t    }\n\t    /**\n\t     * Append a stylesheet link to the document head\n\t     * @param {string} src url\n\t     */\n\n\t  }, {\n\t    key: \"addStylesheet\",\n\t    value: function addStylesheet(src) {\n\t      return new Promise(function (resolve, reject) {\n\t        var $stylesheet;\n\t        var ready = false;\n\n\t        if (!this.document) {\n\t          resolve(false);\n\t          return;\n\t        } // Check if link already exists\n\n\n\t        $stylesheet = this.document.querySelector(\"link[href='\" + src + \"']\");\n\n\t        if ($stylesheet) {\n\t          resolve(true);\n\t          return; // already present\n\t        }\n\n\t        $stylesheet = this.document.createElement(\"link\");\n\t        $stylesheet.type = \"text/css\";\n\t        $stylesheet.rel = \"stylesheet\";\n\t        $stylesheet.href = src;\n\n\t        $stylesheet.onload = $stylesheet.onreadystatechange = function () {\n\t          if (!ready && (!this.readyState || this.readyState == \"complete\")) {\n\t            ready = true; // Let apply\n\n\t            setTimeout(function () {\n\t              resolve(true);\n\t            }, 1);\n\t          }\n\t        };\n\n\t        this.document.head.appendChild($stylesheet);\n\t      }.bind(this));\n\t    }\n\t    /**\n\t     * Append stylesheet rules to a generate stylesheet\n\t     * Array: https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/insertRule\n\t     * Object: https://github.com/desirable-objects/json-to-css\n\t     * @param {array | object} rules\n\t     */\n\n\t  }, {\n\t    key: \"addStylesheetRules\",\n\t    value: function addStylesheetRules(rules) {\n\t      var styleEl;\n\t      var styleSheet;\n\t      var key = \"epubjs-inserted-css\";\n\t      if (!this.document || !rules || rules.length === 0) return; // Check if link already exists\n\n\t      styleEl = this.document.getElementById(\"#\" + key);\n\n\t      if (!styleEl) {\n\t        styleEl = this.document.createElement(\"style\");\n\t        styleEl.id = key;\n\t      } // Append style element to head\n\n\n\t      this.document.head.appendChild(styleEl); // Grab style sheet\n\n\t      styleSheet = styleEl.sheet;\n\n\t      if (Object.prototype.toString.call(rules) === \"[object Array]\") {\n\t        for (var i = 0, rl = rules.length; i < rl; i++) {\n\t          var j = 1,\n\t              rule = rules[i],\n\t              selector = rules[i][0],\n\t              propStr = \"\"; // If the second argument of a rule is an array of arrays, correct our variables.\n\n\t          if (Object.prototype.toString.call(rule[1][0]) === \"[object Array]\") {\n\t            rule = rule[1];\n\t            j = 0;\n\t          }\n\n\t          for (var pl = rule.length; j < pl; j++) {\n\t            var prop = rule[j];\n\t            propStr += prop[0] + \":\" + prop[1] + (prop[2] ? \" !important\" : \"\") + \";\\n\";\n\t          } // Insert CSS Rule\n\n\n\t          styleSheet.insertRule(selector + \"{\" + propStr + \"}\", styleSheet.cssRules.length);\n\t        }\n\t      } else {\n\t        var selectors = Object.keys(rules);\n\t        selectors.forEach(function (selector) {\n\t          var definition = rules[selector];\n\n\t          if (Array.isArray(definition)) {\n\t            definition.forEach(function (item) {\n\t              var _rules = Object.keys(item);\n\n\t              var result = _rules.map(function (rule) {\n\t                return \"\".concat(rule, \":\").concat(item[rule]);\n\t              }).join(\";\");\n\n\t              styleSheet.insertRule(\"\".concat(selector, \"{\").concat(result, \"}\"), styleSheet.cssRules.length);\n\t            });\n\t          } else {\n\t            var _rules = Object.keys(definition);\n\n\t            var result = _rules.map(function (rule) {\n\t              return \"\".concat(rule, \":\").concat(definition[rule]);\n\t            }).join(\";\");\n\n\t            styleSheet.insertRule(\"\".concat(selector, \"{\").concat(result, \"}\"), styleSheet.cssRules.length);\n\t          }\n\t        });\n\t      }\n\t    }\n\t    /**\n\t     * Append a script tag to the document head\n\t     * @param {string} src url\n\t     * @returns {Promise} loaded\n\t     */\n\n\t  }, {\n\t    key: \"addScript\",\n\t    value: function addScript(src) {\n\t      return new Promise(function (resolve, reject) {\n\t        var $script;\n\t        var ready = false;\n\n\t        if (!this.document) {\n\t          resolve(false);\n\t          return;\n\t        }\n\n\t        $script = this.document.createElement(\"script\");\n\t        $script.type = \"text/javascript\";\n\t        $script.async = true;\n\t        $script.src = src;\n\n\t        $script.onload = $script.onreadystatechange = function () {\n\t          if (!ready && (!this.readyState || this.readyState == \"complete\")) {\n\t            ready = true;\n\t            setTimeout(function () {\n\t              resolve(true);\n\t            }, 1);\n\t          }\n\t        };\n\n\t        this.document.head.appendChild($script);\n\t      }.bind(this));\n\t    }\n\t    /**\n\t     * Add a class to the contents container\n\t     * @param {string} className\n\t     */\n\n\t  }, {\n\t    key: \"addClass\",\n\t    value: function addClass(className) {\n\t      var content;\n\t      if (!this.document) return;\n\t      content = this.content || this.document.body;\n\n\t      if (content) {\n\t        content.classList.add(className);\n\t      }\n\t    }\n\t    /**\n\t     * Remove a class from the contents container\n\t     * @param {string} removeClass\n\t     */\n\n\t  }, {\n\t    key: \"removeClass\",\n\t    value: function removeClass(className) {\n\t      var content;\n\t      if (!this.document) return;\n\t      content = this.content || this.document.body;\n\n\t      if (content) {\n\t        content.classList.remove(className);\n\t      }\n\t    }\n\t    /**\n\t     * Add DOM event listeners\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"addEventListeners\",\n\t    value: function addEventListeners() {\n\t      if (!this.document) {\n\t        return;\n\t      }\n\n\t      DOM_EVENTS.forEach(function (eventName) {\n\t        this.document.addEventListener(eventName, this.triggerEvent.bind(this), false);\n\t      }, this);\n\t    }\n\t    /**\n\t     * Remove DOM event listeners\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"removeEventListeners\",\n\t    value: function removeEventListeners() {\n\t      if (!this.document) {\n\t        return;\n\t      }\n\n\t      DOM_EVENTS.forEach(function (eventName) {\n\t        this.document.removeEventListener(eventName, this.triggerEvent, false);\n\t      }, this);\n\t    }\n\t    /**\n\t     * Emit passed browser events\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"triggerEvent\",\n\t    value: function triggerEvent(e) {\n\t      this.emit(e.type, e);\n\t    }\n\t    /**\n\t     * Add listener for text selection\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"addSelectionListeners\",\n\t    value: function addSelectionListeners() {\n\t      if (!this.document) {\n\t        return;\n\t      }\n\n\t      this.document.addEventListener(\"selectionchange\", this.onSelectionChange.bind(this), false);\n\t    }\n\t    /**\n\t     * Remove listener for text selection\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"removeSelectionListeners\",\n\t    value: function removeSelectionListeners() {\n\t      if (!this.document) {\n\t        return;\n\t      }\n\n\t      this.document.removeEventListener(\"selectionchange\", this.onSelectionChange, false);\n\t    }\n\t    /**\n\t     * Handle getting text on selection\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"onSelectionChange\",\n\t    value: function onSelectionChange(e) {\n\t      if (this.selectionEndTimeout) {\n\t        clearTimeout(this.selectionEndTimeout);\n\t      }\n\n\t      this.selectionEndTimeout = setTimeout(function () {\n\t        var selection = this.window.getSelection();\n\t        this.triggerSelectedEvent(selection);\n\t      }.bind(this), 250);\n\t    }\n\t    /**\n\t     * Emit event on text selection\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"triggerSelectedEvent\",\n\t    value: function triggerSelectedEvent(selection) {\n\t      var range, cfirange;\n\n\t      if (selection && selection.rangeCount > 0) {\n\t        range = selection.getRangeAt(0);\n\n\t        if (!range.collapsed) {\n\t          // cfirange = this.section.cfiFromRange(range);\n\t          cfirange = new EpubCFI(range, this.cfiBase).toString();\n\t          this.emit(EVENTS.CONTENTS.SELECTED, cfirange);\n\t          this.emit(EVENTS.CONTENTS.SELECTED_RANGE, range);\n\t        }\n\t      }\n\t    }\n\t    /**\n\t     * Get a Dom Range from EpubCFI\n\t     * @param {EpubCFI} _cfi\n\t     * @param {string} [ignoreClass]\n\t     * @returns {Range} range\n\t     */\n\n\t  }, {\n\t    key: \"range\",\n\t    value: function range(_cfi, ignoreClass) {\n\t      var cfi = new EpubCFI(_cfi);\n\t      return cfi.toRange(this.document, ignoreClass);\n\t    }\n\t    /**\n\t     * Get an EpubCFI from a Dom Range\n\t     * @param {Range} range\n\t     * @param {string} [ignoreClass]\n\t     * @returns {EpubCFI} cfi\n\t     */\n\n\t  }, {\n\t    key: \"cfiFromRange\",\n\t    value: function cfiFromRange(range, ignoreClass) {\n\t      return new EpubCFI(range, this.cfiBase, ignoreClass).toString();\n\t    }\n\t    /**\n\t     * Get an EpubCFI from a Dom node\n\t     * @param {node} node\n\t     * @param {string} [ignoreClass]\n\t     * @returns {EpubCFI} cfi\n\t     */\n\n\t  }, {\n\t    key: \"cfiFromNode\",\n\t    value: function cfiFromNode(node, ignoreClass) {\n\t      return new EpubCFI(node, this.cfiBase, ignoreClass).toString();\n\t    } // TODO: find where this is used - remove?\n\n\t  }, {\n\t    key: \"map\",\n\t    value: function map(layout) {\n\t      var map = new Mapping(layout);\n\t      return map.section();\n\t    }\n\t    /**\n\t     * Size the contents to a given width and height\n\t     * @param {number} [width]\n\t     * @param {number} [height]\n\t     */\n\n\t  }, {\n\t    key: \"size\",\n\t    value: function size(width, height) {\n\t      var viewport = {\n\t        scale: 1.0,\n\t        scalable: \"no\"\n\t      };\n\t      this.layoutStyle(\"scrolling\");\n\n\t      if (width >= 0) {\n\t        this.width(width);\n\t        viewport.width = width;\n\t        this.css(\"padding\", \"0 \" + width / 12 + \"px\");\n\t      }\n\n\t      if (height >= 0) {\n\t        this.height(height);\n\t        viewport.height = height;\n\t      }\n\n\t      this.css(\"margin\", \"0\");\n\t      this.css(\"box-sizing\", \"border-box\");\n\t      this.viewport(viewport);\n\t    }\n\t    /**\n\t     * Apply columns to the contents for pagination\n\t     * @param {number} width\n\t     * @param {number} height\n\t     * @param {number} columnWidth\n\t     * @param {number} gap\n\t     */\n\n\t  }, {\n\t    key: \"columns\",\n\t    value: function columns(width, height, columnWidth, gap) {\n\t      var COLUMN_AXIS = prefixed(\"column-axis\");\n\t      var COLUMN_GAP = prefixed(\"column-gap\");\n\t      var COLUMN_WIDTH = prefixed(\"column-width\");\n\t      var COLUMN_FILL = prefixed(\"column-fill\");\n\t      var writingMode = this.writingMode();\n\t      var axis = writingMode.indexOf(\"vertical\") === 0 ? \"vertical\" : \"horizontal\";\n\t      this.layoutStyle(\"paginated\"); // Fix body width issues if rtl is only set on body element\n\n\t      if (this.content.dir === \"rtl\") {\n\t        this.direction(\"rtl\");\n\t      }\n\n\t      this.width(width);\n\t      this.height(height); // Deal with Mobile trying to scale to viewport\n\n\t      this.viewport({\n\t        width: width,\n\t        height: height,\n\t        scale: 1.0,\n\t        scalable: \"no\"\n\t      }); // TODO: inline-block needs more testing\n\t      // Fixes Safari column cut offs, but causes RTL issues\n\t      // this.css(\"display\", \"inline-block\");\n\n\t      this.css(\"overflow-y\", \"hidden\");\n\t      this.css(\"margin\", \"0\", true);\n\n\t      if (axis === \"vertical\") {\n\t        this.css(\"padding-top\", gap / 2 + \"px\", true);\n\t        this.css(\"padding-bottom\", gap / 2 + \"px\", true);\n\t        this.css(\"padding-left\", \"20px\");\n\t        this.css(\"padding-right\", \"20px\");\n\t      } else {\n\t        this.css(\"padding-top\", \"20px\");\n\t        this.css(\"padding-bottom\", \"20px\");\n\t        this.css(\"padding-left\", gap / 2 + \"px\", true);\n\t        this.css(\"padding-right\", gap / 2 + \"px\", true);\n\t      }\n\n\t      this.css(\"box-sizing\", \"border-box\");\n\t      this.css(\"max-width\", \"inherit\");\n\t      this.css(COLUMN_AXIS, \"horizontal\");\n\t      this.css(COLUMN_FILL, \"auto\");\n\t      this.css(COLUMN_GAP, gap + \"px\");\n\t      this.css(COLUMN_WIDTH, columnWidth + \"px\");\n\t    }\n\t    /**\n\t     * Scale contents from center\n\t     * @param {number} scale\n\t     * @param {number} offsetX\n\t     * @param {number} offsetY\n\t     */\n\n\t  }, {\n\t    key: \"scaler\",\n\t    value: function scaler(scale, offsetX, offsetY) {\n\t      var scaleStr = \"scale(\" + scale + \")\";\n\t      var translateStr = \"\"; // this.css(\"position\", \"absolute\"));\n\n\t      this.css(\"transform-origin\", \"top left\");\n\n\t      if (offsetX >= 0 || offsetY >= 0) {\n\t        translateStr = \" translate(\" + (offsetX || 0) + \"px, \" + (offsetY || 0) + \"px )\";\n\t      }\n\n\t      this.css(\"transform\", scaleStr + translateStr);\n\t    }\n\t    /**\n\t     * Fit contents into a fixed width and height\n\t     * @param {number} width\n\t     * @param {number} height\n\t     */\n\n\t  }, {\n\t    key: \"fit\",\n\t    value: function fit(width, height) {\n\t      var viewport = this.viewport();\n\t      var widthScale = width / parseInt(viewport.width);\n\t      var heightScale = height / parseInt(viewport.height);\n\t      var scale = widthScale < heightScale ? widthScale : heightScale;\n\t      var offsetY = (height - viewport.height * scale) / 2;\n\t      this.layoutStyle(\"paginated\");\n\t      this.width(width);\n\t      this.height(height);\n\t      this.overflow(\"hidden\"); // Scale to the correct size\n\n\t      this.scaler(scale, 0, offsetY);\n\t      this.css(\"background-color\", \"transparent\");\n\t    }\n\t    /**\n\t     * Set the direction of the text\n\t     * @param {string} [dir=\"ltr\"] \"rtl\" | \"ltr\"\n\t     */\n\n\t  }, {\n\t    key: \"direction\",\n\t    value: function direction(dir) {\n\t      if (this.documentElement) {\n\t        this.documentElement.style[\"direction\"] = dir;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"mapPage\",\n\t    value: function mapPage(cfiBase, layout, start, end, dev) {\n\t      var mapping = new Mapping(layout, dev);\n\t      return mapping.page(this, cfiBase, start, end);\n\t    }\n\t    /**\n\t     * Emit event when link in content is clicked\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"linksHandler\",\n\t    value: function linksHandler() {\n\t      var _this2 = this;\n\n\t      replaceLinks(this.content, function (href) {\n\t        _this2.emit(EVENTS.CONTENTS.LINK_CLICKED, href);\n\t      });\n\t    }\n\t    /**\n\t     * Set the writingMode of the text\n\t     * @param {string} [mode=\"horizontal-tb\"] \"horizontal-tb\" | \"vertical-rl\" | \"vertical-lr\"\n\t     */\n\n\t  }, {\n\t    key: \"writingMode\",\n\t    value: function writingMode(mode) {\n\t      var WRITING_MODE = prefixed(\"writing-mode\");\n\n\t      if (mode && this.documentElement) {\n\t        this.documentElement.style[WRITING_MODE] = mode;\n\t      }\n\n\t      return this.window.getComputedStyle(this.documentElement)[WRITING_MODE] || \"\";\n\t    }\n\t    /**\n\t     * Set the layoutStyle of the content\n\t     * @param {string} [style=\"paginated\"] \"scrolling\" | \"paginated\"\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"layoutStyle\",\n\t    value: function layoutStyle(style) {\n\t      if (style) {\n\t        this._layoutStyle = style;\n\t        navigator.epubReadingSystem.layoutStyle = this._layoutStyle;\n\t      }\n\n\t      return this._layoutStyle || \"paginated\";\n\t    }\n\t    /**\n\t     * Add the epubReadingSystem object to the navigator\n\t     * @param {string} name\n\t     * @param {string} version\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"epubReadingSystem\",\n\t    value: function epubReadingSystem(name, version) {\n\t      navigator.epubReadingSystem = {\n\t        name: name,\n\t        version: version,\n\t        layoutStyle: this.layoutStyle(),\n\t        hasFeature: function hasFeature(feature) {\n\t          switch (feature) {\n\t            case \"dom-manipulation\":\n\t              return true;\n\n\t            case \"layout-changes\":\n\t              return true;\n\n\t            case \"touch-events\":\n\t              return true;\n\n\t            case \"mouse-events\":\n\t              return true;\n\n\t            case \"keyboard-events\":\n\t              return true;\n\n\t            case \"spine-scripting\":\n\t              return false;\n\n\t            default:\n\t              return false;\n\t          }\n\t        }\n\t      };\n\t      return navigator.epubReadingSystem;\n\t    }\n\t    /**\n\t     * Add the document identifier before\n\t     * @param  {string} identifier\n\t     */\n\n\t  }, {\n\t    key: \"addIdentifier\",\n\t    value: function addIdentifier(identifier) {\n\t      var meta = this.document.createElement(\"meta\");\n\t      meta.setAttribute(\"name\", \"dc.relation.ispartof\");\n\n\t      if (identifier) {\n\t        meta.setAttribute(\"content\", identifier);\n\t      }\n\n\t      this.document.getElementsByTagName(\"head\")[0].appendChild(meta);\n\t    }\n\t  }, {\n\t    key: \"destroy\",\n\t    value: function destroy() {\n\t      // Stop observing\n\t      if (this.observer) {\n\t        this.observer.disconnect();\n\t      }\n\n\t      this.document.removeEventListener(\"transitionend\", this.resizeCheck);\n\t      this.removeListeners();\n\t    }\n\t  }], [{\n\t    key: \"listenedEvents\",\n\t    get: function get() {\n\t      return DOM_EVENTS;\n\t    }\n\t  }]);\n\n\t  return Contents;\n\t}();\n\n\teventEmitter(Contents.prototype);\n\n\t/**\n\t\t* Handles managing adding & removing Annotations\n\t\t* @param {Rendition} rendition\n\t\t* @class\n\t\t*/\n\n\tvar Annotations =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function Annotations(rendition) {\n\t    classCallCheck(this, Annotations);\n\n\t    this.rendition = rendition;\n\t    this.highlights = [];\n\t    this.underlines = [];\n\t    this.marks = [];\n\t    this._annotations = {};\n\t    this._annotationsBySectionIndex = {};\n\t    this.rendition.hooks.render.register(this.inject.bind(this));\n\t    this.rendition.hooks.unloaded.register(this.clear.bind(this));\n\t  }\n\t  /**\n\t   * Add an annotation to store\n\t   * @param {string} type Type of annotation to add: \"highlight\", \"underline\", \"mark\"\n\t   * @param {EpubCFI} cfiRange EpubCFI range to attach annotation to\n\t   * @param {object} data Data to assign to annotation\n\t   * @param {function} [cb] Callback after annotation is added\n\t   * @param {string} className CSS class to assign to annotation\n\t   * @param {object} styles CSS styles to assign to annotation\n\t   * @returns {Annotation} annotation\n\t   */\n\n\n\t  createClass(Annotations, [{\n\t    key: \"add\",\n\t    value: function add(type, cfiRange, data, cb, className, styles) {\n\t      var hash = encodeURI(cfiRange);\n\t      var cfi = new EpubCFI(cfiRange);\n\t      var sectionIndex = cfi.spinePos;\n\t      var annotation = new Annotation({\n\t        type: type,\n\t        cfiRange: cfiRange,\n\t        data: data,\n\t        sectionIndex: sectionIndex,\n\t        cb: cb,\n\t        className: className,\n\t        styles: styles\n\t      });\n\t      this._annotations[hash] = annotation;\n\n\t      if (sectionIndex in this._annotationsBySectionIndex) {\n\t        this._annotationsBySectionIndex[sectionIndex].push(hash);\n\t      } else {\n\t        this._annotationsBySectionIndex[sectionIndex] = [hash];\n\t      }\n\n\t      var views = this.rendition.views();\n\t      views.forEach(function (view) {\n\t        if (annotation.sectionIndex === view.index) {\n\t          annotation.attach(view);\n\t        }\n\t      });\n\t      return annotation;\n\t    }\n\t    /**\n\t     * Remove an annotation from store\n\t     * @param {EpubCFI} cfiRange EpubCFI range the annotation is attached to\n\t     * @param {string} type Type of annotation to add: \"highlight\", \"underline\", \"mark\"\n\t     */\n\n\t  }, {\n\t    key: \"remove\",\n\t    value: function remove(cfiRange, type) {\n\t      var _this = this;\n\n\t      var hash = encodeURI(cfiRange);\n\n\t      if (hash in this._annotations) {\n\t        var annotation = this._annotations[hash];\n\n\t        if (type && annotation.type !== type) {\n\t          return;\n\t        }\n\n\t        var views = this.rendition.views();\n\t        views.forEach(function (view) {\n\t          _this._removeFromAnnotationBySectionIndex(annotation.sectionIndex, hash);\n\n\t          if (annotation.sectionIndex === view.index) {\n\t            annotation.detach(view);\n\t          }\n\t        });\n\t        delete this._annotations[hash];\n\t      }\n\t    }\n\t    /**\n\t     * Remove an annotations by Section Index\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"_removeFromAnnotationBySectionIndex\",\n\t    value: function _removeFromAnnotationBySectionIndex(sectionIndex, hash) {\n\t      this._annotationsBySectionIndex[sectionIndex] = this._annotationsAt(sectionIndex).filter(function (h) {\n\t        return h !== hash;\n\t      });\n\t    }\n\t    /**\n\t     * Get annotations by Section Index\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"_annotationsAt\",\n\t    value: function _annotationsAt(index) {\n\t      return this._annotationsBySectionIndex[index];\n\t    }\n\t    /**\n\t     * Add a highlight to the store\n\t     * @param {EpubCFI} cfiRange EpubCFI range to attach annotation to\n\t     * @param {object} data Data to assign to annotation\n\t     * @param {function} cb Callback after annotation is added\n\t     * @param {string} className CSS class to assign to annotation\n\t     * @param {object} styles CSS styles to assign to annotation\n\t     */\n\n\t  }, {\n\t    key: \"highlight\",\n\t    value: function highlight(cfiRange, data, cb, className, styles) {\n\t      this.add(\"highlight\", cfiRange, data, cb, className, styles);\n\t    }\n\t    /**\n\t     * Add a underline to the store\n\t     * @param {EpubCFI} cfiRange EpubCFI range to attach annotation to\n\t     * @param {object} data Data to assign to annotation\n\t     * @param {function} cb Callback after annotation is added\n\t     * @param {string} className CSS class to assign to annotation\n\t     * @param {object} styles CSS styles to assign to annotation\n\t     */\n\n\t  }, {\n\t    key: \"underline\",\n\t    value: function underline(cfiRange, data, cb, className, styles) {\n\t      this.add(\"underline\", cfiRange, data, cb, className, styles);\n\t    }\n\t    /**\n\t     * Add a mark to the store\n\t     * @param {EpubCFI} cfiRange EpubCFI range to attach annotation to\n\t     * @param {object} data Data to assign to annotation\n\t     * @param {function} cb Callback after annotation is added\n\t     */\n\n\t  }, {\n\t    key: \"mark\",\n\t    value: function mark(cfiRange, data, cb) {\n\t      this.add(\"mark\", cfiRange, data, cb);\n\t    }\n\t    /**\n\t     * iterate over annotations in the store\n\t     */\n\n\t  }, {\n\t    key: \"each\",\n\t    value: function each() {\n\t      return this._annotations.forEach.apply(this._annotations, arguments);\n\t    }\n\t    /**\n\t     * Hook for injecting annotation into a view\n\t     * @param {View} view\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"inject\",\n\t    value: function inject(view) {\n\t      var _this2 = this;\n\n\t      var sectionIndex = view.index;\n\n\t      if (sectionIndex in this._annotationsBySectionIndex) {\n\t        var annotations = this._annotationsBySectionIndex[sectionIndex];\n\t        annotations.forEach(function (hash) {\n\t          var annotation = _this2._annotations[hash];\n\t          annotation.attach(view);\n\t        });\n\t      }\n\t    }\n\t    /**\n\t     * Hook for removing annotation from a view\n\t     * @param {View} view\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"clear\",\n\t    value: function clear(view) {\n\t      var _this3 = this;\n\n\t      var sectionIndex = view.index;\n\n\t      if (sectionIndex in this._annotationsBySectionIndex) {\n\t        var annotations = this._annotationsBySectionIndex[sectionIndex];\n\t        annotations.forEach(function (hash) {\n\t          var annotation = _this3._annotations[hash];\n\t          annotation.detach(view);\n\t        });\n\t      }\n\t    }\n\t    /**\n\t     * [Not Implemented] Show annotations\n\t     * @TODO: needs implementation in View\n\t     */\n\n\t  }, {\n\t    key: \"show\",\n\t    value: function show() {}\n\t    /**\n\t     * [Not Implemented] Hide annotations\n\t     * @TODO: needs implementation in View\n\t     */\n\n\t  }, {\n\t    key: \"hide\",\n\t    value: function hide() {}\n\t  }]);\n\n\t  return Annotations;\n\t}();\n\t/**\n\t * Annotation object\n\t * @class\n\t * @param {object} options\n\t * @param {string} options.type Type of annotation to add: \"highlight\", \"underline\", \"mark\"\n\t * @param {EpubCFI} options.cfiRange EpubCFI range to attach annotation to\n\t * @param {object} options.data Data to assign to annotation\n\t * @param {int} options.sectionIndex Index in the Spine of the Section annotation belongs to\n\t * @param {function} [options.cb] Callback after annotation is added\n\t * @param {string} className CSS class to assign to annotation\n\t * @param {object} styles CSS styles to assign to annotation\n\t * @returns {Annotation} annotation\n\t */\n\n\n\tvar Annotation =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function Annotation(_ref) {\n\t    var type = _ref.type,\n\t        cfiRange = _ref.cfiRange,\n\t        data = _ref.data,\n\t        sectionIndex = _ref.sectionIndex,\n\t        cb = _ref.cb,\n\t        className = _ref.className,\n\t        styles = _ref.styles;\n\n\t    classCallCheck(this, Annotation);\n\n\t    this.type = type;\n\t    this.cfiRange = cfiRange;\n\t    this.data = data;\n\t    this.sectionIndex = sectionIndex;\n\t    this.mark = undefined;\n\t    this.cb = cb;\n\t    this.className = className;\n\t    this.styles = styles;\n\t  }\n\t  /**\n\t   * Update stored data\n\t   * @param {object} data\n\t   */\n\n\n\t  createClass(Annotation, [{\n\t    key: \"update\",\n\t    value: function update(data) {\n\t      this.data = data;\n\t    }\n\t    /**\n\t     * Add to a view\n\t     * @param {View} view\n\t     */\n\n\t  }, {\n\t    key: \"attach\",\n\t    value: function attach(view) {\n\t      var cfiRange = this.cfiRange,\n\t          data = this.data,\n\t          type = this.type,\n\t          mark = this.mark,\n\t          cb = this.cb,\n\t          className = this.className,\n\t          styles = this.styles;\n\t      var result;\n\n\t      if (type === \"highlight\") {\n\t        result = view.highlight(cfiRange, data, cb, className, styles);\n\t      } else if (type === \"underline\") {\n\t        result = view.underline(cfiRange, data, cb, className, styles);\n\t      } else if (type === \"mark\") {\n\t        result = view.mark(cfiRange, data, cb);\n\t      }\n\n\t      this.mark = result;\n\t      return result;\n\t    }\n\t    /**\n\t     * Remove from a view\n\t     * @param {View} view\n\t     */\n\n\t  }, {\n\t    key: \"detach\",\n\t    value: function detach(view) {\n\t      var cfiRange = this.cfiRange,\n\t          type = this.type;\n\t      var result;\n\n\t      if (view) {\n\t        if (type === \"highlight\") {\n\t          result = view.unhighlight(cfiRange);\n\t        } else if (type === \"underline\") {\n\t          result = view.ununderline(cfiRange);\n\t        } else if (type === \"mark\") {\n\t          result = view.unmark(cfiRange);\n\t        }\n\t      }\n\n\t      this.mark = undefined;\n\t      return result;\n\t    }\n\t    /**\n\t     * [Not Implemented] Get text of an annotation\n\t     * @TODO: needs implementation in contents\n\t     */\n\n\t  }, {\n\t    key: \"text\",\n\t    value: function text() {}\n\t  }]);\n\n\t  return Annotation;\n\t}();\n\n\teventEmitter(Annotation.prototype);\n\n\t/**\n\t * Find Locations for a Book\n\t * @param {Spine} spine\n\t * @param {request} request\n\t * @param {number} [pause=100]\n\t */\n\n\tvar Locations =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function Locations(request, pause) {\n\t    classCallCheck(this, Locations);\n\n\t    this.request = request;\n\t    this.pause = pause || 100;\n\t    this.q = new Queue(this);\n\t    this.epubcfi = new EpubCFI();\n\t    this._locations = [];\n\t    this.total = 0;\n\t    this.break = 150;\n\t    this._current = 0;\n\t    this.currentLocation = \"\";\n\t    this._currentCfi = \"\";\n\t    this.processingTimeout = undefined;\n\t  }\n\t  /**\n\t   * Load all of sections in the book to generate locations\n\t   * @param  {int} chars how many chars to split on\n\t   * @return {object} locations\n\t   */\n\n\n\t  createClass(Locations, [{\n\t    key: \"generate\",\n\t    value: function generate(spine, chars) {\n\t      this.spine = spine;\n\n\t      if (chars) {\n\t        this.break = chars;\n\t      }\n\n\t      this.q.pause();\n\t      this.spine.each(function (section) {\n\t        if (section.linear) {\n\t          this.q.enqueue(this.process.bind(this), section);\n\t        }\n\t      }.bind(this));\n\t      return this.q.run().then(function () {\n\t        this.total = this._locations.length - 1;\n\n\t        if (this._currentCfi) {\n\t          this.currentLocation = this._currentCfi;\n\t        }\n\n\t        return this._locations; // console.log(this.percentage(this.book.rendition.location.start), this.percentage(this.book.rendition.location.end));\n\t      }.bind(this));\n\t    }\n\t  }, {\n\t    key: \"createRange\",\n\t    value: function createRange() {\n\t      return {\n\t        startContainer: undefined,\n\t        startOffset: undefined,\n\t        endContainer: undefined,\n\t        endOffset: undefined\n\t      };\n\t    }\n\t  }, {\n\t    key: \"process\",\n\t    value: function process(section) {\n\t      return section.load(this.request).then(function (contents) {\n\t        var completed = new defer();\n\t        var locations = this.parse(contents, section.cfiBase);\n\t        this._locations = this._locations.concat(locations);\n\t        section.unload();\n\t        this.processingTimeout = setTimeout(function () {\n\t          return completed.resolve(locations);\n\t        }, this.pause);\n\t        return completed.promise;\n\t      }.bind(this));\n\t    }\n\t  }, {\n\t    key: \"parse\",\n\t    value: function parse$$1(contents, cfiBase, chars) {\n\t      var locations = [];\n\t      var range;\n\t      var doc = contents.ownerDocument;\n\t      var body = qs(doc, \"body\");\n\t      var counter = 0;\n\t      var prev;\n\n\t      var _break = chars || this.break;\n\n\t      var parser = function parser(node) {\n\t        var len = node.length;\n\t        var dist;\n\t        var pos = 0;\n\n\t        if (node.textContent.trim().length === 0) {\n\t          return false; // continue\n\t        } // Start range\n\n\n\t        if (counter == 0) {\n\t          range = this.createRange();\n\t          range.startContainer = node;\n\t          range.startOffset = 0;\n\t        }\n\n\t        dist = _break - counter; // Node is smaller than a break,\n\t        // skip over it\n\n\t        if (dist > len) {\n\t          counter += len;\n\t          pos = len;\n\t        }\n\n\t        while (pos < len) {\n\t          dist = _break - counter;\n\n\t          if (counter === 0) {\n\t            // Start new range\n\t            pos += 1;\n\t            range = this.createRange();\n\t            range.startContainer = node;\n\t            range.startOffset = pos;\n\t          } // pos += dist;\n\t          // Gone over\n\n\n\t          if (pos + dist >= len) {\n\t            // Continue counter for next node\n\t            counter += len - pos; // break\n\n\t            pos = len; // At End\n\t          } else {\n\t            // Advance pos\n\t            pos += dist; // End the previous range\n\n\t            range.endContainer = node;\n\t            range.endOffset = pos; // cfi = section.cfiFromRange(range);\n\n\t            var cfi = new EpubCFI(range, cfiBase).toString();\n\t            locations.push(cfi);\n\t            counter = 0;\n\t          }\n\t        }\n\n\t        prev = node;\n\t      };\n\n\t      sprint(body, parser.bind(this)); // Close remaining\n\n\t      if (range && range.startContainer && prev) {\n\t        range.endContainer = prev;\n\t        range.endOffset = prev.length;\n\t        var cfi = new EpubCFI(range, cfiBase).toString();\n\t        locations.push(cfi);\n\t        counter = 0;\n\t      }\n\n\t      return locations;\n\t    }\n\t    /**\n\t     * Get a location from an EpubCFI\n\t     * @param {EpubCFI} cfi\n\t     * @return {number}\n\t     */\n\n\t  }, {\n\t    key: \"locationFromCfi\",\n\t    value: function locationFromCfi(cfi) {\n\t      var loc;\n\n\t      if (EpubCFI.prototype.isCfiString(cfi)) {\n\t        cfi = new EpubCFI(cfi);\n\t      } // Check if the location has not been set yet\n\n\n\t      if (this._locations.length === 0) {\n\t        return -1;\n\t      }\n\n\t      loc = locationOf(cfi, this._locations, this.epubcfi.compare);\n\n\t      if (loc > this.total) {\n\t        return this.total;\n\t      }\n\n\t      return loc;\n\t    }\n\t    /**\n\t     * Get a percentage position in locations from an EpubCFI\n\t     * @param {EpubCFI} cfi\n\t     * @return {number}\n\t     */\n\n\t  }, {\n\t    key: \"percentageFromCfi\",\n\t    value: function percentageFromCfi(cfi) {\n\t      if (this._locations.length === 0) {\n\t        return null;\n\t      } // Find closest cfi\n\n\n\t      var loc = this.locationFromCfi(cfi); // Get percentage in total\n\n\t      return this.percentageFromLocation(loc);\n\t    }\n\t    /**\n\t     * Get a percentage position from a location index\n\t     * @param {number} location\n\t     * @return {number}\n\t     */\n\n\t  }, {\n\t    key: \"percentageFromLocation\",\n\t    value: function percentageFromLocation(loc) {\n\t      if (!loc || !this.total) {\n\t        return 0;\n\t      }\n\n\t      return loc / this.total;\n\t    }\n\t    /**\n\t     * Get an EpubCFI from location index\n\t     * @param {number} loc\n\t     * @return {EpubCFI} cfi\n\t     */\n\n\t  }, {\n\t    key: \"cfiFromLocation\",\n\t    value: function cfiFromLocation(loc) {\n\t      var cfi = -1; // check that pg is an int\n\n\t      if (typeof loc != \"number\") {\n\t        loc = parseInt(loc);\n\t      }\n\n\t      if (loc >= 0 && loc < this._locations.length) {\n\t        cfi = this._locations[loc];\n\t      }\n\n\t      return cfi;\n\t    }\n\t    /**\n\t     * Get an EpubCFI from location percentage\n\t     * @param {number} percentage\n\t     * @return {EpubCFI} cfi\n\t     */\n\n\t  }, {\n\t    key: \"cfiFromPercentage\",\n\t    value: function cfiFromPercentage(percentage) {\n\t      var loc;\n\n\t      if (percentage > 1) {\n\t        console.warn(\"Normalize cfiFromPercentage value to between 0 - 1\");\n\t      } // Make sure 1 goes to very end\n\n\n\t      if (percentage >= 1) {\n\t        var cfi = new EpubCFI(this._locations[this.total]);\n\t        cfi.collapse();\n\t        return cfi.toString();\n\t      }\n\n\t      loc = Math.ceil(this.total * percentage);\n\t      return this.cfiFromLocation(loc);\n\t    }\n\t    /**\n\t     * Load locations from JSON\n\t     * @param {json} locations\n\t     */\n\n\t  }, {\n\t    key: \"load\",\n\t    value: function load(locations) {\n\t      if (typeof locations === \"string\") {\n\t        this._locations = JSON.parse(locations);\n\t      } else {\n\t        this._locations = locations;\n\t      }\n\n\t      this.total = this._locations.length - 1;\n\t      return this._locations;\n\t    }\n\t    /**\n\t     * Save locations to JSON\n\t     * @alias toJSON\n\t     * @return {json}\n\t     */\n\n\t  }, {\n\t    key: \"save\",\n\t    value: function save() {\n\t      return this.toJSON();\n\t    }\n\t  }, {\n\t    key: \"getCurrent\",\n\t    value: function getCurrent() {\n\t      return this._current;\n\t    }\n\t  }, {\n\t    key: \"setCurrent\",\n\t    value: function setCurrent(curr) {\n\t      var loc;\n\n\t      if (typeof curr == \"string\") {\n\t        this._currentCfi = curr;\n\t      } else if (typeof curr == \"number\") {\n\t        this._current = curr;\n\t      } else {\n\t        return;\n\t      }\n\n\t      if (this._locations.length === 0) {\n\t        return;\n\t      }\n\n\t      if (typeof curr == \"string\") {\n\t        loc = this.locationFromCfi(curr);\n\t        this._current = loc;\n\t      } else {\n\t        loc = curr;\n\t      }\n\n\t      this.emit(EVENTS.LOCATIONS.CHANGED, {\n\t        percentage: this.percentageFromLocation(loc)\n\t      });\n\t    }\n\t    /**\n\t     * Get the current location\n\t     */\n\n\t  }, {\n\t    key: \"length\",\n\n\t    /**\n\t     * Locations length\n\t     */\n\t    value: function length() {\n\t      return this._locations.length;\n\t    }\n\t    /**\n\t     * Export locations as an Array\n\t     * @return {array}\n\t     */\n\n\t  }, {\n\t    key: \"toArray\",\n\t    value: function toArray() {\n\t      return this._locations;\n\t    }\n\t    /**\n\t     * Export locations as JSON\n\t     * @return {json}\n\t     */\n\n\t  }, {\n\t    key: \"toJSON\",\n\t    value: function toJSON() {\n\t      return JSON.stringify(this._locations);\n\t    }\n\t  }, {\n\t    key: \"destroy\",\n\t    value: function destroy() {\n\t      this.spine = undefined;\n\t      this.request = undefined;\n\t      this.pause = undefined;\n\t      this.q.stop();\n\t      this.q = undefined;\n\t      this.epubcfi = undefined;\n\t      this._locations = undefined;\n\t      this.total = undefined;\n\t      this.break = undefined;\n\t      this._current = undefined;\n\t      this.currentLocation = undefined;\n\t      this._currentCfi = undefined;\n\t      clearTimeout(this.processingTimeout);\n\t    }\n\t  }, {\n\t    key: \"currentLocation\",\n\t    get: function get() {\n\t      return this._current;\n\t    }\n\t    /**\n\t     * Set the current location\n\t     */\n\t    ,\n\t    set: function set(curr) {\n\t      this.setCurrent(curr);\n\t    }\n\t  }]);\n\n\t  return Locations;\n\t}();\n\n\teventEmitter(Locations.prototype);\n\n\t/**\n\t * Page List Parser\n\t * @param {document} [xml]\n\t */\n\n\tvar PageList =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function PageList(xml) {\n\t    classCallCheck(this, PageList);\n\n\t    this.pages = [];\n\t    this.locations = [];\n\t    this.epubcfi = new EpubCFI();\n\t    this.firstPage = 0;\n\t    this.lastPage = 0;\n\t    this.totalPages = 0;\n\t    this.toc = undefined;\n\t    this.ncx = undefined;\n\n\t    if (xml) {\n\t      this.pageList = this.parse(xml);\n\t    }\n\n\t    if (this.pageList && this.pageList.length) {\n\t      this.process(this.pageList);\n\t    }\n\t  }\n\t  /**\n\t   * Parse PageList Xml\n\t   * @param  {document} xml\n\t   */\n\n\n\t  createClass(PageList, [{\n\t    key: \"parse\",\n\t    value: function parse$$1(xml) {\n\t      var html = qs(xml, \"html\");\n\t      var ncx = qs(xml, \"ncx\");\n\n\t      if (html) {\n\t        return this.parseNav(xml);\n\t      } else if (ncx) {\n\t        // Not supported\n\t        // return this.parseNcx(xml);\n\t        return;\n\t      }\n\t    }\n\t    /**\n\t     * Parse a Nav PageList\n\t     * @private\n\t     * @param  {node} navHtml\n\t     * @return {PageList.item[]} list\n\t     */\n\n\t  }, {\n\t    key: \"parseNav\",\n\t    value: function parseNav(navHtml) {\n\t      var navElement = querySelectorByType(navHtml, \"nav\", \"page-list\");\n\t      var navItems = navElement ? qsa(navElement, \"li\") : [];\n\t      var length = navItems.length;\n\t      var i;\n\t      var list = [];\n\t      var item;\n\t      if (!navItems || length === 0) return list;\n\n\t      for (i = 0; i < length; ++i) {\n\t        item = this.item(navItems[i]);\n\t        list.push(item);\n\t      }\n\n\t      return list;\n\t    }\n\t    /**\n\t     * Page List Item\n\t     * @private\n\t     * @param  {node} item\n\t     * @return {object} pageListItem\n\t     */\n\n\t  }, {\n\t    key: \"item\",\n\t    value: function item(_item) {\n\t      var content = qs(_item, \"a\"),\n\t          href = content.getAttribute(\"href\") || \"\",\n\t          text = content.textContent || \"\",\n\t          page = parseInt(text),\n\t          isCfi = href.indexOf(\"epubcfi\"),\n\t          split,\n\t          packageUrl,\n\t          cfi;\n\n\t      if (isCfi != -1) {\n\t        split = href.split(\"#\");\n\t        packageUrl = split[0];\n\t        cfi = split.length > 1 ? split[1] : false;\n\t        return {\n\t          \"cfi\": cfi,\n\t          \"href\": href,\n\t          \"packageUrl\": packageUrl,\n\t          \"page\": page\n\t        };\n\t      } else {\n\t        return {\n\t          \"href\": href,\n\t          \"page\": page\n\t        };\n\t      }\n\t    }\n\t    /**\n\t     * Process pageList items\n\t     * @private\n\t     * @param  {array} pageList\n\t     */\n\n\t  }, {\n\t    key: \"process\",\n\t    value: function process(pageList) {\n\t      pageList.forEach(function (item) {\n\t        this.pages.push(item.page);\n\n\t        if (item.cfi) {\n\t          this.locations.push(item.cfi);\n\t        }\n\t      }, this);\n\t      this.firstPage = parseInt(this.pages[0]);\n\t      this.lastPage = parseInt(this.pages[this.pages.length - 1]);\n\t      this.totalPages = this.lastPage - this.firstPage;\n\t    }\n\t    /**\n\t     * Get a PageList result from a EpubCFI\n\t     * @param  {string} cfi EpubCFI String\n\t     * @return {number} page\n\t     */\n\n\t  }, {\n\t    key: \"pageFromCfi\",\n\t    value: function pageFromCfi(cfi) {\n\t      var pg = -1; // Check if the pageList has not been set yet\n\n\t      if (this.locations.length === 0) {\n\t        return -1;\n\t      } // TODO: check if CFI is valid?\n\t      // check if the cfi is in the location list\n\t      // var index = this.locations.indexOf(cfi);\n\n\n\t      var index = indexOfSorted$1(cfi, this.locations, this.epubcfi.compare);\n\n\t      if (index != -1) {\n\t        pg = this.pages[index];\n\t      } else {\n\t        // Otherwise add it to the list of locations\n\t        // Insert it in the correct position in the locations page\n\t        //index = EPUBJS.core.insert(cfi, this.locations, this.epubcfi.compare);\n\t        index = locationOf(cfi, this.locations, this.epubcfi.compare); // Get the page at the location just before the new one, or return the first\n\n\t        pg = index - 1 >= 0 ? this.pages[index - 1] : this.pages[0];\n\n\t        if (pg !== undefined) ; else {\n\t          pg = -1;\n\t        }\n\t      }\n\n\t      return pg;\n\t    }\n\t    /**\n\t     * Get an EpubCFI from a Page List Item\n\t     * @param  {string | number} pg\n\t     * @return {string} cfi\n\t     */\n\n\t  }, {\n\t    key: \"cfiFromPage\",\n\t    value: function cfiFromPage(pg) {\n\t      var cfi = -1; // check that pg is an int\n\n\t      if (typeof pg != \"number\") {\n\t        pg = parseInt(pg);\n\t      } // check if the cfi is in the page list\n\t      // Pages could be unsorted.\n\n\n\t      var index = this.pages.indexOf(pg);\n\n\t      if (index != -1) {\n\t        cfi = this.locations[index];\n\t      } // TODO: handle pages not in the list\n\n\n\t      return cfi;\n\t    }\n\t    /**\n\t     * Get a Page from Book percentage\n\t     * @param  {number} percent\n\t     * @return {number} page\n\t     */\n\n\t  }, {\n\t    key: \"pageFromPercentage\",\n\t    value: function pageFromPercentage(percent) {\n\t      var pg = Math.round(this.totalPages * percent);\n\t      return pg;\n\t    }\n\t    /**\n\t     * Returns a value between 0 - 1 corresponding to the location of a page\n\t     * @param  {number} pg the page\n\t     * @return {number} percentage\n\t     */\n\n\t  }, {\n\t    key: \"percentageFromPage\",\n\t    value: function percentageFromPage(pg) {\n\t      var percentage = (pg - this.firstPage) / this.totalPages;\n\t      return Math.round(percentage * 1000) / 1000;\n\t    }\n\t    /**\n\t     * Returns a value between 0 - 1 corresponding to the location of a cfi\n\t     * @param  {string} cfi EpubCFI String\n\t     * @return {number} percentage\n\t     */\n\n\t  }, {\n\t    key: \"percentageFromCfi\",\n\t    value: function percentageFromCfi(cfi) {\n\t      var pg = this.pageFromCfi(cfi);\n\t      var percentage = this.percentageFromPage(pg);\n\t      return percentage;\n\t    }\n\t    /**\n\t     * Export pages as an Array\n\t     * @return {array}\n\t     */\n\n\t  }, {\n\t    key: \"toArray\",\n\t    value: function toArray() {\n\t      return this.locations;\n\t    }\n\t    /**\n\t     * Export pages as JSON\n\t     * @return {json}\n\t     */\n\n\t  }, {\n\t    key: \"toJSON\",\n\t    value: function toJSON() {\n\t      return JSON.stringify(this.locations);\n\t    }\n\t    /**\n\t     * Destroy\n\t     */\n\n\t  }, {\n\t    key: \"destroy\",\n\t    value: function destroy() {\n\t      this.pages = undefined;\n\t      this.locations = undefined;\n\t      this.epubcfi = undefined;\n\t      this.pageList = undefined;\n\t      this.toc = undefined;\n\t      this.ncx = undefined;\n\t    }\n\t  }]);\n\n\t  return PageList;\n\t}();\n\n\t/**\n\t * Handles Parsing and Accessing an Epub Container\n\t * @class\n\t * @param {document} [containerDocument] xml document\n\t */\n\n\tvar Container =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function Container(containerDocument) {\n\t    classCallCheck(this, Container);\n\n\t    this.packagePath = \"\";\n\t    this.directory = \"\";\n\t    this.encoding = \"\";\n\n\t    if (containerDocument) {\n\t      this.parse(containerDocument);\n\t    }\n\t  }\n\t  /**\n\t   * Parse the Container XML\n\t   * @param  {document} containerDocument\n\t   */\n\n\n\t  createClass(Container, [{\n\t    key: \"parse\",\n\t    value: function parse$$1(containerDocument) {\n\t      //-- <rootfile full-path=\"OPS/package.opf\" media-type=\"application/oebps-package+xml\"/>\n\t      var rootfile;\n\n\t      if (!containerDocument) {\n\t        throw new Error(\"Container File Not Found\");\n\t      }\n\n\t      rootfile = qs(containerDocument, \"rootfile\");\n\n\t      if (!rootfile) {\n\t        throw new Error(\"No RootFile Found\");\n\t      }\n\n\t      this.packagePath = rootfile.getAttribute(\"full-path\");\n\t      this.directory = path.dirname(this.packagePath);\n\t      this.encoding = containerDocument.xmlEncoding;\n\t    }\n\t  }, {\n\t    key: \"destroy\",\n\t    value: function destroy() {\n\t      this.packagePath = undefined;\n\t      this.directory = undefined;\n\t      this.encoding = undefined;\n\t    }\n\t  }]);\n\n\t  return Container;\n\t}();\n\n\t/**\n\t * Open Packaging Format Parser\n\t * @class\n\t * @param {document} packageDocument OPF XML\n\t */\n\n\tvar Packaging =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function Packaging(packageDocument) {\n\t    classCallCheck(this, Packaging);\n\n\t    this.manifest = {};\n\t    this.navPath = \"\";\n\t    this.ncxPath = \"\";\n\t    this.coverPath = \"\";\n\t    this.spineNodeIndex = 0;\n\t    this.spine = [];\n\t    this.metadata = {};\n\n\t    if (packageDocument) {\n\t      this.parse(packageDocument);\n\t    }\n\t  }\n\t  /**\n\t   * Parse OPF XML\n\t   * @param  {document} packageDocument OPF XML\n\t   * @return {object} parsed package parts\n\t   */\n\n\n\t  createClass(Packaging, [{\n\t    key: \"parse\",\n\t    value: function parse$$1(packageDocument) {\n\t      var metadataNode, manifestNode, spineNode;\n\n\t      if (!packageDocument) {\n\t        throw new Error(\"Package File Not Found\");\n\t      }\n\n\t      metadataNode = qs(packageDocument, \"metadata\");\n\n\t      if (!metadataNode) {\n\t        throw new Error(\"No Metadata Found\");\n\t      }\n\n\t      manifestNode = qs(packageDocument, \"manifest\");\n\n\t      if (!manifestNode) {\n\t        throw new Error(\"No Manifest Found\");\n\t      }\n\n\t      spineNode = qs(packageDocument, \"spine\");\n\n\t      if (!spineNode) {\n\t        throw new Error(\"No Spine Found\");\n\t      }\n\n\t      this.manifest = this.parseManifest(manifestNode);\n\t      this.navPath = this.findNavPath(manifestNode);\n\t      this.ncxPath = this.findNcxPath(manifestNode, spineNode);\n\t      this.coverPath = this.findCoverPath(packageDocument);\n\t      this.spineNodeIndex = indexOfElementNode(spineNode);\n\t      this.spine = this.parseSpine(spineNode, this.manifest);\n\t      this.metadata = this.parseMetadata(metadataNode);\n\t      this.metadata.direction = spineNode.getAttribute(\"page-progression-direction\");\n\t      return {\n\t        \"metadata\": this.metadata,\n\t        \"spine\": this.spine,\n\t        \"manifest\": this.manifest,\n\t        \"navPath\": this.navPath,\n\t        \"ncxPath\": this.ncxPath,\n\t        \"coverPath\": this.coverPath,\n\t        \"spineNodeIndex\": this.spineNodeIndex\n\t      };\n\t    }\n\t    /**\n\t     * Parse Metadata\n\t     * @private\n\t     * @param  {node} xml\n\t     * @return {object} metadata\n\t     */\n\n\t  }, {\n\t    key: \"parseMetadata\",\n\t    value: function parseMetadata(xml) {\n\t      var metadata = {};\n\t      metadata.title = this.getElementText(xml, \"title\");\n\t      metadata.creator = this.getElementText(xml, \"creator\");\n\t      metadata.description = this.getElementText(xml, \"description\");\n\t      metadata.pubdate = this.getElementText(xml, \"date\");\n\t      metadata.publisher = this.getElementText(xml, \"publisher\");\n\t      metadata.identifier = this.getElementText(xml, \"identifier\");\n\t      metadata.language = this.getElementText(xml, \"language\");\n\t      metadata.rights = this.getElementText(xml, \"rights\");\n\t      metadata.modified_date = this.getPropertyText(xml, \"dcterms:modified\");\n\t      metadata.layout = this.getPropertyText(xml, \"rendition:layout\");\n\t      metadata.orientation = this.getPropertyText(xml, \"rendition:orientation\");\n\t      metadata.flow = this.getPropertyText(xml, \"rendition:flow\");\n\t      metadata.viewport = this.getPropertyText(xml, \"rendition:viewport\");\n\t      metadata.media_active_class = this.getPropertyText(xml, \"media:active-class\");\n\t      return metadata;\n\t    }\n\t    /**\n\t     * Parse Manifest\n\t     * @private\n\t     * @param  {node} manifestXml\n\t     * @return {object} manifest\n\t     */\n\n\t  }, {\n\t    key: \"parseManifest\",\n\t    value: function parseManifest(manifestXml) {\n\t      var manifest = {}; //-- Turn items into an array\n\n\t      var selected = qsa(manifestXml, \"item\");\n\t      var items = Array.prototype.slice.call(selected); //-- Create an object with the id as key\n\n\t      items.forEach(function (item) {\n\t        var id = item.getAttribute(\"id\"),\n\t            href = item.getAttribute(\"href\") || \"\",\n\t            type$$1 = item.getAttribute(\"media-type\") || \"\",\n\t            overlay = item.getAttribute(\"media-overlay\") || \"\",\n\t            properties = item.getAttribute(\"properties\") || \"\";\n\t        manifest[id] = {\n\t          \"href\": href,\n\t          \"type\": type$$1,\n\t          \"overlay\": overlay,\n\t          \"properties\": properties.length ? properties.split(\" \") : []\n\t        };\n\t      });\n\t      return manifest;\n\t    }\n\t    /**\n\t     * Parse Spine\n\t     * @private\n\t     * @param  {node} spineXml\n\t     * @param  {Packaging.manifest} manifest\n\t     * @return {object} spine\n\t     */\n\n\t  }, {\n\t    key: \"parseSpine\",\n\t    value: function parseSpine(spineXml, manifest) {\n\t      var spine = [];\n\t      var selected = qsa(spineXml, \"itemref\");\n\t      var items = Array.prototype.slice.call(selected); // var epubcfi = new EpubCFI();\n\t      //-- Add to array to mantain ordering and cross reference with manifest\n\n\t      items.forEach(function (item, index) {\n\t        var idref = item.getAttribute(\"idref\"); // var cfiBase = epubcfi.generateChapterComponent(spineNodeIndex, index, Id);\n\n\t        var props = item.getAttribute(\"properties\") || \"\";\n\t        var propArray = props.length ? props.split(\" \") : []; // var manifestProps = manifest[Id].properties;\n\t        // var manifestPropArray = manifestProps.length ? manifestProps.split(\" \") : [];\n\n\t        var itemref = {\n\t          \"idref\": idref,\n\t          \"linear\": item.getAttribute(\"linear\") || \"yes\",\n\t          \"properties\": propArray,\n\t          // \"href\" : manifest[Id].href,\n\t          // \"url\" :  manifest[Id].url,\n\t          \"index\": index // \"cfiBase\" : cfiBase\n\n\t        };\n\t        spine.push(itemref);\n\t      });\n\t      return spine;\n\t    }\n\t    /**\n\t     * Find TOC NAV\n\t     * @private\n\t     * @param {element} manifestNode\n\t     * @return {string}\n\t     */\n\n\t  }, {\n\t    key: \"findNavPath\",\n\t    value: function findNavPath(manifestNode) {\n\t      // Find item with property \"nav\"\n\t      // Should catch nav irregardless of order\n\t      var node = qsp(manifestNode, \"item\", {\n\t        \"properties\": \"nav\"\n\t      });\n\t      return node ? node.getAttribute(\"href\") : false;\n\t    }\n\t    /**\n\t     * Find TOC NCX\n\t     * media-type=\"application/x-dtbncx+xml\" href=\"toc.ncx\"\n\t     * @private\n\t     * @param {element} manifestNode\n\t     * @param {element} spineNode\n\t     * @return {string}\n\t     */\n\n\t  }, {\n\t    key: \"findNcxPath\",\n\t    value: function findNcxPath(manifestNode, spineNode) {\n\t      var node = qsp(manifestNode, \"item\", {\n\t        \"media-type\": \"application/x-dtbncx+xml\"\n\t      });\n\t      var tocId; // If we can't find the toc by media-type then try to look for id of the item in the spine attributes as\n\t      // according to http://www.idpf.org/epub/20/spec/OPF_2.0.1_draft.htm#Section2.4.1.2,\n\t      // \"The item that describes the NCX must be referenced by the spine toc attribute.\"\n\n\t      if (!node) {\n\t        tocId = spineNode.getAttribute(\"toc\");\n\n\t        if (tocId) {\n\t          // node = manifestNode.querySelector(\"item[id='\" + tocId + \"']\");\n\t          node = manifestNode.getElementById(tocId);\n\t        }\n\t      }\n\n\t      return node ? node.getAttribute(\"href\") : false;\n\t    }\n\t    /**\n\t     * Find the Cover Path\n\t     * <item properties=\"cover-image\" id=\"ci\" href=\"cover.svg\" media-type=\"image/svg+xml\" />\n\t     * Fallback for Epub 2.0\n\t     * @private\n\t     * @param  {node} packageXml\n\t     * @return {string} href\n\t     */\n\n\t  }, {\n\t    key: \"findCoverPath\",\n\t    value: function findCoverPath(packageXml) {\n\t      var pkg = qs(packageXml, \"package\");\n\t      var epubVersion = pkg.getAttribute(\"version\");\n\n\t      if (epubVersion === \"2.0\") {\n\t        var metaCover = qsp(packageXml, \"meta\", {\n\t          \"name\": \"cover\"\n\t        });\n\n\t        if (metaCover) {\n\t          var coverId = metaCover.getAttribute(\"content\");\n\t          var cover = packageXml.getElementById(coverId);\n\t          return cover ? cover.getAttribute(\"href\") : \"\";\n\t        } else {\n\t          return false;\n\t        }\n\t      } else {\n\t        var node = qsp(packageXml, \"item\", {\n\t          \"properties\": \"cover-image\"\n\t        });\n\t        return node ? node.getAttribute(\"href\") : \"\";\n\t      }\n\t    }\n\t    /**\n\t     * Get text of a namespaced element\n\t     * @private\n\t     * @param  {node} xml\n\t     * @param  {string} tag\n\t     * @return {string} text\n\t     */\n\n\t  }, {\n\t    key: \"getElementText\",\n\t    value: function getElementText(xml, tag) {\n\t      var found = xml.getElementsByTagNameNS(\"http://purl.org/dc/elements/1.1/\", tag);\n\t      var el;\n\t      if (!found || found.length === 0) return \"\";\n\t      el = found[0];\n\n\t      if (el.childNodes.length) {\n\t        return el.childNodes[0].nodeValue;\n\t      }\n\n\t      return \"\";\n\t    }\n\t    /**\n\t     * Get text by property\n\t     * @private\n\t     * @param  {node} xml\n\t     * @param  {string} property\n\t     * @return {string} text\n\t     */\n\n\t  }, {\n\t    key: \"getPropertyText\",\n\t    value: function getPropertyText(xml, property) {\n\t      var el = qsp(xml, \"meta\", {\n\t        \"property\": property\n\t      });\n\n\t      if (el && el.childNodes.length) {\n\t        return el.childNodes[0].nodeValue;\n\t      }\n\n\t      return \"\";\n\t    }\n\t    /**\n\t     * Load JSON Manifest\n\t     * @param  {document} packageDocument OPF XML\n\t     * @return {object} parsed package parts\n\t     */\n\n\t  }, {\n\t    key: \"load\",\n\t    value: function load(json) {\n\t      var _this = this;\n\n\t      this.metadata = json.metadata;\n\t      this.spine = json.spine.map(function (item, index) {\n\t        var id = item.idref;\n\n\t        if (!id) {\n\t          item.idref = encodeURIComponent(item.href);\n\t        }\n\n\t        if (typeof item.linear === \"undefined\") {\n\t          item.linear = \"yes\";\n\t        }\n\n\t        if (item.rel && item.rel[0] === \"cover\") {\n\t          _this.coverPath = item.href;\n\t        }\n\n\t        item.index = index;\n\t        _this.manifest[item.idref] = item;\n\t        return item;\n\t      });\n\n\t      if (json.resources) {\n\t        json.resources.forEach(function (item) {\n\t          var id = item.id || item.href;\n\t          _this.manifest[id] = item;\n\n\t          if (item.rel && item.rel[0] === \"cover\") {\n\t            _this.coverPath = item.href;\n\t          }\n\t        });\n\t      }\n\n\t      this.spineNodeIndex = 0;\n\t      this.toc = json.toc;\n\t      return {\n\t        \"metadata\": this.metadata,\n\t        \"spine\": this.spine,\n\t        \"manifest\": this.manifest,\n\t        \"navPath\": this.navPath,\n\t        \"ncxPath\": this.ncxPath,\n\t        \"coverPath\": this.coverPath,\n\t        \"spineNodeIndex\": this.spineNodeIndex,\n\t        \"toc\": this.toc\n\t      };\n\t    }\n\t  }, {\n\t    key: \"destroy\",\n\t    value: function destroy() {\n\t      this.manifest = undefined;\n\t      this.navPath = undefined;\n\t      this.ncxPath = undefined;\n\t      this.coverPath = undefined;\n\t      this.spineNodeIndex = undefined;\n\t      this.spine = undefined;\n\t      this.metadata = undefined;\n\t    }\n\t  }]);\n\n\t  return Packaging;\n\t}();\n\n\t/**\n\t * Navigation Parser\n\t * @param {document} xml navigation html / xhtml / ncx\n\t */\n\n\tvar Navigation$1 =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function Navigation(xml, url) {\n\t    classCallCheck(this, Navigation);\n\n\t    this.toc = [];\n\t    this.tocByHref = {};\n\t    this.tocById = {};\n\t    this.landmarks = [];\n\t    this.landmarksByType = {};\n\t    this.length = 0;\n\t    this.url = url || \"\";\n\n\t    if (xml) {\n\t      this.parse(xml);\n\t    }\n\t  }\n\t  /**\n\t   * Parse out the navigation items\n\t   * @param {document} xml navigation html / xhtml / ncx\n\t   */\n\n\n\t  createClass(Navigation, [{\n\t    key: \"parse\",\n\t    value: function parse$$1(xml) {\n\t      var isXml$$1 = xml.nodeType;\n\t      var html;\n\t      var ncx;\n\n\t      if (isXml$$1) {\n\t        html = qs(xml, \"html\");\n\t        ncx = qs(xml, \"ncx\");\n\t      }\n\n\t      if (!isXml$$1) {\n\t        this.toc = this.load(xml);\n\t      } else if (html) {\n\t        this.toc = this.parseNav(xml);\n\t        this.landmarks = this.parseLandmarks(xml);\n\t      } else if (ncx) {\n\t        this.toc = this.parseNcx(xml);\n\t      }\n\n\t      this.length = 0;\n\t      this.unpack(this.toc);\n\t    }\n\t    /**\n\t     * Unpack navigation items\n\t     * @private\n\t     * @param  {array} toc\n\t     */\n\n\t  }, {\n\t    key: \"unpack\",\n\t    value: function unpack(toc) {\n\t      var item;\n\t      var href;\n\n\t      for (var i = 0; i < toc.length; i++) {\n\t        item = toc[i];\n\t        href = item.href;\n\n\t        if (item.href) {\n\t          this.tocByHref[href] = i;\n\t        }\n\n\t        if (item.id) {\n\t          this.tocById[href] = i;\n\t        }\n\n\t        this.length++;\n\n\t        if (item.children.length) {\n\t          this.unpack(item.children);\n\t        }\n\t      }\n\t    }\n\t    /**\n\t     * Get an item from the navigation\n\t     * @param  {string} target\n\t     * @return {object} navItem\n\t     */\n\n\t  }, {\n\t    key: \"get\",\n\t    value: function get(target) {\n\t      var index;\n\n\t      if (!target) {\n\t        return this.toc;\n\t      }\n\n\t      if (target.indexOf(\"#\") === 0) {\n\t        index = this.tocById[target.substring(1)];\n\t      } else if (target in this.tocByHref) {\n\t        index = this.tocByHref[target];\n\t      }\n\n\t      return this.toc[index];\n\t    }\n\t    /**\n\t     * Get a landmark by type\n\t     * List of types: https://idpf.github.io/epub-vocabs/structure/\n\t     * @param  {string} type\n\t     * @return {object} landmarkItem\n\t     */\n\n\t  }, {\n\t    key: \"landmark\",\n\t    value: function landmark(type$$1) {\n\t      var index;\n\n\t      if (!type$$1) {\n\t        return this.landmarks;\n\t      }\n\n\t      index = this.landmarksByType[type$$1];\n\t      return this.landmarks[index];\n\t    }\n\t    /**\n\t     * Parse toc from a Epub > 3.0 Nav\n\t     * @private\n\t     * @param  {document} navHtml\n\t     * @return {array} navigation list\n\t     */\n\n\t  }, {\n\t    key: \"parseNav\",\n\t    value: function parseNav(navHtml) {\n\t      var navElement = querySelectorByType(navHtml, \"nav\", \"toc\");\n\t      var navItems = navElement ? qsa(navElement, \"li\") : [];\n\t      var length = navItems.length;\n\t      var i;\n\t      var toc = {};\n\t      var list = [];\n\t      var item, parent;\n\t      if (!navItems || length === 0) return list;\n\n\t      for (i = 0; i < length; ++i) {\n\t        item = this.navItem(navItems[i]);\n\n\t        if (item) {\n\t          toc[item.id] = item;\n\n\t          if (!item.parentIndex) {\n\t            list.push(item);\n\t          } else {\n\t            parent = toc[item.parent];\n\t            parent.children.push(item);\n\t          }\n\t        }\n\t      }\n\n\t      return list;\n\t    }\n\t    /**\n\t     * Create a navItem\n\t     * @private\n\t     * @param  {element} item\n\t     * @return {object} navItem\n\t     */\n\n\t  }, {\n\t    key: \"navItem\",\n\t    value: function navItem(item) {\n\t      var id = item.getAttribute(\"id\") || undefined;\n\t      var content = filterChildren(item, \"a\", true);\n\n\t      if (!content) {\n\t        return;\n\t      }\n\n\t      if (!id) {\n\t        id = 'epubjs-autogen-toc-id-' + uuid();\n\t        item.setAttribute('id', id);\n\t      }\n\n\t      var href = content.getAttribute(\"href\") || \"\";\n\t      var title = content.textContent || \"\";\n\t      var children = [];\n\t      var parentItem = getParentByTagName(item, \"li\");\n\t      var parent;\n\t      var split = href.split(\"#\");\n\n\t      if (split[0] === \"\") {\n\t        href = this.url + href;\n\t      }\n\n\t      if (parentItem) {\n\t        parent = parentItem.getAttribute(\"id\");\n\t      }\n\n\t      while (!parent && parentItem) {\n\t        parentItem = getParentByTagName(parentItem, \"li\");\n\n\t        if (parentItem) {\n\t          parent = parentItem.getAttribute(\"id\");\n\t        }\n\t      }\n\n\t      return {\n\t        id: id,\n\t        href: href,\n\t        title: title,\n\t        children: children,\n\t        parent: parent\n\t      };\n\t    }\n\t    /**\n\t     * Parse landmarks from a Epub > 3.0 Nav\n\t     * @private\n\t     * @param  {document} navHtml\n\t     * @return {array} landmarks list\n\t     */\n\n\t  }, {\n\t    key: \"parseLandmarks\",\n\t    value: function parseLandmarks(navHtml) {\n\t      var navElement = querySelectorByType(navHtml, \"nav\", \"landmarks\");\n\t      var navItems = navElement ? qsa(navElement, \"li\") : [];\n\t      var length = navItems.length;\n\t      var i;\n\t      var list = [];\n\t      var item;\n\t      if (!navItems || length === 0) return list;\n\n\t      for (i = 0; i < length; ++i) {\n\t        item = this.landmarkItem(navItems[i]);\n\n\t        if (item) {\n\t          list.push(item);\n\t          this.landmarksByType[item.type] = i;\n\t        }\n\t      }\n\n\t      return list;\n\t    }\n\t    /**\n\t     * Create a landmarkItem\n\t     * @private\n\t     * @param  {element} item\n\t     * @return {object} landmarkItem\n\t     */\n\n\t  }, {\n\t    key: \"landmarkItem\",\n\t    value: function landmarkItem(item) {\n\t      var content = filterChildren(item, \"a\", true);\n\n\t      if (!content) {\n\t        return;\n\t      }\n\n\t      var type$$1 = content.getAttributeNS(\"http://www.idpf.org/2007/ops\", \"type\") || undefined;\n\t      var href = content.getAttribute(\"href\") || \"\";\n\t      var title = content.textContent || \"\";\n\t      var split = href.split(\"#\");\n\n\t      if (split[0] === \"\") {\n\t        href = this.url + href;\n\t      }\n\n\t      return {\n\t        href: href,\n\t        title: title,\n\t        type: type$$1\n\t      };\n\t    }\n\t    /**\n\t     * Parse from a Epub > 3.0 NC\n\t     * @private\n\t     * @param  {document} navHtml\n\t     * @return {array} navigation list\n\t     */\n\n\t  }, {\n\t    key: \"parseNcx\",\n\t    value: function parseNcx(tocXml) {\n\t      var navPoints = qsa(tocXml, \"navPoint\");\n\t      var length = navPoints.length;\n\t      var i;\n\t      var toc = {};\n\t      var list = [];\n\t      var item, parent;\n\t      if (!navPoints || length === 0) return list;\n\n\t      for (i = 0; i < length; ++i) {\n\t        item = this.ncxItem(navPoints[i]);\n\t        toc[item.id] = item;\n\n\t        if (!item.parent) {\n\t          list.push(item);\n\t        } else {\n\t          parent = toc[item.parent];\n\t          parent.children.push(item);\n\t        }\n\t      }\n\n\t      return list;\n\t    }\n\t    /**\n\t     * Create a ncxItem\n\t     * @private\n\t     * @param  {element} item\n\t     * @return {object} ncxItem\n\t     */\n\n\t  }, {\n\t    key: \"ncxItem\",\n\t    value: function ncxItem(item) {\n\t      var id = item.getAttribute(\"id\") || false,\n\t          content = qs(item, \"content\"),\n\t          href = content.getAttribute(\"src\"),\n\t          navLabel = qs(item, \"navLabel\"),\n\t          title = navLabel.textContent ? navLabel.textContent : \"\",\n\t          children = [],\n\t          parentNode = item.parentNode,\n\t          parent;\n\n\t      if (parentNode && parentNode.nodeName === \"navPoint\") {\n\t        parent = parentNode.getAttribute(\"id\");\n\t      }\n\n\t      if (!id) {\n\t        id = 'epubjs-autogen-toc-id-' + uuid();\n\t        item.setAttribute('id', id);\n\t      }\n\n\t      return {\n\t        id: id,\n\t        href: href,\n\t        title: title,\n\t        children: children,\n\t        parent: parent\n\t      };\n\t    }\n\t    /**\n\t     * Load Spine Items\n\t     * @param  {object} json the items to be loaded\n\t     * @return {Array} navItems\n\t     */\n\n\t  }, {\n\t    key: \"load\",\n\t    value: function load(json) {\n\t      var _this = this;\n\n\t      return json.map(function (item) {\n\t        if (item.children) {\n\t          item.children = _this.load(item.children);\n\t        } else {\n\t          item.children = [];\n\t        }\n\n\t        return item;\n\t      });\n\t    }\n\t    /**\n\t     * forEach pass through\n\t     * @param  {Function} fn function to run on each item\n\t     * @return {method} forEach loop\n\t     */\n\n\t  }, {\n\t    key: \"forEach\",\n\t    value: function forEach(fn) {\n\t      return this.toc.forEach(fn);\n\t    }\n\t    /**\n\t     * Get an Array of all Table of Contents Items\n\t     */\n\n\t  }, {\n\t    key: \"getTocArray\",\n\t    value: function getTocArray(resolver) {\n\t      return this.toc.map(function (item) {\n\t        var url = resolver ? resolver(item.href) : item.href;\n\t        var obj = {\n\t          href: url,\n\t          title: item.title\n\t        };\n\n\t        if (item.children.length) {\n\t          obj.children = item.children;\n\t        }\n\n\t        return obj;\n\t      });\n\t    }\n\t    /**\n\t     * Get an Array of all landmarks\n\t     */\n\n\t  }, {\n\t    key: \"getLandmarksArray\",\n\t    value: function getLandmarksArray(resolver) {\n\t      return this.landmarks.map(function (item) {\n\t        var url = resolver ? resolver(item.href) : item.href;\n\t        var obj = {\n\t          href: url,\n\t          title: item.title,\n\t          type: item.type\n\t        };\n\t        return obj;\n\t      });\n\t    }\n\t  }]);\n\n\t  return Navigation;\n\t}();\n\n\t/*\n\t From Zip.js, by Gildas Lormeau\n\tedited down\n\t */\n\tvar table = {\n\t  \"application\": {\n\t    \"ecmascript\": [\"es\", \"ecma\"],\n\t    \"javascript\": \"js\",\n\t    \"ogg\": \"ogx\",\n\t    \"pdf\": \"pdf\",\n\t    \"postscript\": [\"ps\", \"ai\", \"eps\", \"epsi\", \"epsf\", \"eps2\", \"eps3\"],\n\t    \"rdf+xml\": \"rdf\",\n\t    \"smil\": [\"smi\", \"smil\"],\n\t    \"xhtml+xml\": [\"xhtml\", \"xht\"],\n\t    \"xml\": [\"xml\", \"xsl\", \"xsd\", \"opf\", \"ncx\"],\n\t    \"zip\": \"zip\",\n\t    \"x-httpd-eruby\": \"rhtml\",\n\t    \"x-latex\": \"latex\",\n\t    \"x-maker\": [\"frm\", \"maker\", \"frame\", \"fm\", \"fb\", \"book\", \"fbdoc\"],\n\t    \"x-object\": \"o\",\n\t    \"x-shockwave-flash\": [\"swf\", \"swfl\"],\n\t    \"x-silverlight\": \"scr\",\n\t    \"epub+zip\": \"epub\",\n\t    \"font-tdpfr\": \"pfr\",\n\t    \"inkml+xml\": [\"ink\", \"inkml\"],\n\t    \"json\": \"json\",\n\t    \"jsonml+json\": \"jsonml\",\n\t    \"mathml+xml\": \"mathml\",\n\t    \"metalink+xml\": \"metalink\",\n\t    \"mp4\": \"mp4s\",\n\t    // \"oebps-package+xml\" : \"opf\",\n\t    \"omdoc+xml\": \"omdoc\",\n\t    \"oxps\": \"oxps\",\n\t    \"vnd.amazon.ebook\": \"azw\",\n\t    \"widget\": \"wgt\",\n\t    // \"x-dtbncx+xml\" : \"ncx\",\n\t    \"x-dtbook+xml\": \"dtb\",\n\t    \"x-dtbresource+xml\": \"res\",\n\t    \"x-font-bdf\": \"bdf\",\n\t    \"x-font-ghostscript\": \"gsf\",\n\t    \"x-font-linux-psf\": \"psf\",\n\t    \"x-font-otf\": \"otf\",\n\t    \"x-font-pcf\": \"pcf\",\n\t    \"x-font-snf\": \"snf\",\n\t    \"x-font-ttf\": [\"ttf\", \"ttc\"],\n\t    \"x-font-type1\": [\"pfa\", \"pfb\", \"pfm\", \"afm\"],\n\t    \"x-font-woff\": \"woff\",\n\t    \"x-mobipocket-ebook\": [\"prc\", \"mobi\"],\n\t    \"x-mspublisher\": \"pub\",\n\t    \"x-nzb\": \"nzb\",\n\t    \"x-tgif\": \"obj\",\n\t    \"xaml+xml\": \"xaml\",\n\t    \"xml-dtd\": \"dtd\",\n\t    \"xproc+xml\": \"xpl\",\n\t    \"xslt+xml\": \"xslt\",\n\t    \"internet-property-stream\": \"acx\",\n\t    \"x-compress\": \"z\",\n\t    \"x-compressed\": \"tgz\",\n\t    \"x-gzip\": \"gz\"\n\t  },\n\t  \"audio\": {\n\t    \"flac\": \"flac\",\n\t    \"midi\": [\"mid\", \"midi\", \"kar\", \"rmi\"],\n\t    \"mpeg\": [\"mpga\", \"mpega\", \"mp2\", \"mp3\", \"m4a\", \"mp2a\", \"m2a\", \"m3a\"],\n\t    \"mpegurl\": \"m3u\",\n\t    \"ogg\": [\"oga\", \"ogg\", \"spx\"],\n\t    \"x-aiff\": [\"aif\", \"aiff\", \"aifc\"],\n\t    \"x-ms-wma\": \"wma\",\n\t    \"x-wav\": \"wav\",\n\t    \"adpcm\": \"adp\",\n\t    \"mp4\": \"mp4a\",\n\t    \"webm\": \"weba\",\n\t    \"x-aac\": \"aac\",\n\t    \"x-caf\": \"caf\",\n\t    \"x-matroska\": \"mka\",\n\t    \"x-pn-realaudio-plugin\": \"rmp\",\n\t    \"xm\": \"xm\",\n\t    \"mid\": [\"mid\", \"rmi\"]\n\t  },\n\t  \"image\": {\n\t    \"gif\": \"gif\",\n\t    \"ief\": \"ief\",\n\t    \"jpeg\": [\"jpeg\", \"jpg\", \"jpe\"],\n\t    \"pcx\": \"pcx\",\n\t    \"png\": \"png\",\n\t    \"svg+xml\": [\"svg\", \"svgz\"],\n\t    \"tiff\": [\"tiff\", \"tif\"],\n\t    \"x-icon\": \"ico\",\n\t    \"bmp\": \"bmp\",\n\t    \"webp\": \"webp\",\n\t    \"x-pict\": [\"pic\", \"pct\"],\n\t    \"x-tga\": \"tga\",\n\t    \"cis-cod\": \"cod\"\n\t  },\n\t  \"text\": {\n\t    \"cache-manifest\": [\"manifest\", \"appcache\"],\n\t    \"css\": \"css\",\n\t    \"csv\": \"csv\",\n\t    \"html\": [\"html\", \"htm\", \"shtml\", \"stm\"],\n\t    \"mathml\": \"mml\",\n\t    \"plain\": [\"txt\", \"text\", \"brf\", \"conf\", \"def\", \"list\", \"log\", \"in\", \"bas\"],\n\t    \"richtext\": \"rtx\",\n\t    \"tab-separated-values\": \"tsv\",\n\t    \"x-bibtex\": \"bib\"\n\t  },\n\t  \"video\": {\n\t    \"mpeg\": [\"mpeg\", \"mpg\", \"mpe\", \"m1v\", \"m2v\", \"mp2\", \"mpa\", \"mpv2\"],\n\t    \"mp4\": [\"mp4\", \"mp4v\", \"mpg4\"],\n\t    \"quicktime\": [\"qt\", \"mov\"],\n\t    \"ogg\": \"ogv\",\n\t    \"vnd.mpegurl\": [\"mxu\", \"m4u\"],\n\t    \"x-flv\": \"flv\",\n\t    \"x-la-asf\": [\"lsf\", \"lsx\"],\n\t    \"x-mng\": \"mng\",\n\t    \"x-ms-asf\": [\"asf\", \"asx\", \"asr\"],\n\t    \"x-ms-wm\": \"wm\",\n\t    \"x-ms-wmv\": \"wmv\",\n\t    \"x-ms-wmx\": \"wmx\",\n\t    \"x-ms-wvx\": \"wvx\",\n\t    \"x-msvideo\": \"avi\",\n\t    \"x-sgi-movie\": \"movie\",\n\t    \"x-matroska\": [\"mpv\", \"mkv\", \"mk3d\", \"mks\"],\n\t    \"3gpp2\": \"3g2\",\n\t    \"h261\": \"h261\",\n\t    \"h263\": \"h263\",\n\t    \"h264\": \"h264\",\n\t    \"jpeg\": \"jpgv\",\n\t    \"jpm\": [\"jpm\", \"jpgm\"],\n\t    \"mj2\": [\"mj2\", \"mjp2\"],\n\t    \"vnd.ms-playready.media.pyv\": \"pyv\",\n\t    \"vnd.uvvu.mp4\": [\"uvu\", \"uvvu\"],\n\t    \"vnd.vivo\": \"viv\",\n\t    \"webm\": \"webm\",\n\t    \"x-f4v\": \"f4v\",\n\t    \"x-m4v\": \"m4v\",\n\t    \"x-ms-vob\": \"vob\",\n\t    \"x-smv\": \"smv\"\n\t  }\n\t};\n\n\tvar mimeTypes = function () {\n\t  var type,\n\t      subtype,\n\t      val,\n\t      index,\n\t      mimeTypes = {};\n\n\t  for (type in table) {\n\t    if (table.hasOwnProperty(type)) {\n\t      for (subtype in table[type]) {\n\t        if (table[type].hasOwnProperty(subtype)) {\n\t          val = table[type][subtype];\n\n\t          if (typeof val == \"string\") {\n\t            mimeTypes[val] = type + \"/\" + subtype;\n\t          } else {\n\t            for (index = 0; index < val.length; index++) {\n\t              mimeTypes[val[index]] = type + \"/\" + subtype;\n\t            }\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  return mimeTypes;\n\t}();\n\n\tvar defaultValue = \"text/plain\"; //\"application/octet-stream\";\n\n\tfunction lookup(filename) {\n\t  return filename && mimeTypes[filename.split(\".\").pop().toLowerCase()] || defaultValue;\n\t}\n\tvar mime = {\n\t  'lookup': lookup\n\t};\n\n\t/**\n\t * Handles Package Resources\n\t * @class\n\t * @param {object} resources\n\t * @param {object} [options]\n\t * @param {string} [options.replacements=\"base64\"]\n\t * @param {Archive} [options.archive]\n\t * @param {method} [options.load]\n\t * @param {string} [options.url]\n\t * @param {string} [options.inject]\n\t */\n\n\tvar Resources =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function Resources(resources, options) {\n\t    classCallCheck(this, Resources);\n\n\t    this.settings = {\n\t      replacements: options && options.replacements || \"blobUrl\",\n\t      archive: options && options.archive,\n\t      load: options && options.load,\n\t      url: options && options.url,\n\t      // path: (options && options.path),\n\t      inject: options && options.inject || {}\n\t    };\n\t    this.urlCache = {};\n\t    this.resources = Object.assign({}, resources);\n\t    this.resourcesByHref = {};\n\t    this.ids = [];\n\t    this.html = [];\n\t    this.assets = [];\n\t    this.css = [];\n\n\t    if (typeof this.settings.url === \"string\") {\n\t      this.url = new Url(this.settings.url);\n\t      this.path = new Path(this.settings.url);\n\t    } else if (_typeof_1(this.settings.url) === \"object\") {\n\t      this.url = this.settings.url;\n\t      this.path = new Path(this.url.toString());\n\t    } else {\n\t      this.path = new Path(\"/\");\n\t    }\n\n\t    if (resources) {\n\t      this.split(resources);\n\t    }\n\t  }\n\t  /**\n\t   * Split resources by type\n\t   * @private\n\t   */\n\n\n\t  createClass(Resources, [{\n\t    key: \"split\",\n\t    value: function split(resources) {\n\t      var _this = this;\n\n\t      var keys = Object.keys(resources); // HTML\n\n\t      var html = keys.filter(function (key) {\n\t        var item = resources[key];\n\n\t        if (item.type === \"application/xhtml+xml\" || item.type === \"text/html\") {\n\t          return true;\n\t        }\n\t      }); // Exclude HTML & CSS\n\n\t      var assets = keys.filter(function (key) {\n\t        var item = resources[key];\n\n\t        if (item.type !== \"application/xhtml+xml\" && item.type !== \"text/html\" && item.type !== \"text/css\") {\n\t          return true;\n\t        }\n\t      }); // Only CSS\n\n\t      var css = keys.filter(function (key) {\n\t        var item = resources[key];\n\n\t        if (item.type === \"text/css\") {\n\t          return true;\n\t        }\n\t      });\n\t      keys.forEach(function (id) {\n\t        var resource = resources[id]; // set ID from keys\n\n\t        resource.id = id;\n\n\t        if (!resource.source) {\n\t          resource.source = resource.href;\n\t        }\n\n\t        _this.resourcesByHref[resource.href] = id;\n\t      });\n\t      this.ids = keys;\n\t      this.html = html;\n\t      this.assets = assets;\n\t      this.css = css;\n\t      return {\n\t        html: html,\n\t        assets: assets,\n\t        css: css\n\t      };\n\t    }\n\t    /**\n\t     * Save all resources into the cache\n\t     * @return {array}\n\t     */\n\n\t  }, {\n\t    key: \"cache\",\n\t    value: function cache(key, origin) {\n\t      var _this2 = this;\n\n\t      if (typeof caches === \"undefined\") {\n\t        return new Promise(function (resolve, reject) {\n\t          resolve([]);\n\t        });\n\t      }\n\n\t      this.cacheKey = key;\n\t      var originUrl = this.url;\n\n\t      if (typeof origin === \"string\") {\n\t        originUrl = new Url(origin);\n\t      }\n\n\t      this.ids.map(function (resourceId) {\n\t        var resource = _this2.resources[resourceId];\n\t        var href = resource.source || resource.href;\n\t        var isAbsolute = href.indexOf(\"://\") > -1;\n\t        var path = isAbsolute ? href : _this2.path.resolve(href);\n\t        var url;\n\n\t        if (!isAbsolute && originUrl) {\n\t          url = originUrl.resolve(href);\n\t        } else {\n\t          var originalUrl = new Url(href, origin);\n\t          var base = encodeURIComponent(originalUrl.origin);\n\t          path = path.replace(originalUrl.origin, \"\");\n\t          url = new Url(key + base + path, location.href).toString();\n\t        }\n\n\t        _this2.resources[resourceId].path = path;\n\t        _this2.resources[resourceId].cached = url;\n\t        _this2.urlCache[path] = url;\n\t      });\n\t      return caches.open(key).then(function (cache) {\n\t        var urls = _this2.ids.map(function (resourceId) {\n\t          var resource = _this2.resources[resourceId];\n\t          var url = resource.cached;\n\t          var path = resource.path;\n\t          var mimeType = mime.lookup(path);\n\t          return cache.match(url).then(function (result) {\n\t            if (!result) {\n\t              var loaded;\n\n\t              if (resource.type === \"application/xhtml+xml\" || resource.type === \"text/html\") {\n\t                loaded = _this2.settings.load(path, \"text\").then(function (text) {\n\t                  if (_this2.settings.inject.identifier) {\n\t                    text = _this2.injectIdentifier(text, _this2.settings.inject.identifier);\n\t                  }\n\n\t                  if (_this2.settings.inject.script) {\n\t                    text = _this2.injectScript(text, _this2.settings.inject.script);\n\t                  }\n\n\t                  if (_this2.settings.inject.stylesheet) {\n\t                    text = _this2.injectStylesheet(text, _this2.settings.inject.script);\n\t                  }\n\n\t                  return createBlob(text, resource.type);\n\t                });\n\t              } else {\n\t                loaded = _this2.settings.load(path, \"blob\");\n\t              }\n\n\t              return loaded.then(function (blob) {\n\t                var response = new Response(blob, {\n\t                  \"status\": 200,\n\t                  \"headers\": {\n\t                    'Content-Type': mimeType\n\t                  }\n\t                });\n\t                _this2.urlCache[path] = url;\n\t                return cache.put(url, response);\n\t              }, function (err) {\n\t                console.warn(\"Missing Resource\", path);\n\t                return path;\n\t              }).then(function () {\n\t                return url;\n\t              });\n\t            } else {\n\t              _this2.urlCache[path] = url;\n\t              return url;\n\t            }\n\t          });\n\t        });\n\n\t        return Promise.all(urls);\n\t      });\n\t    }\n\t    /**\n\t     * Create blob urls for all the assets\n\t     * @return {Promise}         returns replacement urls\n\t     */\n\n\t  }, {\n\t    key: \"replacements\",\n\t    value: function replacements() {\n\t      var _this3 = this;\n\n\t      if (this.settings.replacements === \"none\") {\n\t        return new Promise(function (resolve) {\n\t          resolve([]);\n\t        }.bind(this));\n\t      }\n\n\t      var replacements = []; // Replace all the assets\n\n\t      var assets = this.assets.map(function (resourceId) {\n\t        var url = _this3.replacementUrl(resourceId);\n\n\t        replacements.push(url);\n\t        return url;\n\t      }); // Re-write and replace css files\n\n\t      var css = Promise.all(assets).then(function () {\n\t        return _this3.css.map(function (resourceId) {\n\t          var url = _this3.replacementCss(resourceId);\n\n\t          replacements.push(url);\n\t          return url;\n\t        });\n\t      }); // Re-write and replace htmls files\n\n\t      var html = css.then(function () {\n\t        return _this3.html.map(function (resourceId) {\n\t          var url = _this3.replacementHtml(resourceId);\n\n\t          replacements.push(url);\n\t          return url;\n\t        });\n\t      });\n\t      return html.then(function () {\n\t        return Promise.all(replacements);\n\t      }).then(function (urls) {\n\t        return urls;\n\t      });\n\t    }\n\t    /**\n\t     * Create a replacement url from a resource\n\t     * @param  {number} resourceId\n\t     * @return {promise}\n\t     */\n\n\t  }, {\n\t    key: \"replacementUrl\",\n\t    value: function replacementUrl(resourceId) {\n\t      var _this4 = this;\n\n\t      var resource = this.resources[resourceId];\n\t      var absolute = this.url.resolve(resource.href);\n\t      var createUrl;\n\n\t      if (this.settings.replacements === \"base64\") {\n\t        createUrl = this.base64UrlFrom(absolute);\n\t      } else {\n\t        createUrl = this.blobUrlFrom(absolute);\n\t      }\n\n\t      return createUrl.then(function (url) {\n\t        _this4.resources[resourceId].replacement = url;\n\t        _this4.urlCache[absolute] = url;\n\t        return url;\n\t      }).catch(function (err) {\n\t        console.error(err);\n\t        return null;\n\t      });\n\t    }\n\t    /**\n\t     * Replace URLs in CSS resources\n\t     * @private\n\t     * @param  {number} resourceId\n\t     * @return {Promise}\n\t     */\n\n\t  }, {\n\t    key: \"replacementCss\",\n\t    value: function replacementCss(resourceId) {\n\t      var _this5 = this;\n\n\t      var newUrl;\n\t      var resource = this.resources[resourceId];\n\t      var href = resource.href;\n\n\t      if (this.path.isAbsolute(href)) {\n\t        return new Promise(function (resolve) {\n\t          resolve(href);\n\t        });\n\t      }\n\n\t      var resolved = this.path.resolve(href);\n\t      var fullpath = new Path(resolved); // Get the text of the css file from the archive\n\n\t      var textResponse;\n\n\t      if (this.settings.archive) {\n\t        textResponse = this.settings.archive.getText(resolved);\n\t      } else {\n\t        textResponse = this.settings.load(resolved, \"text\");\n\t      }\n\n\t      return textResponse.then(function (text) {\n\t        var replacements = {}; // Get asset links relative to css file\n\n\t        _this5.ids.forEach(function (resourceId) {\n\t          var resource = _this5.resources[resourceId];\n\n\t          if (!resource.replacement) {\n\t            return;\n\t          }\n\n\t          var assetHref = resource.href;\n\n\t          var resolved = _this5.path.resolve(assetHref);\n\n\t          var relative = fullpath.relative(resolved);\n\t          replacements[relative] = resource.replacement;\n\t        }); // Replacements in the css text\n\n\n\t        text = _this5.substitute(text, replacements); // Get the new url\n\n\t        if (_this5.settings.replacements === \"base64\") {\n\t          newUrl = createBase64Url(text, \"text/css\");\n\t        } else {\n\t          newUrl = createBlobUrl(text, \"text/css\");\n\t        }\n\n\t        return newUrl;\n\t      }, function (err) {\n\t        // handle response errors\n\t        return new Promise(function (resolve) {\n\t          resolve();\n\t        });\n\t      }).then(function (url) {\n\t        if (url) {\n\t          _this5.resources[resourceId].replacement = url;\n\t          _this5.urlCache[fullpath] = url;\n\t        }\n\n\t        return url;\n\t      });\n\t    }\n\t    /**\n\t     * Replace URLs in HTML resources\n\t     * @private\n\t     * @param  {number} resourceId\n\t     * @return {Promise}\n\t     */\n\n\t  }, {\n\t    key: \"replacementHtml\",\n\t    value: function replacementHtml(resourceId) {\n\t      var _this6 = this;\n\n\t      var newUrl;\n\t      var resource = this.resources[resourceId];\n\t      var href = resource.href;\n\t      var mimeType = mime.lookup(href);\n\n\t      if (this.path.isAbsolute(href)) {\n\t        return new Promise(function (resolve) {\n\t          resolve(href);\n\t        });\n\t      }\n\n\t      var resolved = this.path.resolve(href);\n\t      var fullpath = new Path(resolved); // Get the text of the css file from the archive\n\n\t      var textResponse;\n\n\t      if (this.settings.archive) {\n\t        textResponse = this.settings.archive.getText(resolved);\n\t      } else {\n\t        textResponse = this.settings.load(resolved, \"text\");\n\t      }\n\n\t      return textResponse.then(function (text) {\n\t        var replacements = {}; // Get asset links relative to html file\n\n\t        _this6.ids.forEach(function (resourceId) {\n\t          var resource = _this6.resources[resourceId];\n\n\t          if (!resource.replacement) {\n\t            return;\n\t          }\n\n\t          var assetHref = resource.href;\n\n\t          var resolved = _this6.path.resolve(assetHref);\n\n\t          var relative = fullpath.relative(resolved);\n\t          replacements[relative] = resource.replacement;\n\t        }); // Replacements in the css text\n\n\n\t        text = _this6.substitute(text, replacements); // Inject\n\n\t        if (_this6.settings.inject.base) {\n\t          text = _this6.injectBase(text, _this6.settings.inject.base);\n\t        }\n\n\t        if (_this6.settings.inject.identifier) {\n\t          text = _this6.injectIdentifier(text, _this6.settings.inject.identifier);\n\t        }\n\n\t        if (_this6.settings.inject.script) {\n\t          text = _this6.injectScript(text, _this6.settings.inject.script);\n\t        }\n\n\t        if (_this6.settings.inject.stylesheet) {\n\t          text = _this6.injectStylesheet(text, _this6.settings.inject.script);\n\t        } // Get the new url\n\n\n\t        if (_this6.settings.replacements === \"base64\") {\n\t          newUrl = createBase64Url(text, mimeType);\n\t        } else {\n\t          newUrl = createBlobUrl(text, mimeType);\n\t        }\n\n\t        return newUrl;\n\t      }, function (err) {\n\t        // handle response errors\n\t        return new Promise(function (resolve) {\n\t          resolve();\n\t        });\n\t      }).then(function (url) {\n\t        if (url) {\n\t          _this6.resources[resourceId].replacement = url;\n\t          _this6.urlCache[fullpath] = url;\n\t        }\n\n\t        return url;\n\t      });\n\t    }\n\t    /**\n\t     * Create a blob url from a resource absolute url\n\t     * @param  {string} url\n\t     * @return {string}          the resolved path string\n\t     */\n\n\t  }, {\n\t    key: \"blobUrlFrom\",\n\t    value: function blobUrlFrom(url) {\n\t      var parsedUrl = new Url(url);\n\t      var mimeType = mime.lookup(parsedUrl.filename);\n\n\t      if (this.settings.archive) {\n\t        return this.settings.archive.createUrl(url, {\n\t          \"base64\": false\n\t        });\n\t      } else {\n\t        return this.settings.load(url, \"blob\").then(function (blob) {\n\t          return createBlobUrl(blob, mimeType);\n\t        });\n\t      }\n\t    }\n\t    /**\n\t     * Create a base64 encoded url from a resource absolute url\n\t     * @param  {string} url\n\t     * @return {string}          the resolved path string\n\t     */\n\n\t  }, {\n\t    key: \"base64UrlFrom\",\n\t    value: function base64UrlFrom(url) {\n\t      var parsedUrl = new Url(url);\n\t      var mimeType = mime.lookup(parsedUrl.filename);\n\n\t      if (this.settings.archive) {\n\t        return this.settings.archive.createUrl(url, {\n\t          \"base64\": true\n\t        });\n\t      } else {\n\t        return this.settings.load(url, \"blob\").then(function (blob) {\n\t          return blob2base64(blob);\n\t        }).then(function (blob) {\n\t          return createBase64Url(blob, mimeType);\n\t        });\n\t      }\n\t    }\n\t    /**\n\t     * Substitute urls in a resource\n\t     */\n\n\t  }, {\n\t    key: \"substitute\",\n\t    value: function substitute$$1(text, resources) {\n\t      var query = Object.keys(resources).map(function (i) {\n\t        return i.replace(/[.?*+^$[\\]\\\\(){}|-]/g, \"\\\\$&\");\n\t      }).join(\"|\");\n\t      var reg = new RegExp(\"(\" + query + \")\", \"g\");\n\t      return text.replace(reg, function (match) {\n\t        return resources[match];\n\t      });\n\t    }\n\t  }, {\n\t    key: \"injectStylesheet\",\n\t    value: function injectStylesheet(text, src) {\n\t      var reg = /<[ ]*\\/head[ ]*>/;\n\t      var toInject = \"<link href=\\\"\".concat(src, \"\\\" rel=\\\"stylesheet\\\" />\");\n\t      return text.replace(reg, toInject + \"$&\");\n\t    }\n\t  }, {\n\t    key: \"injectScript\",\n\t    value: function injectScript(text, src) {\n\t      var reg = /<[ ]*\\/head[ ]*>/;\n\t      var toInject = '<script src=\"' + src + ' type=\"text/javascript\"><\\/script>';\n\t      return text.replace(reg, toInject + \"$&\");\n\t    }\n\t  }, {\n\t    key: \"injectIdentifier\",\n\t    value: function injectIdentifier(text, identifier) {\n\t      var reg = /<[ ]*\\/head[ ]*>/;\n\t      var toInject = \"<meta name=\\\"dc.relation.ispartof\\\" content=\\\"\".concat(identifier, \"\\\" />\");\n\t      return text.replace(reg, toInject + \"$&\");\n\t    }\n\t  }, {\n\t    key: \"injectBase\",\n\t    value: function injectBase(text, url) {\n\t      var reg = /<[ ]*head[ ]*>/;\n\t      var absolute = url.indexOf(\"://\") > -1; // Fix for Safari crashing if the url doesn't have an origin\n\n\t      if (!absolute && typeof window !== \"undefined\" && window.location) {\n\t        var parts = window.location.href.split(\"/\");\n\t        var directory = \"\";\n\t        parts.pop();\n\t        directory = parts.join(\"/\");\n\t        url = directory + url;\n\t      }\n\n\t      var toInject = \"<base href=\\\"\".concat(url, \"\\\" />\");\n\t      return text.replace(reg, \"$&\" + toInject);\n\t    }\n\t  }, {\n\t    key: \"origin\",\n\t    value: function origin(url) {\n\t      this.url = new Url(url);\n\t    }\n\t    /**\n\t     * Resolve a path to its absolute url (or replaced url)\n\t     * @param  {string} path\n\t     * @return {string}          the resolved path string\n\t     */\n\n\t  }, {\n\t    key: \"resolve\",\n\t    value: function resolve(path) {\n\t      if (!path) {\n\t        return;\n\t      }\n\n\t      var isAbsolute = path.indexOf(\"://\") > -1;\n\t      var href = isAbsolute ? path : this.path.resolve(path);\n\t      var resolved = href;\n\t      var search = href.split(\"?\");\n\t      var anchor = href.split(\"#\");\n\t      var base = href;\n\n\t      if (search.length > 1) {\n\t        base = search[0];\n\t      } else if (anchor.length > 1) {\n\t        base = anchor[0];\n\t      }\n\n\t      var cached = this.urlCache[base];\n\n\t      if (cached) {\n\t        resolved = cached; // Add query strings back\n\n\t        if (search.length > 1) {\n\t          resolved += \"?\" + search[1];\n\t        } else if (anchor.length > 1) {\n\t          resolved += \"#\" + anchor[1];\n\t        }\n\t      } else if (this.url) {\n\t        resolved = this.url.resolve(path);\n\t      } else {\n\t        resolved = path;\n\t      }\n\n\t      return resolved;\n\t    }\n\t    /**\n\t     * Export an Array of all resources\n\t     * @return {array}\n\t     */\n\n\t  }, {\n\t    key: \"toArray\",\n\t    value: function toArray() {\n\t      var _this7 = this;\n\n\t      return this.ids.map(function (key) {\n\t        var item = _this7.resources[key];\n\t        var type$$1 = item.type,\n\t            properties = item.properties,\n\t            id = item.id;\n\t        var source = item.href;\n\t        var href = item.cached || item.replacement || _this7.url && _this7.url.resolve(item.href) || item.href;\n\t        return {\n\t          href: href,\n\t          source: source,\n\t          type: type$$1,\n\t          properties: properties,\n\t          id: id\n\t        };\n\t      });\n\t    }\n\t  }, {\n\t    key: \"forEach\",\n\t    value: function forEach(func) {\n\t      var _this8 = this;\n\n\t      return this.ids.forEach(function (id) {\n\t        var r = _this8.resources[id];\n\t        r.id = key;\n\t        func(r);\n\t      });\n\t    }\n\t  }, {\n\t    key: \"map\",\n\t    value: function map(func) {\n\t      var _this9 = this;\n\n\t      return this.ids.map(function (id) {\n\t        var r = _this9.resources[id];\n\t        r.id = key;\n\t        return func(r);\n\t      });\n\t    }\n\t  }, {\n\t    key: \"filter\",\n\t    value: function filter(func) {\n\t      var _this10 = this;\n\n\t      return this.ids.filter(function (id) {\n\t        var r = _this10.resources[id];\n\t        r.id = key;\n\t        return func(r);\n\t      });\n\t    }\n\t  }, {\n\t    key: \"get\",\n\t    value: function get(what) {\n\t      if (what in this.resources) {\n\t        return this.resources[what];\n\t      } else if (what in this.resourcesByHref) {\n\t        var id = this.resourcesByHref[what];\n\t        return this.resources[id];\n\t      }\n\t    }\n\t  }, {\n\t    key: \"revokeBlobUrls\",\n\t    value: function revokeBlobUrls() {\n\t      var _this11 = this;\n\n\t      this.ids.forEach(function (id) {\n\t        var r = _this11.resources[id];\n\n\t        if (r.replacement) {\n\t          revokeBlobUrl(r.replacement);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: \"destroy\",\n\t    value: function destroy() {\n\t      this.revokeBlobUrls();\n\t      this.settings = undefined;\n\t      this.manifest = undefined;\n\t      this.html = undefined;\n\t      this.assets = undefined;\n\t      this.css = undefined;\n\t      this.urls = undefined;\n\t      this.cssUrls = undefined;\n\t    }\n\t  }]);\n\n\t  return Resources;\n\t}();\n\n\t/**\n\t * Handles Unzipping a requesting files from an Epub Archive\n\t * @class\n\t */\n\n\tvar Archive =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function Archive() {\n\t    classCallCheck(this, Archive);\n\n\t    this.zip = undefined;\n\t    this.urlCache = {};\n\t    this.checkRequirements();\n\t  }\n\t  /**\n\t   * Checks to see if JSZip exists in global namspace,\n\t   * Requires JSZip if it isn't there\n\t   * @private\n\t   */\n\n\n\t  createClass(Archive, [{\n\t    key: \"checkRequirements\",\n\t    value: function checkRequirements() {\n\t      try {\n\t        this.zip = new JSZip();\n\t      } catch (e) {\n\t        throw new Error(\"JSZip lib not loaded\");\n\t      }\n\t    }\n\t    /**\n\t     * Open an archive\n\t     * @param  {binary} input\n\t     * @param  {boolean} [isBase64] tells JSZip if the input data is base64 encoded\n\t     * @return {Promise} zipfile\n\t     */\n\n\t  }, {\n\t    key: \"open\",\n\t    value: function open(input, isBase64) {\n\t      return this.zip.loadAsync(input, {\n\t        \"base64\": isBase64\n\t      });\n\t    }\n\t    /**\n\t     * Load and Open an archive\n\t     * @param  {string} zipUrl\n\t     * @param  {boolean} [isBase64] tells JSZip if the input data is base64 encoded\n\t     * @return {Promise} zipfile\n\t     */\n\n\t  }, {\n\t    key: \"openUrl\",\n\t    value: function openUrl(zipUrl, isBase64) {\n\t      return request(zipUrl, \"binary\").then(function (data) {\n\t        return this.zip.loadAsync(data, {\n\t          \"base64\": isBase64\n\t        });\n\t      }.bind(this));\n\t    }\n\t    /**\n\t     * Request a url from the archive\n\t     * @param  {string} url  a url to request from the archive\n\t     * @param  {string} [type] specify the type of the returned result\n\t     * @return {Promise<Blob | string | JSON | Document | XMLDocument>}\n\t     */\n\n\t  }, {\n\t    key: \"request\",\n\t    value: function request$$1(url, type$$1) {\n\t      var deferred = new defer();\n\t      var response;\n\t      var path = new Path(url); // If type isn't set, determine it from the file extension\n\n\t      if (!type$$1) {\n\t        type$$1 = path.extension;\n\t      }\n\n\t      if (type$$1 == \"blob\") {\n\t        response = this.getBlob(url);\n\t      } else {\n\t        response = this.getText(url);\n\t      }\n\n\t      if (response) {\n\t        response.then(function (r) {\n\t          var result = this.handleResponse(r, type$$1);\n\t          deferred.resolve(result);\n\t        }.bind(this));\n\t      } else {\n\t        deferred.reject({\n\t          message: \"File not found in the epub: \" + url,\n\t          stack: new Error().stack\n\t        });\n\t      }\n\n\t      return deferred.promise;\n\t    }\n\t    /**\n\t     * Handle the response from request\n\t     * @private\n\t     * @param  {any} response\n\t     * @param  {string} [type]\n\t     * @return {any} the parsed result\n\t     */\n\n\t  }, {\n\t    key: \"handleResponse\",\n\t    value: function handleResponse(response, type$$1) {\n\t      var r;\n\n\t      if (type$$1 == \"json\") {\n\t        r = JSON.parse(response);\n\t      } else if (isXml(type$$1)) {\n\t        r = parse(response, \"text/xml\");\n\t      } else if (type$$1 == \"xhtml\") {\n\t        r = parse(response, \"application/xhtml+xml\");\n\t      } else if (type$$1 == \"html\" || type$$1 == \"htm\") {\n\t        r = parse(response, \"text/html\");\n\t      } else {\n\t        r = response;\n\t      }\n\n\t      return r;\n\t    }\n\t    /**\n\t     * Get a Blob from Archive by Url\n\t     * @param  {string} url\n\t     * @param  {string} [mimeType]\n\t     * @return {Blob}\n\t     */\n\n\t  }, {\n\t    key: \"getBlob\",\n\t    value: function getBlob(url, mimeType) {\n\t      var decodededUrl = decodeURIComponent(url.substr(1)); // Remove first slash\n\n\t      var entry = this.zip.file(decodededUrl);\n\n\t      if (entry) {\n\t        mimeType = mimeType || mime.lookup(entry.name);\n\t        return entry.async(\"uint8array\").then(function (uint8array) {\n\t          return new Blob([uint8array], {\n\t            type: mimeType\n\t          });\n\t        });\n\t      }\n\t    }\n\t    /**\n\t     * Get Text from Archive by Url\n\t     * @param  {string} url\n\t     * @param  {string} [encoding]\n\t     * @return {string}\n\t     */\n\n\t  }, {\n\t    key: \"getText\",\n\t    value: function getText(url, encoding) {\n\t      var decodededUrl = decodeURIComponent(url.substr(1)); // Remove first slash\n\n\t      var entry = this.zip.file(decodededUrl);\n\n\t      if (entry) {\n\t        return entry.async(\"string\").then(function (text) {\n\t          return text;\n\t        });\n\t      }\n\t    }\n\t    /**\n\t     * Get a base64 encoded result from Archive by Url\n\t     * @param  {string} url\n\t     * @param  {string} [mimeType]\n\t     * @return {string} base64 encoded\n\t     */\n\n\t  }, {\n\t    key: \"getBase64\",\n\t    value: function getBase64(url, mimeType) {\n\t      var decodededUrl = decodeURIComponent(url.substr(1)); // Remove first slash\n\n\t      var entry = this.zip.file(decodededUrl);\n\n\t      if (entry) {\n\t        mimeType = mimeType || mime.lookup(entry.name);\n\t        return entry.async(\"base64\").then(function (data) {\n\t          return \"data:\" + mimeType + \";base64,\" + data;\n\t        });\n\t      }\n\t    }\n\t    /**\n\t     * Create a Url from an unarchived item\n\t     * @param  {string} url\n\t     * @param  {object} [options.base64] use base64 encoding or blob url\n\t     * @return {Promise} url promise with Url string\n\t     */\n\n\t  }, {\n\t    key: \"createUrl\",\n\t    value: function createUrl(url, options) {\n\t      var deferred = new defer(); //var _URL = window.URL || window.webkitURL || window.mozURL;\n\n\t      var tempUrl;\n\t      var response;\n\t      var useBase64 = options && options.base64;\n\n\t      if (url in this.urlCache) {\n\t        deferred.resolve(this.urlCache[url]);\n\t        return deferred.promise;\n\t      }\n\n\t      if (useBase64) {\n\t        response = this.getBase64(url);\n\n\t        if (response) {\n\t          response.then(function (tempUrl) {\n\t            this.urlCache[url] = tempUrl;\n\t            deferred.resolve(tempUrl);\n\t          }.bind(this));\n\t        }\n\t      } else {\n\t        response = this.getBlob(url);\n\n\t        if (response) {\n\t          response.then(function (blob) {\n\t            tempUrl = URL.createObjectURL(blob);\n\t            this.urlCache[url] = tempUrl;\n\t            deferred.resolve(tempUrl);\n\t          }.bind(this));\n\t        }\n\t      }\n\n\t      if (!response) {\n\t        deferred.reject({\n\t          message: \"File not found in the epub: \" + url,\n\t          stack: new Error().stack\n\t        });\n\t      }\n\n\t      return deferred.promise;\n\t    }\n\t    /**\n\t     * Revoke Temp Url for a achive item\n\t     * @param  {string} url url of the item in the archive\n\t     */\n\n\t  }, {\n\t    key: \"revokeUrl\",\n\t    value: function revokeUrl(url) {\n\t      //var _URL = _URL || window.webkitURL || window.mozURL;\n\t      var fromCache = this.urlCache[url];\n\t      if (fromCache) URL.revokeObjectURL(fromCache);\n\t    }\n\t  }, {\n\t    key: \"destroy\",\n\t    value: function destroy() {\n\t      // var _URL = window.URL || window.webkitURL || window.mozURL;\n\t      for (var fromCache in this.urlCache) {\n\t        URL.revokeObjectURL(fromCache);\n\t      }\n\n\t      this.zip = undefined;\n\t      this.urlCache = {};\n\t    }\n\t  }]);\n\n\t  return Archive;\n\t}();\n\n\tvar CONTAINER_PATH = \"META-INF/container.xml\";\n\tvar INPUT_TYPE = {\n\t  BINARY: \"binary\",\n\t  BASE64: \"base64\",\n\t  EPUB: \"epub\",\n\t  OPF: \"opf\",\n\t  MANIFEST: \"json\",\n\t  DIRECTORY: \"directory\"\n\t};\n\t/**\n\t * An Epub representation with methods for the parsing of its contents.\n\t * @class\n\t * @param {string} [url]\n\t * @param {object} [options]\n\t * @param {method} [options.requestMethod] a request function to use instead of the default\n\t * @param {boolean} [options.requestCredentials=undefined] send the xhr request withCredentials\n\t * @param {object} [options.requestHeaders=undefined] send the xhr request headers\n\t * @param {string} [options.encoding=binary] optional to pass 'binary' or base64' for archived Epubs\n\t * @param {string} [options.replacements] use base64, blobUrl, or none for replacing assets in archived Epubs\n\t * @param {method} [options.cache] use cache to save book contents for a service workers\n\t * @returns {Epub}\n\t * @example new Epub(\"/path/to/book.epub\", {})\n\t * @example new Epub({ replacements: \"blobUrl\" })\n\t */\n\n\tvar Epub =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function Epub(url, options) {\n\t    var _this = this;\n\n\t    classCallCheck(this, Epub);\n\n\t    // Allow passing just options to the Book\n\t    if (typeof options === \"undefined\" && typeof url !== \"string\" && url instanceof Blob === false) {\n\t      options = url;\n\t      url = undefined;\n\t    }\n\n\t    this.settings = extend(this.settings || {}, {\n\t      requestMethod: undefined,\n\t      requestCredentials: undefined,\n\t      requestHeaders: undefined,\n\t      encoding: undefined,\n\t      replacements: undefined,\n\t      canonical: undefined,\n\t      cache: undefined,\n\t      stylesheet: null,\n\t      script: null,\n\t      openAs: undefined\n\t    });\n\t    extend(this.settings, options);\n\t    this.opening = new defer();\n\t    /**\n\t     * @member {promise} opened returns after the book is loaded\n\t     * @memberof Book\n\t     */\n\n\t    this.opened = this.opening.promise;\n\t    this.isOpen = false;\n\t    this.book = undefined;\n\t    /**\n\t     * @member {promise} ready returns after the book is loaded and parsed\n\t     * @memberof Book\n\t     * @private\n\t     */\n\n\t    this.ready = this.opened.then(function () {\n\t      _this.manifest = _this.book.toJSON();\n\n\t      _this.emit(EVENTS.BOOK.READY, _this.manifest);\n\n\t      return _this.book;\n\t    });\n\t    /**\n\t     * @member {method} request\n\t     * @memberof Epub\n\t     * @private\n\t     */\n\n\t    this.request = this.settings.requestMethod || request;\n\t    /**\n\t     * @member {boolean} archived\n\t     * @memberof Epub\n\t     * @private\n\t     */\n\n\t    this.archived = false;\n\t    /**\n\t     * @member {Container} container\n\t     * @memberof Epub\n\t     * @private\n\t     */\n\n\t    this.container = undefined;\n\t    /**\n\t     * @member {Packaging} packaging\n\t     * @memberof Epub\n\t     * @private\n\t     */\n\n\t    this.packaging = undefined;\n\t    /**\n\t     * @member {Locations} locations\n\t     * @memberof Epub\n\t     * @private\n\t     */\n\n\t    this.locations = undefined;\n\t    /**\n\t    * @member {PageList} pagelist\n\t    * @memberof Epub\n\t    */\n\n\t    this.pageList = undefined;\n\n\t    if (url) {\n\t      this.open(url, this.settings.openAs).catch(function (error) {\n\t        var err = new Error(\"Cannot load book at \" + url);\n\n\t        _this.emit(EVENTS.BOOK.OPEN_FAILED, err);\n\n\t        console.error(error);\n\t      });\n\t    }\n\t  }\n\t  /**\n\t   * Open a epub or url\n\t   * @param {string | ArrayBuffer} input Url, Path or ArrayBuffer\n\t   * @param {string} [what=\"binary\", \"base64\", \"epub\", \"opf\", \"json\", \"directory\"] force opening as a certain type\n\t   * @returns {Promise} of when the book has been loaded\n\t   * @example book.open(\"/path/to/book.epub\")\n\t   */\n\n\n\t  createClass(Epub, [{\n\t    key: \"open\",\n\t    value: function open(input, what) {\n\t      var _this2 = this;\n\n\t      var opening;\n\t      var type$$1 = what || this.determineType(input);\n\t      var inputLocation; // For browsers\n\n\t      if (typeof window !== \"undefined\" && typeof window.location !== \"undefined\") {\n\t        inputLocation = window.location.href;\n\t      } // For web workers\n\n\n\t      if (typeof self !== \"undefined\") {\n\t        inputLocation = self.location.href;\n\t      }\n\n\t      if (type$$1 === INPUT_TYPE.BINARY) {\n\t        this.archived = true;\n\t        this.url = new Url(\"/\", \"\");\n\t        this.locationUrl = new Url(inputLocation);\n\t        opening = this.openEpub(input);\n\t      } else if (type$$1 === INPUT_TYPE.BASE64) {\n\t        this.archived = true;\n\t        this.url = new Url(\"/\", \"\");\n\t        this.locationUrl = new Url(inputLocation);\n\t        opening = this.openEpub(input, type$$1);\n\t      } else if (type$$1 === INPUT_TYPE.EPUB) {\n\t        this.archived = true;\n\t        this.url = new Url(\"/\", \"\");\n\t        this.locationUrl = new Url(input, inputLocation);\n\t        opening = this.request(input, \"binary\", this.settings.requestCredentials).then(this.openEpub.bind(this));\n\t      } else if (type$$1 == INPUT_TYPE.OPF) {\n\t        this.url = new Url(input);\n\t        this.locationUrl = new Url(input);\n\t        opening = this.openPackaging(this.url.Path.toString());\n\t      } else if (type$$1 == INPUT_TYPE.MANIFEST) {\n\t        this.url = new Url(input);\n\t        this.locationUrl = new Url(input);\n\t        opening = this.openManifest(this.url.toString());\n\t      } else {\n\t        this.url = new Url(input);\n\t        this.locationUrl = new Url(input);\n\t        opening = this.openContainer(CONTAINER_PATH).then(this.openPackaging.bind(this));\n\t      }\n\n\t      return opening.then(function (packaging) {\n\t        return _this2.unpack(packaging);\n\t      });\n\t    }\n\t    /**\n\t     * Open an archived epub\n\t     * @private\n\t     * @param  {binary} data\n\t     * @param  {string} [encoding]\n\t     * @return {Promise}\n\t     */\n\n\t  }, {\n\t    key: \"openEpub\",\n\t    value: function openEpub(data, encoding) {\n\t      var _this3 = this;\n\n\t      return this.unarchive(data, encoding || this.settings.encoding).then(function () {\n\t        return _this3.openContainer(CONTAINER_PATH);\n\t      }).then(function (packagePath) {\n\t        return _this3.openPackaging(packagePath);\n\t      });\n\t    }\n\t    /**\n\t     * Open the epub container\n\t     * @private\n\t     * @param  {string} url\n\t     * @return {string} packagePath\n\t     */\n\n\t  }, {\n\t    key: \"openContainer\",\n\t    value: function openContainer(url) {\n\t      var _this4 = this;\n\n\t      return this.load(url).then(function (xml) {\n\t        _this4.container = new Container(xml);\n\t        return _this4.resolve(_this4.container.packagePath);\n\t      });\n\t    }\n\t    /**\n\t     * Open the Open Packaging Format Xml\n\t     * @private\n\t     * @param  {string} url\n\t     * @return {Promise}\n\t     */\n\n\t  }, {\n\t    key: \"openPackaging\",\n\t    value: function openPackaging(url) {\n\t      var _this5 = this;\n\n\t      this.path = new Path(url);\n\t      return this.load(url).then(function (xml) {\n\t        _this5.packaging = new Packaging(xml);\n\t        return _this5.packaging;\n\t      });\n\t    }\n\t    /**\n\t     * Open the manifest JSON\n\t     * @private\n\t     * @param  {string} url\n\t     * @return {Promise}\n\t     */\n\n\t  }, {\n\t    key: \"openManifest\",\n\t    value: function openManifest(url) {\n\t      var _this6 = this;\n\n\t      this.path = new Path(url);\n\t      return this.load(url).then(function (json) {\n\t        _this6.packaging = new Packaging();\n\n\t        _this6.packaging.load(json);\n\n\t        return _this6.packaging;\n\t      });\n\t    }\n\t    /**\n\t     * Load a resource from the Book\n\t     * @private\n\t     * @param  {string} path path to the resource to load\n\t     * @return {Promise}     returns a promise with the requested resource\n\t     */\n\n\t  }, {\n\t    key: \"load\",\n\t    value: function load(path, type$$1) {\n\t      var resolved;\n\n\t      if (this.archived) {\n\t        resolved = this.resolve(path);\n\t        return this.archive.request(resolved, type$$1);\n\t      } else {\n\t        resolved = this.resolve(path);\n\t        return this.request(resolved, type$$1, this.settings.requestCredentials, this.settings.requestHeaders);\n\t      }\n\t    }\n\t    /**\n\t     * Resolve a path to it's absolute position in the Book\n\t     * @private\n\t     * @param  {string} path\n\t     * @param  {boolean} [absolute] force resolving the full URL\n\t     * @return {string}          the resolved path string\n\t     */\n\n\t  }, {\n\t    key: \"resolve\",\n\t    value: function resolve(path, absolute) {\n\t      if (!path) {\n\t        return;\n\t      }\n\n\t      var resolved = path;\n\t      var isAbsolute = path.indexOf(\"://\") > -1;\n\n\t      if (isAbsolute) {\n\t        return path;\n\t      }\n\n\t      if (this.path) {\n\t        resolved = this.path.resolve(path);\n\t      }\n\n\t      if (absolute === true && this.url) {\n\t        resolved = this.url.resolve(resolved);\n\t      }\n\n\t      return resolved;\n\t    }\n\t    /**\n\t     * Determine the type of they input passed to open\n\t     * @private\n\t     * @param  {string} input\n\t     * @return {string}  binary | directory | epub | opf\n\t     */\n\n\t  }, {\n\t    key: \"determineType\",\n\t    value: function determineType(input) {\n\t      var url;\n\t      var path;\n\t      var extension;\n\n\t      if (this.settings.encoding === \"base64\") {\n\t        return INPUT_TYPE.BASE64;\n\t      }\n\n\t      if (typeof input != \"string\") {\n\t        return INPUT_TYPE.BINARY;\n\t      }\n\n\t      url = new Url(input);\n\t      path = url.path();\n\t      extension = path.extension;\n\n\t      if (!extension) {\n\t        return INPUT_TYPE.DIRECTORY;\n\t      }\n\n\t      if (extension === \"epub\") {\n\t        return INPUT_TYPE.EPUB;\n\t      }\n\n\t      if (extension === \"opf\") {\n\t        return INPUT_TYPE.OPF;\n\t      }\n\n\t      if (extension === \"json\") {\n\t        return INPUT_TYPE.MANIFEST;\n\t      }\n\t    }\n\t    /**\n\t     * unpack the contents of the Packaging\n\t     * @private\n\t     * @param {document} packageXml XML Document\n\t     */\n\n\t  }, {\n\t    key: \"unpack\",\n\t    value: function unpack(packaging) {\n\t      var _this7 = this;\n\n\t      this.package = packaging;\n\t      var url;\n\t      var path = this.path.toString();\n\n\t      if (this.archived) {\n\t        url = new Url(path, \"\");\n\t      } else if (this.url) {\n\t        url = this.url;\n\t      } else {\n\t        url = new Url(path);\n\t      }\n\n\t      this.resources = new Resources(this.package.manifest, {\n\t        archive: this.archive,\n\t        url: url,\n\t        load: this.load.bind(this),\n\t        replacements: this.settings.replacements,\n\t        inject: {\n\t          script: this.settings.script,\n\t          stylesheet: this.settings.stylesheet,\n\t          identifer: this.package.metadata.identifier\n\t        }\n\t      });\n\t      var processed = [];\n\t      var crossdomain = window.location && url.origin !== location.origin; // If caches doesn't exist, use replacements instead\n\n\t      if (typeof caches === \"undefined\") {\n\t        this.settings.replacements = true;\n\t        this.settings.cache = false;\n\t      } // If we are using a worker and cache isn't set,\n\t      // we should cache the resources if we can\n\n\n\t      if (typeof this.settings.cache === \"undefined\" && this.settings.worker) {\n\t        this.settings.cache = true;\n\t      } // If the resource is Cross Domain, and we aren't using cache then\n\t      // replacements are needed.\n\n\n\t      if ((crossdomain || this.archived) && !this.settings.worker && !this.settings.cache && typeof this.settings.replacements === \"undefined\") {\n\t        this.settings.replacements = true;\n\t      }\n\n\t      if (this.settings.cache && typeof caches != \"undefined\") {\n\t        var uriComponent;\n\t        var cached;\n\t        var key;\n\n\t        if (this.archived) {\n\t          uriComponent = encodeURIComponent(this.locationUrl.toString());\n\t          key = \"epubjs-zip/\";\n\t          url = new Url(key + uriComponent + path, location.href);\n\t          cached = this.resources.cache(key, url.toString());\n\t          this.cacheUrl = url;\n\t        } else if (crossdomain) {\n\t          uriComponent = encodeURIComponent(this.locationUrl.origin);\n\t          key = \"epubjs-proxy/\";\n\t          url = new Url(key + uriComponent + path, location.href);\n\t          cached = this.resources.cache(key, url.toString());\n\t          this.cacheUrl = url;\n\t        } // Wait for injection (not handled in service worker)\n\n\n\t        if (this.settings.script || this.settings.stylesheet) {\n\t          processed.push(cached);\n\t        }\n\t      }\n\n\t      if (this.settings.replacements) {\n\t        var replacements = this.resources.replacements();\n\t        processed.push(replacements);\n\t      }\n\n\t      return Promise.all(processed).then(function () {\n\t        return _this7.loadNavigation(_this7.package).then(function () {\n\t          return _this7.navigation;\n\t        });\n\t      }).then(function () {\n\t        _this7.isOpen = true; // Remove zip after cached\n\t        // if (this.archive) {\n\t        // \tthis.archive.destroy();\n\t        // }\n\n\t        _this7.book = _this7.toBook(); // Resolve book opened promise\n\n\t        _this7.opening.resolve(_this7);\n\n\t        return _this7.book;\n\t      }).catch(function (err) {\n\t        console.error(err);\n\t      });\n\t    }\n\t  }, {\n\t    key: \"cache\",\n\t    value: function cache(key, url, crossdomain) {\n\t      var _this8 = this;\n\n\t      if (!key) {\n\t        key = this.key();\n\t      }\n\n\t      return this.resources.cache(key, url, crossdomain).then(function () {\n\t        _this8.book = _this8.toBook();\n\t        return _this8.book;\n\t      }).catch(function (err) {\n\t        console.error(err);\n\t      });\n\t    }\n\t  }, {\n\t    key: \"replacements\",\n\t    value: function replacements() {\n\t      var _this9 = this;\n\n\t      return this.resources.replacements().then(function () {\n\t        _this9.book = _this9.toBook();\n\t        return _this9.book;\n\t      }).catch(function (err) {\n\t        console.error(err);\n\t      });\n\t    }\n\t    /**\n\t     * Load Navigation and PageList from package\n\t     * @private\n\t     * @param {document} opf XML Document\n\t     */\n\n\t  }, {\n\t    key: \"loadNavigation\",\n\t    value: function loadNavigation(opf) {\n\t      var _this10 = this;\n\n\t      var navPath = opf.navPath || opf.ncxPath;\n\t      var toc = opf.toc;\n\n\t      if (!navPath) {\n\t        return new Promise(function (resolve, reject) {\n\t          _this10.navigation = new Navigation$1(null);\n\t          _this10.pageList = new PageList();\n\t          resolve(_this10.navigation);\n\t        });\n\t      }\n\n\t      return this.load(navPath, \"xml\").then(function (xml) {\n\t        _this10.navigation = new Navigation$1(xml, _this10.resolve(navPath));\n\t        _this10.pageList = new PageList(xml);\n\t        return _this10.navigation;\n\t      });\n\t    }\n\t    /**\n\t     * Set if request should use withCredentials\n\t     * @param {boolean} credentials\n\t     */\n\n\t  }, {\n\t    key: \"setRequestCredentials\",\n\t    value: function setRequestCredentials(credentials) {\n\t      this.settings.requestCredentials = credentials;\n\t    }\n\t    /**\n\t     * Set headers request should use\n\t     * @param {object} headers\n\t     */\n\n\t  }, {\n\t    key: \"setRequestHeaders\",\n\t    value: function setRequestHeaders(headers) {\n\t      this.settings.requestHeaders = headers;\n\t    }\n\t    /**\n\t     * Unarchive a zipped epub\n\t     * @private\n\t     * @param  {binary} input epub data\n\t     * @param  {string} [encoding]\n\t     * @return {Archive}\n\t     */\n\n\t  }, {\n\t    key: \"unarchive\",\n\t    value: function unarchive(input, encoding) {\n\t      this.archive = new Archive();\n\t      return this.archive.open(input, encoding);\n\t    }\n\t  }, {\n\t    key: \"generateLocations\",\n\t    value: function generateLocations(breakPoint) {\n\t      var _this11 = this;\n\n\t      if (!this.book) {\n\t        return;\n\t      }\n\n\t      if (!this.locations) {\n\t        this.locations = new Locations();\n\t      }\n\n\t      return this.locations.generate(this.book.sections, breakPoint).then(function (locations) {\n\t        _this11.book.locations = locations;\n\t        return locations;\n\t      });\n\t    }\n\t  }, {\n\t    key: \"loadLocations\",\n\t    value: function loadLocations(json) {\n\t      var locations;\n\n\t      if (!this.book) {\n\t        return;\n\t      }\n\n\t      if (!this.locations) {\n\t        this.locations = new Locations();\n\t      }\n\n\t      if (typeof locations === \"string\") {\n\t        locations = JSON.parse(json);\n\t      } else {\n\t        locations = json;\n\t      }\n\n\t      this.book.locations = locations;\n\t      return locations;\n\t    }\n\t    /**\n\t     * Generates the Book Key using the identifer in the manifest or other string provided\n\t     * @param  {string} [identifier] to use instead of metadata identifier\n\t     * @return {string} key\n\t     */\n\n\t  }, {\n\t    key: \"key\",\n\t    value: function key(identifier) {\n\t      var ident = identifier || this.package.metadata.identifier || this.url.filename;\n\t      return \"epubjs-\".concat(EPUBJS_VERSION, \"-\").concat(ident);\n\t    }\n\t  }, {\n\t    key: \"toBook\",\n\t    value: function toBook() {\n\t      var _this12 = this;\n\n\t      var resolver = this.resources.resolve.bind(this.resources);\n\t      var book = new Book();\n\t      book.url = \"\";\n\n\t      if (this.cacheUrl) {\n\t        book.url = this.cacheUrl.resolve(\"manifest.json\");\n\t      } else {\n\t        book.url = this.locationUrl.resolve(\"manifest.json\");\n\t      }\n\n\t      if (this.archived) {\n\t        book.source = this.locationUrl.toString();\n\t      }\n\n\t      book.resources = this.resources.toArray();\n\t      book.spine = this.package.spine.map(function (item, index) {\n\t        var resource = _this12.resources.get(item.idref) || item;\n\n\t        var url = _this12.resources.resolve(resource.href); // Remove from resources array\n\n\n\t        var i = book.resources.findIndex(function (r) {\n\t          return r.id === resource.id;\n\t        });\n\n\t        if (i > -1) {\n\t          book.resources.splice(i, 1);\n\t        }\n\n\t        item.index = index;\n\t        item.cfiBase = new EpubCFI().generateChapterComponent(_this12.package.spineNodeIndex, item.index, item.idref);\n\n\t        if (resource) {\n\t          item.source = resource.href;\n\t          item.href = url;\n\t          item.type = resource.type;\n\n\t          if (resource.properties && resource.properties.length) {\n\t            item.properties.push.apply(item.properties, resource.properties);\n\t          }\n\t        }\n\n\t        return item;\n\t      });\n\t      book.metadata = this.package.metadata;\n\n\t      if (this.navigation) {\n\t        book.toc = this.navigation.getTocArray(resolver);\n\t        book.landmarks = this.navigation.getLandmarksArray(resolver);\n\t      }\n\n\t      if (this.pageList) {\n\t        book.pages = this.pageList.toArray();\n\t      }\n\n\t      if (this.locations) {\n\t        book.locations = this.locations.toArray();\n\t      }\n\n\t      return book;\n\t    }\n\t    /**\n\t     * Destroy the Book and all associated objects\n\t     */\n\n\t  }, {\n\t    key: \"destroy\",\n\t    value: function destroy() {\n\t      this.opened = undefined;\n\t      this.loading = undefined;\n\t      this.loaded = undefined;\n\t      this.ready = undefined;\n\t      this.isOpen = false;\n\t      this.isRendered = false; //TODO: ?\n\n\t      this.book && this.book.destroy();\n\t      this.locations && this.locations.destroy();\n\t      this.pageList && this.pageList.destroy();\n\t      this.archive && this.archive.destroy();\n\t      this.resources && this.resources.destroy();\n\t      this.container && this.container.destroy();\n\t      this.packaging && this.packaging.destroy();\n\t      this.spine = undefined;\n\t      this.locations = undefined;\n\t      this.pageList = undefined;\n\t      this.archive = undefined;\n\t      this.resources = undefined;\n\t      this.container = undefined;\n\t      this.packaging = undefined;\n\t      this.navigation = undefined;\n\t      this.url = undefined;\n\t      this.path = undefined;\n\t      this.archived = false;\n\t    }\n\t  }]);\n\n\t  return Epub;\n\t}();\n\n\teventEmitter(Epub.prototype);\n\n\tvar svg = createCommonjsModule(function (module, exports) {\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.createElement = createElement;\n\tfunction createElement(name) {\n\t    return document.createElementNS('http://www.w3.org/2000/svg', name);\n\t}\n\n\texports.default = {\n\t    createElement: createElement\n\t};\n\t});\n\n\tunwrapExports(svg);\n\tvar svg_1 = svg.createElement;\n\n\tvar events = createCommonjsModule(function (module, exports) {\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.proxyMouse = proxyMouse;\n\texports.clone = clone;\n\t// import 'babelify/polyfill'; // needed for Object.assign\n\n\texports.default = {\n\t    proxyMouse: proxyMouse\n\t};\n\n\t/**\n\t * Start proxying all mouse events that occur on the target node to each node in\n\t * a set of tracked nodes.\n\t *\n\t * The items in tracked do not strictly have to be DOM Nodes, but they do have\n\t * to have dispatchEvent, getBoundingClientRect, and getClientRects methods.\n\t *\n\t * @param target {Node} The node on which to listen for mouse events.\n\t * @param tracked {Node[]} A (possibly mutable) array of nodes to which to proxy\n\t *                         events.\n\t */\n\n\tfunction proxyMouse(target, tracked) {\n\t    function dispatch(e) {\n\t        // We walk through the set of tracked elements in reverse order so that\n\t        // events are sent to those most recently added first.\n\t        //\n\t        // This is the least surprising behaviour as it simulates the way the\n\t        // browser would work if items added later were drawn \"on top of\"\n\t        // earlier ones.\n\t        for (var i = tracked.length - 1; i >= 0; i--) {\n\t            var t = tracked[i];\n\t            var x = e.clientX;\n\t            var y = e.clientY;\n\n\t            if (e.touches && e.touches.length) {\n\t                x = e.touches[0].clientX;\n\t                y = e.touches[0].clientY;\n\t            }\n\n\t            if (!contains(t, target, x, y)) {\n\t                continue;\n\t            }\n\n\t            // The event targets this mark, so dispatch a cloned event:\n\t            t.dispatchEvent(clone(e));\n\t            // We only dispatch the cloned event to the first matching mark.\n\t            break;\n\t        }\n\t    }\n\n\t    if (target.nodeName === \"iframe\" || target.nodeName === \"IFRAME\") {\n\n\t        try {\n\t            // Try to get the contents if same domain\n\t            this.target = target.contentDocument;\n\t        } catch (err) {\n\t            this.target = target;\n\t        }\n\t    } else {\n\t        this.target = target;\n\t    }\n\n\t    var _arr = ['mouseup', 'mousedown', 'click', 'touchstart'];\n\t    for (var _i = 0; _i < _arr.length; _i++) {\n\t        var ev = _arr[_i];\n\t        this.target.addEventListener(ev, function (e) {\n\t            return dispatch(e);\n\t        }, false);\n\t    }\n\t}\n\n\t/**\n\t * Clone a mouse event object.\n\t *\n\t * @param e {MouseEvent} A mouse event object to clone.\n\t * @returns {MouseEvent}\n\t */\n\tfunction clone(e) {\n\t    var opts = Object.assign({}, e, { bubbles: false });\n\t    try {\n\t        return new MouseEvent(e.type, opts);\n\t    } catch (err) {\n\t        // compat: webkit\n\t        var copy = document.createEvent('MouseEvents');\n\t        copy.initMouseEvent(e.type, false, opts.cancelable, opts.view, opts.detail, opts.screenX, opts.screenY, opts.clientX, opts.clientY, opts.ctrlKey, opts.altKey, opts.shiftKey, opts.metaKey, opts.button, opts.relatedTarget);\n\t        return copy;\n\t    }\n\t}\n\n\t/**\n\t * Check if the item contains the point denoted by the passed coordinates\n\t * @param item {Object} An object with getBoundingClientRect and getClientRects\n\t *                      methods.\n\t * @param x {Number}\n\t * @param y {Number}\n\t * @returns {Boolean}\n\t */\n\tfunction contains(item, target, x, y) {\n\t    // offset\n\t    var offset = target.getBoundingClientRect();\n\n\t    function rectContains(r, x, y) {\n\t        var top = r.top - offset.top;\n\t        var left = r.left - offset.left;\n\t        var bottom = top + r.height;\n\t        var right = left + r.width;\n\t        return top <= y && left <= x && bottom > y && right > x;\n\t    }\n\n\t    // Check overall bounding box first\n\t    var rect = item.getBoundingClientRect();\n\t    if (!rectContains(rect, x, y)) {\n\t        return false;\n\t    }\n\n\t    // Then continue to check each child rect\n\t    var rects = item.getClientRects();\n\t    for (var i = 0, len = rects.length; i < len; i++) {\n\t        if (rectContains(rects[i], x, y)) {\n\t            return true;\n\t        }\n\t    }\n\t    return false;\n\t}\n\t});\n\n\tunwrapExports(events);\n\tvar events_1 = events.proxyMouse;\n\tvar events_2 = events.clone;\n\n\tvar marks = createCommonjsModule(function (module, exports) {\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.Underline = exports.Highlight = exports.Mark = exports.Pane = undefined;\n\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\n\n\tvar _svg2 = _interopRequireDefault(svg);\n\n\n\n\tvar _events2 = _interopRequireDefault(events);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tvar Pane = exports.Pane = function () {\n\t    function Pane(target) {\n\t        var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.body;\n\n\t        _classCallCheck(this, Pane);\n\n\t        this.target = target;\n\t        this.element = _svg2.default.createElement('svg');\n\t        this.marks = [];\n\n\t        // Match the coordinates of the target element\n\t        this.element.style.position = 'absolute';\n\t        // Disable pointer events\n\t        this.element.setAttribute('pointer-events', 'none');\n\n\t        // Set up mouse event proxying between the target element and the marks\n\t        _events2.default.proxyMouse(this.target, this.marks);\n\n\t        this.container = container;\n\t        this.container.appendChild(this.element);\n\n\t        this.render();\n\t    }\n\n\t    _createClass(Pane, [{\n\t        key: 'addMark',\n\t        value: function addMark(mark) {\n\t            var g = _svg2.default.createElement('g');\n\t            this.element.appendChild(g);\n\t            mark.bind(g, this.container);\n\n\t            this.marks.push(mark);\n\n\t            mark.render();\n\t            return mark;\n\t        }\n\t    }, {\n\t        key: 'removeMark',\n\t        value: function removeMark(mark) {\n\t            var idx = this.marks.indexOf(mark);\n\t            if (idx === -1) {\n\t                return;\n\t            }\n\t            var el = mark.unbind();\n\t            this.element.removeChild(el);\n\t            this.marks.splice(idx, 1);\n\t        }\n\t    }, {\n\t        key: 'render',\n\t        value: function render() {\n\t            setCoords(this.element, coords(this.target, this.container));\n\t            var _iteratorNormalCompletion = true;\n\t            var _didIteratorError = false;\n\t            var _iteratorError = undefined;\n\n\t            try {\n\t                for (var _iterator = this.marks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t                    var m = _step.value;\n\n\t                    m.render();\n\t                }\n\t            } catch (err) {\n\t                _didIteratorError = true;\n\t                _iteratorError = err;\n\t            } finally {\n\t                try {\n\t                    if (!_iteratorNormalCompletion && _iterator.return) {\n\t                        _iterator.return();\n\t                    }\n\t                } finally {\n\t                    if (_didIteratorError) {\n\t                        throw _iteratorError;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }]);\n\n\t    return Pane;\n\t}();\n\n\tvar Mark = exports.Mark = function () {\n\t    function Mark() {\n\t        _classCallCheck(this, Mark);\n\n\t        this.element = null;\n\t    }\n\n\t    _createClass(Mark, [{\n\t        key: 'bind',\n\t        value: function bind(element, container) {\n\t            this.element = element;\n\t            this.container = container;\n\t        }\n\t    }, {\n\t        key: 'unbind',\n\t        value: function unbind() {\n\t            var el = this.element;\n\t            this.element = null;\n\t            return el;\n\t        }\n\t    }, {\n\t        key: 'render',\n\t        value: function render() {}\n\t    }, {\n\t        key: 'dispatchEvent',\n\t        value: function dispatchEvent(e) {\n\t            if (!this.element) return;\n\t            this.element.dispatchEvent(e);\n\t        }\n\t    }, {\n\t        key: 'getBoundingClientRect',\n\t        value: function getBoundingClientRect() {\n\t            return this.element.getBoundingClientRect();\n\t        }\n\t    }, {\n\t        key: 'getClientRects',\n\t        value: function getClientRects() {\n\t            var rects = [];\n\t            var el = this.element.firstChild;\n\t            while (el) {\n\t                rects.push(el.getBoundingClientRect());\n\t                el = el.nextSibling;\n\t            }\n\t            return rects;\n\t        }\n\t    }, {\n\t        key: 'filteredRanges',\n\t        value: function filteredRanges() {\n\t            var rects = Array.from(this.range.getClientRects());\n\n\t            // De-duplicate the boxes\n\t            return rects.filter(function (box) {\n\t                for (var i = 0; i < rects.length; i++) {\n\t                    if (rects[i] === box) {\n\t                        return true;\n\t                    }\n\t                    var contained = contains(rects[i], box);\n\t                    if (contained) {\n\t                        return false;\n\t                    }\n\t                }\n\t                return true;\n\t            });\n\t        }\n\t    }]);\n\n\t    return Mark;\n\t}();\n\n\tvar Highlight = exports.Highlight = function (_Mark) {\n\t    _inherits(Highlight, _Mark);\n\n\t    function Highlight(range, className, data, attributes) {\n\t        _classCallCheck(this, Highlight);\n\n\t        var _this = _possibleConstructorReturn(this, (Highlight.__proto__ || Object.getPrototypeOf(Highlight)).call(this));\n\n\t        _this.range = range;\n\t        _this.className = className;\n\t        _this.data = data || {};\n\t        _this.attributes = attributes || {};\n\t        return _this;\n\t    }\n\n\t    _createClass(Highlight, [{\n\t        key: 'bind',\n\t        value: function bind(element, container) {\n\t            _get(Highlight.prototype.__proto__ || Object.getPrototypeOf(Highlight.prototype), 'bind', this).call(this, element, container);\n\n\t            for (var attr in this.data) {\n\t                if (this.data.hasOwnProperty(attr)) {\n\t                    this.element.dataset[attr] = this.data[attr];\n\t                }\n\t            }\n\n\t            for (var attr in this.attributes) {\n\t                if (this.attributes.hasOwnProperty(attr)) {\n\t                    this.element.setAttribute(attr, this.attributes[attr]);\n\t                }\n\t            }\n\n\t            if (this.className) {\n\t                this.element.classList.add(this.className);\n\t            }\n\t        }\n\t    }, {\n\t        key: 'render',\n\t        value: function render() {\n\t            // Empty element\n\t            while (this.element.firstChild) {\n\t                this.element.removeChild(this.element.firstChild);\n\t            }\n\n\t            var docFrag = this.element.ownerDocument.createDocumentFragment();\n\t            var filtered = this.filteredRanges();\n\t            var offset = this.element.getBoundingClientRect();\n\t            var container = this.container.getBoundingClientRect();\n\n\t            for (var i = 0, len = filtered.length; i < len; i++) {\n\t                var r = filtered[i];\n\t                var el = _svg2.default.createElement('rect');\n\t                el.setAttribute('x', r.left - offset.left + container.left);\n\t                el.setAttribute('y', r.top - offset.top + container.top);\n\t                el.setAttribute('height', r.height);\n\t                el.setAttribute('width', r.width);\n\t                docFrag.appendChild(el);\n\t            }\n\n\t            this.element.appendChild(docFrag);\n\t        }\n\t    }]);\n\n\t    return Highlight;\n\t}(Mark);\n\n\tvar Underline = exports.Underline = function (_Highlight) {\n\t    _inherits(Underline, _Highlight);\n\n\t    function Underline(range, className, data, attributes) {\n\t        _classCallCheck(this, Underline);\n\n\t        return _possibleConstructorReturn(this, (Underline.__proto__ || Object.getPrototypeOf(Underline)).call(this, range, className, data, attributes));\n\t    }\n\n\t    _createClass(Underline, [{\n\t        key: 'render',\n\t        value: function render() {\n\t            // Empty element\n\t            while (this.element.firstChild) {\n\t                this.element.removeChild(this.element.firstChild);\n\t            }\n\n\t            var docFrag = this.element.ownerDocument.createDocumentFragment();\n\t            var filtered = this.filteredRanges();\n\t            var offset = this.element.getBoundingClientRect();\n\t            var container = this.container.getBoundingClientRect();\n\n\t            for (var i = 0, len = filtered.length; i < len; i++) {\n\t                var r = filtered[i];\n\n\t                var rect = _svg2.default.createElement('rect');\n\t                rect.setAttribute('x', r.left - offset.left + container.left);\n\t                rect.setAttribute('y', r.top - offset.top + container.top);\n\t                rect.setAttribute('height', r.height);\n\t                rect.setAttribute('width', r.width);\n\t                rect.setAttribute('fill', 'none');\n\n\t                var line = _svg2.default.createElement('line');\n\t                line.setAttribute('x1', r.left - offset.left + container.left);\n\t                line.setAttribute('x2', r.left - offset.left + container.left + r.width);\n\t                line.setAttribute('y1', r.top - offset.top + container.top + r.height - 1);\n\t                line.setAttribute('y2', r.top - offset.top + container.top + r.height - 1);\n\n\t                line.setAttribute('stroke-width', 1);\n\t                line.setAttribute('stroke', 'black'); //TODO: match text color?\n\t                line.setAttribute('stroke-linecap', 'square');\n\n\t                docFrag.appendChild(rect);\n\n\t                docFrag.appendChild(line);\n\t            }\n\n\t            this.element.appendChild(docFrag);\n\t        }\n\t    }]);\n\n\t    return Underline;\n\t}(Highlight);\n\n\tfunction coords(el, container) {\n\t    var offset = container.getBoundingClientRect();\n\t    var rect = el.getBoundingClientRect();\n\n\t    return {\n\t        top: rect.top - offset.top,\n\t        left: rect.left - offset.left,\n\t        height: el.scrollHeight,\n\t        width: el.scrollWidth\n\t    };\n\t}\n\n\tfunction setCoords(el, coords) {\n\t    el.style.setProperty('top', coords.top + 'px', 'important');\n\t    el.style.setProperty('left', coords.left + 'px', 'important');\n\t    el.style.setProperty('height', coords.height + 'px', 'important');\n\t    el.style.setProperty('width', coords.width + 'px', 'important');\n\t}\n\n\tfunction contains(rect1, rect2) {\n\t    return rect2.right <= rect1.right && rect2.left >= rect1.left && rect2.top >= rect1.top && rect2.bottom <= rect1.bottom;\n\t}\n\t});\n\n\tunwrapExports(marks);\n\tvar marks_1 = marks.Underline;\n\tvar marks_2 = marks.Highlight;\n\tvar marks_3 = marks.Mark;\n\tvar marks_4 = marks.Pane;\n\n\tvar IframeView =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function IframeView(section, options) {\n\t    classCallCheck(this, IframeView);\n\n\t    this.settings = extend({\n\t      ignoreClass: \"\",\n\t      axis: options.layout && options.layout.props.flow === \"scrolled\" ? \"vertical\" : \"horizontal\",\n\t      direction: undefined,\n\t      width: 0,\n\t      height: 0,\n\t      layout: undefined,\n\t      globalLayoutProperties: {},\n\t      method: \"url\"\n\t    }, options || {});\n\t    this.id = \"epubjs-view-\" + uuid();\n\t    this.section = section;\n\t    this.index = section.index;\n\t    this.element = this.container(this.settings.axis);\n\t    this.added = false;\n\t    this.displayed = false;\n\t    this.rendered = false; // this.width  = this.settings.width;\n\t    // this.height = this.settings.height;\n\n\t    this.fixedWidth = 0;\n\t    this.fixedHeight = 0; // Blank Cfi for Parsing\n\n\t    this.epubcfi = new EpubCFI();\n\t    this.layout = this.settings.layout; // Dom events to listen for\n\t    // this.listenedEvents = [\"keydown\", \"keyup\", \"keypressed\", \"mouseup\", \"mousedown\", \"click\", \"touchend\", \"touchstart\"];\n\n\t    this.pane = undefined;\n\t    this.highlights = {};\n\t    this.underlines = {};\n\t    this.marks = {};\n\t  }\n\n\t  createClass(IframeView, [{\n\t    key: \"container\",\n\t    value: function container(axis) {\n\t      var element = document.createElement(\"div\");\n\t      element.classList.add(\"epub-view\"); // this.element.style.minHeight = \"100px\";\n\n\t      element.style.height = \"0px\";\n\t      element.style.width = \"0px\";\n\t      element.style.overflow = \"hidden\";\n\t      element.style.position = \"relative\";\n\t      element.style.display = \"block\";\n\n\t      if (axis && axis == \"horizontal\") {\n\t        element.style.flex = \"none\";\n\t      } else {\n\t        element.style.flex = \"initial\";\n\t      }\n\n\t      return element;\n\t    }\n\t  }, {\n\t    key: \"create\",\n\t    value: function create() {\n\t      if (this.iframe) {\n\t        return this.iframe;\n\t      }\n\n\t      if (!this.element) {\n\t        this.element = this.createContainer();\n\t      }\n\n\t      this.iframe = document.createElement(\"iframe\");\n\t      this.iframe.id = this.id;\n\t      this.iframe.scrolling = \"no\"; // Might need to be removed: breaks ios width calculations\n\n\t      this.iframe.style.overflow = \"hidden\";\n\t      this.iframe.seamless = \"seamless\"; // Back up if seamless isn't supported\n\n\t      this.iframe.style.border = \"none\";\n\t      this.iframe.setAttribute(\"enable-annotation\", \"true\");\n\t      this.resizing = true; // this.iframe.style.display = \"none\";\n\n\t      this.element.style.visibility = \"hidden\";\n\t      this.iframe.style.visibility = \"hidden\";\n\t      this.iframe.style.width = \"0\";\n\t      this.iframe.style.height = \"0\";\n\t      this._width = 0;\n\t      this._height = 0;\n\t      this.element.setAttribute(\"ref\", this.index);\n\t      this.element.appendChild(this.iframe);\n\t      this.added = true;\n\t      this.elementBounds = bounds(this.element); // if(width || height){\n\t      //   this.resize(width, height);\n\t      // } else if(this.width && this.height){\n\t      //   this.resize(this.width, this.height);\n\t      // } else {\n\t      //   this.iframeBounds = bounds(this.iframe);\n\t      // }\n\n\t      if (\"srcdoc\" in this.iframe) {\n\t        this.supportsSrcdoc = true;\n\t      } else {\n\t        this.supportsSrcdoc = false;\n\t      } // if (!this.settings.method) {\n\t      // \tthis.settings.method = this.supportsSrcdoc ? \"srcdoc\" : \"write\";\n\t      // }\n\n\n\t      return this.iframe;\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render(request$$1, show) {\n\t      var contents; // view.onLayout = this.layout.format.bind(this.layout);\n\n\t      this.create(); // Fit to size of the container, apply padding\n\n\t      this.size();\n\n\t      if (this.settings.method === \"url\") {\n\t        contents = this.section.href;\n\t      } else if (contents) {\n\t        contents = this.section.contents;\n\t      } else {\n\t        contents = request(this.section.href);\n\t      } // Render Chain\n\n\n\t      return this.load(contents).then(function () {\n\t        var _this = this;\n\n\t        // apply the layout function to the contents\n\t        this.layout.format(this.contents); // find and report the writingMode axis\n\n\t        var writingMode = this.contents.writingMode();\n\t        var axis = writingMode.indexOf(\"vertical\") === 0 ? \"vertical\" : \"horizontal\";\n\t        this.setAxis(axis);\n\t        this.emit(EVENTS.VIEWS.AXIS, axis); // Listen for events that require an expansion of the iframe\n\n\t        this.addListeners();\n\t        return new Promise(function (resolve, reject) {\n\t          // Expand the iframe to the full size of the content\n\t          _this.expand();\n\n\t          resolve();\n\t        });\n\t      }.bind(this), function (e) {\n\t        this.emit(EVENTS.VIEWS.LOAD_ERROR, e);\n\t        return new Promise(function (resolve, reject) {\n\t          reject(e);\n\t        });\n\t      }.bind(this)).then(function () {\n\t        this.emit(EVENTS.VIEWS.RENDERED, this.section);\n\t      }.bind(this));\n\t    }\n\t  }, {\n\t    key: \"reset\",\n\t    value: function reset() {\n\t      if (this.iframe) {\n\t        this.iframe.style.width = \"0\";\n\t        this.iframe.style.height = \"0\";\n\t        this._width = 0;\n\t        this._height = 0;\n\t        this._textWidth = undefined;\n\t        this._contentWidth = undefined;\n\t        this._textHeight = undefined;\n\t        this._contentHeight = undefined;\n\t      }\n\n\t      this._needsReframe = true;\n\t    } // Determine locks base on settings\n\n\t  }, {\n\t    key: \"size\",\n\t    value: function size(_width, _height) {\n\t      var width = _width || this.settings.width;\n\t      var height = _height || this.settings.height;\n\n\t      if (this.layout.name === \"pre-paginated\") {\n\t        this.lock(\"both\", width, height);\n\t      } else if (this.settings.axis === \"horizontal\") {\n\t        this.lock(\"height\", width, height);\n\t      } else {\n\t        this.lock(\"width\", width, height);\n\t      }\n\n\t      this.settings.width = width;\n\t      this.settings.height = height;\n\t    } // Lock an axis to element dimensions, taking borders into account\n\n\t  }, {\n\t    key: \"lock\",\n\t    value: function lock(what, width, height) {\n\t      var elBorders = borders(this.element);\n\t      var iframeBorders;\n\n\t      if (this.iframe) {\n\t        iframeBorders = borders(this.iframe);\n\t      } else {\n\t        iframeBorders = {\n\t          width: 0,\n\t          height: 0\n\t        };\n\t      }\n\n\t      if (what == \"width\" && isNumber(width)) {\n\t        this.lockedWidth = width - elBorders.width - iframeBorders.width; // this.resize(this.lockedWidth, width); //  width keeps ratio correct\n\t      }\n\n\t      if (what == \"height\" && isNumber(height)) {\n\t        this.lockedHeight = height - elBorders.height - iframeBorders.height; // this.resize(width, this.lockedHeight);\n\t      }\n\n\t      if (what === \"both\" && isNumber(width) && isNumber(height)) {\n\t        this.lockedWidth = width - elBorders.width - iframeBorders.width;\n\t        this.lockedHeight = height - elBorders.height - iframeBorders.height; // this.resize(this.lockedWidth, this.lockedHeight);\n\t      }\n\n\t      if (this.displayed && this.iframe) {\n\t        // this.contents.layout();\n\t        this.expand();\n\t      }\n\t    } // Resize a single axis based on content dimensions\n\n\t  }, {\n\t    key: \"expand\",\n\t    value: function expand(force) {\n\t      var width = this.lockedWidth;\n\t      var height = this.lockedHeight;\n\t      var columns;\n\t      if (!this.iframe || this._expanding) return;\n\t      this._expanding = true;\n\n\t      if (this.layout.name === \"pre-paginated\") {\n\t        width = this.layout.columnWidth;\n\t        height = this.layout.height;\n\t      } // Expand Horizontally\n\t      else if (this.settings.axis === \"horizontal\") {\n\t          // Get the width of the text\n\t          width = this.contents.textWidth();\n\n\t          if (width % this.layout.pageWidth > 0) {\n\t            width = Math.ceil(width / this.layout.pageWidth) * this.layout.pageWidth;\n\t          }\n\n\t          if (this.settings.forceEvenPages) {\n\t            columns = width / this.layout.delta;\n\n\t            if (this.layout.divisor > 1 && this.layout.name === \"reflowable\" && columns % 2 > 0) {\n\t              // add a blank page\n\t              width += this.layout.gap + this.layout.columnWidth;\n\t            }\n\t          }\n\t        } // Expand Vertically\n\t        else if (this.settings.axis === \"vertical\") {\n\t            height = this.contents.scrollHeight();\n\t          } // Only Resize if dimensions have changed or\n\t      // if Frame is still hidden, so needs reframing\n\n\n\t      if (this._needsReframe || width != this._width || height != this._height) {\n\t        this.reframe(width, height);\n\t      }\n\n\t      this._expanding = false;\n\t    }\n\t  }, {\n\t    key: \"reframe\",\n\t    value: function reframe(width, height) {\n\t      var size;\n\n\t      if (isNumber(width)) {\n\t        this.element.style.width = width + \"px\";\n\t        this.iframe.style.width = width + \"px\";\n\t        this._width = width;\n\t      }\n\n\t      if (isNumber(height)) {\n\t        this.element.style.height = height + \"px\";\n\t        this.iframe.style.height = height + \"px\";\n\t        this._height = height;\n\t      }\n\n\t      var widthDelta = this.prevBounds ? width - this.prevBounds.width : width;\n\t      var heightDelta = this.prevBounds ? height - this.prevBounds.height : height;\n\t      size = {\n\t        width: width,\n\t        height: height,\n\t        widthDelta: widthDelta,\n\t        heightDelta: heightDelta\n\t      };\n\t      this.pane && this.pane.render();\n\t      this.onResize(this, size);\n\t      this.emit(EVENTS.VIEWS.RESIZED, size);\n\t      this.prevBounds = size;\n\t      this.elementBounds = bounds(this.element);\n\t    }\n\t  }, {\n\t    key: \"load\",\n\t    value: function load(contents) {\n\t      var _this2 = this;\n\n\t      var loading = new defer();\n\t      var loaded = loading.promise;\n\n\t      if (!this.iframe) {\n\t        loading.reject(new Error(\"No Iframe Available\"));\n\t        return loaded;\n\t      }\n\n\t      this.iframe.onload = function (event) {\n\t        this.onLoad(event, loading);\n\t      }.bind(this);\n\n\t      if (this.settings.method != \"url\") {\n\t        contents.then(function (r) {\n\t          var text = serialize(r);\n\n\t          if (_this2.settings.method === \"blobUrl\") {\n\t            _this2.blobUrl = createBlobUrl(text, \"application/xhtml+xml\");\n\t            _this2.iframe.src = _this2.blobUrl;\n\t          } else if (_this2.settings.method === \"srcdoc\") {\n\t            _this2.iframe.srcdoc = text;\n\t          }\n\t        });\n\t      } else {\n\t        this.iframe.src = contents;\n\t      }\n\n\t      return loaded;\n\t    }\n\t  }, {\n\t    key: \"onLoad\",\n\t    value: function onLoad(event, promise) {\n\t      var _this3 = this;\n\n\t      this.window = this.iframe.contentWindow;\n\t      this.document = this.iframe.contentDocument;\n\t      this.contents = new Contents(this.document, this.document.body, this.section.cfiBase, this.section.index);\n\t      this.rendering = false;\n\t      /*\n\t      TODO: this seems not needed with replace cannonical\n\t      var link = this.document.querySelector(\"link[rel='canonical']\");\n\t      if (link) {\n\t      \tlink.setAttribute(\"href\", this.section.canonical);\n\t      } else {\n\t      \tlink = this.document.createElement(\"link\");\n\t      \tlink.setAttribute(\"rel\", \"canonical\");\n\t      \tlink.setAttribute(\"href\", this.section.canonical);\n\t      \tthis.document.querySelector(\"head\").appendChild(link);\n\t      }\n\t      */\n\n\t      this.contents.on(EVENTS.CONTENTS.EXPAND, function () {\n\t        if (_this3.displayed && _this3.iframe) {\n\t          _this3.expand();\n\n\t          if (_this3.contents) {\n\t            _this3.layout.format(_this3.contents);\n\t          }\n\t        }\n\t      });\n\t      this.contents.on(EVENTS.CONTENTS.RESIZE, function (e) {\n\t        if (_this3.displayed && _this3.iframe) {\n\t          _this3.expand();\n\n\t          if (_this3.contents) {\n\t            _this3.layout.format(_this3.contents);\n\t          }\n\t        }\n\t      });\n\t      promise.resolve(this.contents);\n\t    }\n\t  }, {\n\t    key: \"setLayout\",\n\t    value: function setLayout(layout) {\n\t      this.layout = layout;\n\n\t      if (this.contents) {\n\t        this.layout.format(this.contents);\n\t        this.expand();\n\t      }\n\t    }\n\t  }, {\n\t    key: \"setAxis\",\n\t    value: function setAxis(axis) {\n\t      // Force vertical for scrolled\n\t      if (this.layout.props.flow === \"scrolled\") {\n\t        axis = \"vertical\";\n\t      }\n\n\t      this.settings.axis = axis;\n\n\t      if (axis == \"horizontal\") {\n\t        this.element.style.flex = \"none\";\n\t      } else {\n\t        this.element.style.flex = \"initial\";\n\t      }\n\n\t      this.size();\n\t    }\n\t  }, {\n\t    key: \"addListeners\",\n\t    value: function addListeners() {//TODO: Add content listeners for expanding\n\t    }\n\t  }, {\n\t    key: \"removeListeners\",\n\t    value: function removeListeners(layoutFunc) {//TODO: remove content listeners for expanding\n\t    }\n\t  }, {\n\t    key: \"display\",\n\t    value: function display(request$$1) {\n\t      var displayed = new defer();\n\n\t      if (!this.displayed) {\n\t        this.render(request$$1).then(function () {\n\t          this.emit(EVENTS.VIEWS.DISPLAYED, this);\n\t          this.onDisplayed(this);\n\t          this.displayed = true;\n\t          displayed.resolve(this);\n\t        }.bind(this), function (err) {\n\t          displayed.reject(err, this);\n\t        });\n\t      } else {\n\t        displayed.resolve(this);\n\t      }\n\n\t      return displayed.promise;\n\t    }\n\t  }, {\n\t    key: \"show\",\n\t    value: function show() {\n\t      this.element.style.visibility = \"visible\";\n\n\t      if (this.iframe) {\n\t        this.iframe.style.visibility = \"visible\"; // Remind Safari to redraw the iframe\n\n\t        this.iframe.style.transform = \"translateZ(0)\";\n\t        this.iframe.offsetWidth;\n\t        this.iframe.style.transform = null;\n\t      }\n\n\t      this.emit(EVENTS.VIEWS.SHOWN, this);\n\t    }\n\t  }, {\n\t    key: \"hide\",\n\t    value: function hide() {\n\t      // this.iframe.style.display = \"none\";\n\t      this.element.style.visibility = \"hidden\";\n\t      this.iframe.style.visibility = \"hidden\";\n\t      this.stopExpanding = true;\n\t      this.emit(EVENTS.VIEWS.HIDDEN, this);\n\t    }\n\t  }, {\n\t    key: \"offset\",\n\t    value: function offset() {\n\t      return {\n\t        top: this.element.offsetTop,\n\t        left: this.element.offsetLeft\n\t      };\n\t    }\n\t  }, {\n\t    key: \"width\",\n\t    value: function width() {\n\t      return this._width;\n\t    }\n\t  }, {\n\t    key: \"height\",\n\t    value: function height() {\n\t      return this._height;\n\t    }\n\t  }, {\n\t    key: \"position\",\n\t    value: function position() {\n\t      return this.element.getBoundingClientRect();\n\t    }\n\t  }, {\n\t    key: \"locationOf\",\n\t    value: function locationOf$$1(target) {\n\t      // var parentPos = this.iframe.getBoundingClientRect();\n\t      var targetPos = this.contents.locationOf(target, this.settings.ignoreClass);\n\t      return {\n\t        \"left\": targetPos.left,\n\t        \"top\": targetPos.top\n\t      };\n\t    }\n\t  }, {\n\t    key: \"onDisplayed\",\n\t    value: function onDisplayed(view) {// Stub, override with a custom functions\n\t    }\n\t  }, {\n\t    key: \"onResize\",\n\t    value: function onResize(view, e) {// Stub, override with a custom functions\n\t    }\n\t  }, {\n\t    key: \"bounds\",\n\t    value: function bounds$$1(force) {\n\t      if (force || !this.elementBounds) {\n\t        this.elementBounds = bounds(this.element);\n\t      }\n\n\t      return this.elementBounds;\n\t    }\n\t  }, {\n\t    key: \"highlight\",\n\t    value: function highlight(cfiRange) {\n\t      var _this4 = this;\n\n\t      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t      var cb = arguments.length > 2 ? arguments[2] : undefined;\n\t      var className = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"epubjs-hl\";\n\t      var styles = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n\t      if (!this.contents) {\n\t        return;\n\t      }\n\n\t      var attributes = Object.assign({\n\t        \"fill\": \"yellow\",\n\t        \"fill-opacity\": \"0.3\",\n\t        \"mix-blend-mode\": \"multiply\"\n\t      }, styles);\n\t      var range = this.contents.range(cfiRange);\n\n\t      var emitter = function emitter() {\n\t        _this4.emit(EVENTS.VIEWS.MARK_CLICKED, cfiRange, data);\n\t      };\n\n\t      data[\"epubcfi\"] = cfiRange;\n\n\t      if (!this.pane) {\n\t        this.pane = new marks_4(this.iframe, this.element);\n\t      }\n\n\t      var m = new marks_2(range, className, data, attributes);\n\t      var h = this.pane.addMark(m);\n\t      this.highlights[cfiRange] = {\n\t        \"mark\": h,\n\t        \"element\": h.element,\n\t        \"listeners\": [emitter, cb]\n\t      };\n\t      h.element.setAttribute(\"ref\", className);\n\t      h.element.addEventListener(\"click\", emitter);\n\t      h.element.addEventListener(\"touchstart\", emitter);\n\n\t      if (cb) {\n\t        h.element.addEventListener(\"click\", cb);\n\t        h.element.addEventListener(\"touchstart\", cb);\n\t      }\n\n\t      return h;\n\t    }\n\t  }, {\n\t    key: \"underline\",\n\t    value: function underline(cfiRange) {\n\t      var _this5 = this;\n\n\t      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t      var cb = arguments.length > 2 ? arguments[2] : undefined;\n\t      var className = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"epubjs-ul\";\n\t      var styles = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n\t      if (!this.contents) {\n\t        return;\n\t      }\n\n\t      var attributes = Object.assign({\n\t        \"stroke\": \"black\",\n\t        \"stroke-opacity\": \"0.3\",\n\t        \"mix-blend-mode\": \"multiply\"\n\t      }, styles);\n\t      var range = this.contents.range(cfiRange);\n\n\t      var emitter = function emitter() {\n\t        _this5.emit(EVENTS.VIEWS.MARK_CLICKED, cfiRange, data);\n\t      };\n\n\t      data[\"epubcfi\"] = cfiRange;\n\n\t      if (!this.pane) {\n\t        this.pane = new marks_4(this.iframe, this.element);\n\t      }\n\n\t      var m = new marks_1(range, className, data, attributes);\n\t      var h = this.pane.addMark(m);\n\t      this.underlines[cfiRange] = {\n\t        \"mark\": h,\n\t        \"element\": h.element,\n\t        \"listeners\": [emitter, cb]\n\t      };\n\t      h.element.setAttribute(\"ref\", className);\n\t      h.element.addEventListener(\"click\", emitter);\n\t      h.element.addEventListener(\"touchstart\", emitter);\n\n\t      if (cb) {\n\t        h.element.addEventListener(\"click\", cb);\n\t        h.element.addEventListener(\"touchstart\", cb);\n\t      }\n\n\t      return h;\n\t    }\n\t  }, {\n\t    key: \"mark\",\n\t    value: function mark(cfiRange) {\n\t      var _this6 = this;\n\n\t      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t      var cb = arguments.length > 2 ? arguments[2] : undefined;\n\n\t      if (!this.contents) {\n\t        return;\n\t      }\n\n\t      if (cfiRange in this.marks) {\n\t        var item = this.marks[cfiRange];\n\t        return item;\n\t      }\n\n\t      var range = this.contents.range(cfiRange);\n\n\t      if (!range) {\n\t        return;\n\t      }\n\n\t      var container = range.commonAncestorContainer;\n\t      var parent = container.nodeType === 1 ? container : container.parentNode;\n\n\t      var emitter = function emitter(e) {\n\t        _this6.emit(EVENTS.VIEWS.MARK_CLICKED, cfiRange, data);\n\t      };\n\n\t      if (range.collapsed && container.nodeType === 1) {\n\t        range = new Range();\n\t        range.selectNodeContents(container);\n\t      } else if (range.collapsed) {\n\t        // Webkit doesn't like collapsed ranges\n\t        range = new Range();\n\t        range.selectNodeContents(parent);\n\t      }\n\n\t      var top, right, left;\n\n\t      if (this.layout.name === \"pre-paginated\" || this.settings.axis !== \"horizontal\") {\n\t        var pos = range.getBoundingClientRect();\n\t        top = pos.top;\n\t        right = pos.right;\n\t      } else {\n\t        // Element might break columns, so find the left most element\n\t        var rects = range.getClientRects();\n\t        var rect;\n\n\t        for (var i = 0; i != rects.length; i++) {\n\t          rect = rects[i];\n\n\t          if (!left || rect.left < left) {\n\t            left = rect.left;\n\t            right = left + this.layout.columnWidth - this.layout.gap;\n\t            top = rect.top;\n\t          }\n\t        }\n\t      }\n\n\t      var mark = this.document.createElement(\"a\");\n\t      mark.setAttribute(\"ref\", \"epubjs-mk\");\n\t      mark.style.position = \"absolute\";\n\t      mark.style.top = \"\".concat(top, \"px\");\n\t      mark.style.left = \"\".concat(right, \"px\");\n\t      mark.dataset[\"epubcfi\"] = cfiRange;\n\n\t      if (data) {\n\t        Object.keys(data).forEach(function (key) {\n\t          mark.dataset[key] = data[key];\n\t        });\n\t      }\n\n\t      if (cb) {\n\t        mark.addEventListener(\"click\", cb);\n\t        mark.addEventListener(\"touchstart\", cb);\n\t      }\n\n\t      mark.addEventListener(\"click\", emitter);\n\t      mark.addEventListener(\"touchstart\", emitter);\n\t      this.element.appendChild(mark);\n\t      this.marks[cfiRange] = {\n\t        \"element\": mark,\n\t        \"listeners\": [emitter, cb]\n\t      };\n\t      return parent;\n\t    }\n\t  }, {\n\t    key: \"unhighlight\",\n\t    value: function unhighlight(cfiRange) {\n\t      var item;\n\n\t      if (cfiRange in this.highlights) {\n\t        item = this.highlights[cfiRange];\n\t        this.pane.removeMark(item.mark);\n\t        item.listeners.forEach(function (l) {\n\t          if (l) {\n\t            item.element.removeEventListener(\"click\", l);\n\t          }\n\t        });\n\t        delete this.highlights[cfiRange];\n\t      }\n\t    }\n\t  }, {\n\t    key: \"ununderline\",\n\t    value: function ununderline(cfiRange) {\n\t      var item;\n\n\t      if (cfiRange in this.underlines) {\n\t        item = this.underlines[cfiRange];\n\t        this.pane.removeMark(item.mark);\n\t        item.listeners.forEach(function (l) {\n\t          if (l) {\n\t            item.element.removeEventListener(\"click\", l);\n\t          }\n\t        });\n\t        delete this.underlines[cfiRange];\n\t      }\n\t    }\n\t  }, {\n\t    key: \"unmark\",\n\t    value: function unmark(cfiRange) {\n\t      var item;\n\n\t      if (cfiRange in this.marks) {\n\t        item = this.marks[cfiRange];\n\t        this.element.removeChild(item.element);\n\t        item.listeners.forEach(function (l) {\n\t          if (l) {\n\t            item.element.removeEventListener(\"click\", l);\n\t          }\n\t        });\n\t        delete this.marks[cfiRange];\n\t      }\n\t    }\n\t  }, {\n\t    key: \"destroy\",\n\t    value: function destroy() {\n\t      for (var cfiRange in this.highlights) {\n\t        this.unhighlight(cfiRange);\n\t      }\n\n\t      for (var _cfiRange in this.underlines) {\n\t        this.ununderline(_cfiRange);\n\t      }\n\n\t      for (var _cfiRange2 in this.marks) {\n\t        this.unmark(_cfiRange2);\n\t      }\n\n\t      if (this.blobUrl) {\n\t        revokeBlobUrl(this.blobUrl);\n\t      }\n\n\t      if (this.displayed) {\n\t        this.displayed = false;\n\t        this.removeListeners();\n\t        this.stopExpanding = true;\n\t        this.element.removeChild(this.iframe);\n\t        this.iframe = undefined;\n\t        this.contents = undefined;\n\t        this._textWidth = null;\n\t        this._textHeight = null;\n\t        this._width = null;\n\t        this._height = null;\n\t      } // this.element.style.height = \"0px\";\n\t      // this.element.style.width = \"0px\";\n\n\t    }\n\t  }]);\n\n\t  return IframeView;\n\t}();\n\n\teventEmitter(IframeView.prototype);\n\n\t/**\n\t * Checks if `value` is the\n\t * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n\t * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t * @example\n\t *\n\t * _.isObject({});\n\t * // => true\n\t *\n\t * _.isObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObject(_.noop);\n\t * // => true\n\t *\n\t * _.isObject(null);\n\t * // => false\n\t */\n\tfunction isObject(value) {\n\t  var type = typeof value;\n\t  return value != null && (type == 'object' || type == 'function');\n\t}\n\n\tvar isObject_1 = isObject;\n\n\t/** Detect free variable `global` from Node.js. */\n\tvar freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n\tvar _freeGlobal = freeGlobal;\n\n\t/** Detect free variable `self`. */\n\tvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n\t/** Used as a reference to the global object. */\n\tvar root = _freeGlobal || freeSelf || Function('return this')();\n\n\tvar _root = root;\n\n\t/**\n\t * Gets the timestamp of the number of milliseconds that have elapsed since\n\t * the Unix epoch (1 January 1970 00:00:00 UTC).\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 2.4.0\n\t * @category Date\n\t * @returns {number} Returns the timestamp.\n\t * @example\n\t *\n\t * _.defer(function(stamp) {\n\t *   console.log(_.now() - stamp);\n\t * }, _.now());\n\t * // => Logs the number of milliseconds it took for the deferred invocation.\n\t */\n\tvar now = function() {\n\t  return _root.Date.now();\n\t};\n\n\tvar now_1 = now;\n\n\t/** Built-in value references. */\n\tvar Symbol$1 = _root.Symbol;\n\n\tvar _Symbol = Symbol$1;\n\n\t/** Used for built-in method references. */\n\tvar objectProto = Object.prototype;\n\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty = objectProto.hasOwnProperty;\n\n\t/**\n\t * Used to resolve the\n\t * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n\t * of values.\n\t */\n\tvar nativeObjectToString = objectProto.toString;\n\n\t/** Built-in value references. */\n\tvar symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;\n\n\t/**\n\t * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n\t *\n\t * @private\n\t * @param {*} value The value to query.\n\t * @returns {string} Returns the raw `toStringTag`.\n\t */\n\tfunction getRawTag(value) {\n\t  var isOwn = hasOwnProperty.call(value, symToStringTag),\n\t      tag = value[symToStringTag];\n\n\t  try {\n\t    value[symToStringTag] = undefined;\n\t  } catch (e) {}\n\n\t  var result = nativeObjectToString.call(value);\n\t  {\n\t    if (isOwn) {\n\t      value[symToStringTag] = tag;\n\t    } else {\n\t      delete value[symToStringTag];\n\t    }\n\t  }\n\t  return result;\n\t}\n\n\tvar _getRawTag = getRawTag;\n\n\t/** Used for built-in method references. */\n\tvar objectProto$1 = Object.prototype;\n\n\t/**\n\t * Used to resolve the\n\t * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n\t * of values.\n\t */\n\tvar nativeObjectToString$1 = objectProto$1.toString;\n\n\t/**\n\t * Converts `value` to a string using `Object.prototype.toString`.\n\t *\n\t * @private\n\t * @param {*} value The value to convert.\n\t * @returns {string} Returns the converted string.\n\t */\n\tfunction objectToString(value) {\n\t  return nativeObjectToString$1.call(value);\n\t}\n\n\tvar _objectToString = objectToString;\n\n\t/** `Object#toString` result references. */\n\tvar nullTag = '[object Null]',\n\t    undefinedTag = '[object Undefined]';\n\n\t/** Built-in value references. */\n\tvar symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;\n\n\t/**\n\t * The base implementation of `getTag` without fallbacks for buggy environments.\n\t *\n\t * @private\n\t * @param {*} value The value to query.\n\t * @returns {string} Returns the `toStringTag`.\n\t */\n\tfunction baseGetTag(value) {\n\t  if (value == null) {\n\t    return value === undefined ? undefinedTag : nullTag;\n\t  }\n\t  return (symToStringTag$1 && symToStringTag$1 in Object(value))\n\t    ? _getRawTag(value)\n\t    : _objectToString(value);\n\t}\n\n\tvar _baseGetTag = baseGetTag;\n\n\t/**\n\t * Checks if `value` is object-like. A value is object-like if it's not `null`\n\t * and has a `typeof` result of \"object\".\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n\t * @example\n\t *\n\t * _.isObjectLike({});\n\t * // => true\n\t *\n\t * _.isObjectLike([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObjectLike(_.noop);\n\t * // => false\n\t *\n\t * _.isObjectLike(null);\n\t * // => false\n\t */\n\tfunction isObjectLike(value) {\n\t  return value != null && typeof value == 'object';\n\t}\n\n\tvar isObjectLike_1 = isObjectLike;\n\n\t/** `Object#toString` result references. */\n\tvar symbolTag = '[object Symbol]';\n\n\t/**\n\t * Checks if `value` is classified as a `Symbol` primitive or object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n\t * @example\n\t *\n\t * _.isSymbol(Symbol.iterator);\n\t * // => true\n\t *\n\t * _.isSymbol('abc');\n\t * // => false\n\t */\n\tfunction isSymbol(value) {\n\t  return typeof value == 'symbol' ||\n\t    (isObjectLike_1(value) && _baseGetTag(value) == symbolTag);\n\t}\n\n\tvar isSymbol_1 = isSymbol;\n\n\t/** Used as references for various `Number` constants. */\n\tvar NAN = 0 / 0;\n\n\t/** Used to match leading and trailing whitespace. */\n\tvar reTrim = /^\\s+|\\s+$/g;\n\n\t/** Used to detect bad signed hexadecimal string values. */\n\tvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n\t/** Used to detect binary string values. */\n\tvar reIsBinary = /^0b[01]+$/i;\n\n\t/** Used to detect octal string values. */\n\tvar reIsOctal = /^0o[0-7]+$/i;\n\n\t/** Built-in method references without a dependency on `root`. */\n\tvar freeParseInt = parseInt;\n\n\t/**\n\t * Converts `value` to a number.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to process.\n\t * @returns {number} Returns the number.\n\t * @example\n\t *\n\t * _.toNumber(3.2);\n\t * // => 3.2\n\t *\n\t * _.toNumber(Number.MIN_VALUE);\n\t * // => 5e-324\n\t *\n\t * _.toNumber(Infinity);\n\t * // => Infinity\n\t *\n\t * _.toNumber('3.2');\n\t * // => 3.2\n\t */\n\tfunction toNumber(value) {\n\t  if (typeof value == 'number') {\n\t    return value;\n\t  }\n\t  if (isSymbol_1(value)) {\n\t    return NAN;\n\t  }\n\t  if (isObject_1(value)) {\n\t    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n\t    value = isObject_1(other) ? (other + '') : other;\n\t  }\n\t  if (typeof value != 'string') {\n\t    return value === 0 ? value : +value;\n\t  }\n\t  value = value.replace(reTrim, '');\n\t  var isBinary = reIsBinary.test(value);\n\t  return (isBinary || reIsOctal.test(value))\n\t    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n\t    : (reIsBadHex.test(value) ? NAN : +value);\n\t}\n\n\tvar toNumber_1 = toNumber;\n\n\t/** Error message constants. */\n\tvar FUNC_ERROR_TEXT = 'Expected a function';\n\n\t/* Built-in method references for those with the same name as other `lodash` methods. */\n\tvar nativeMax = Math.max,\n\t    nativeMin = Math.min;\n\n\t/**\n\t * Creates a debounced function that delays invoking `func` until after `wait`\n\t * milliseconds have elapsed since the last time the debounced function was\n\t * invoked. The debounced function comes with a `cancel` method to cancel\n\t * delayed `func` invocations and a `flush` method to immediately invoke them.\n\t * Provide `options` to indicate whether `func` should be invoked on the\n\t * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n\t * with the last arguments provided to the debounced function. Subsequent\n\t * calls to the debounced function return the result of the last `func`\n\t * invocation.\n\t *\n\t * **Note:** If `leading` and `trailing` options are `true`, `func` is\n\t * invoked on the trailing edge of the timeout only if the debounced function\n\t * is invoked more than once during the `wait` timeout.\n\t *\n\t * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n\t * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n\t *\n\t * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n\t * for details over the differences between `_.debounce` and `_.throttle`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Function\n\t * @param {Function} func The function to debounce.\n\t * @param {number} [wait=0] The number of milliseconds to delay.\n\t * @param {Object} [options={}] The options object.\n\t * @param {boolean} [options.leading=false]\n\t *  Specify invoking on the leading edge of the timeout.\n\t * @param {number} [options.maxWait]\n\t *  The maximum time `func` is allowed to be delayed before it's invoked.\n\t * @param {boolean} [options.trailing=true]\n\t *  Specify invoking on the trailing edge of the timeout.\n\t * @returns {Function} Returns the new debounced function.\n\t * @example\n\t *\n\t * // Avoid costly calculations while the window size is in flux.\n\t * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n\t *\n\t * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n\t * jQuery(element).on('click', _.debounce(sendMail, 300, {\n\t *   'leading': true,\n\t *   'trailing': false\n\t * }));\n\t *\n\t * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n\t * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n\t * var source = new EventSource('/stream');\n\t * jQuery(source).on('message', debounced);\n\t *\n\t * // Cancel the trailing debounced invocation.\n\t * jQuery(window).on('popstate', debounced.cancel);\n\t */\n\tfunction debounce(func, wait, options) {\n\t  var lastArgs,\n\t      lastThis,\n\t      maxWait,\n\t      result,\n\t      timerId,\n\t      lastCallTime,\n\t      lastInvokeTime = 0,\n\t      leading = false,\n\t      maxing = false,\n\t      trailing = true;\n\n\t  if (typeof func != 'function') {\n\t    throw new TypeError(FUNC_ERROR_TEXT);\n\t  }\n\t  wait = toNumber_1(wait) || 0;\n\t  if (isObject_1(options)) {\n\t    leading = !!options.leading;\n\t    maxing = 'maxWait' in options;\n\t    maxWait = maxing ? nativeMax(toNumber_1(options.maxWait) || 0, wait) : maxWait;\n\t    trailing = 'trailing' in options ? !!options.trailing : trailing;\n\t  }\n\n\t  function invokeFunc(time) {\n\t    var args = lastArgs,\n\t        thisArg = lastThis;\n\n\t    lastArgs = lastThis = undefined;\n\t    lastInvokeTime = time;\n\t    result = func.apply(thisArg, args);\n\t    return result;\n\t  }\n\n\t  function leadingEdge(time) {\n\t    // Reset any `maxWait` timer.\n\t    lastInvokeTime = time;\n\t    // Start the timer for the trailing edge.\n\t    timerId = setTimeout(timerExpired, wait);\n\t    // Invoke the leading edge.\n\t    return leading ? invokeFunc(time) : result;\n\t  }\n\n\t  function remainingWait(time) {\n\t    var timeSinceLastCall = time - lastCallTime,\n\t        timeSinceLastInvoke = time - lastInvokeTime,\n\t        timeWaiting = wait - timeSinceLastCall;\n\n\t    return maxing\n\t      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n\t      : timeWaiting;\n\t  }\n\n\t  function shouldInvoke(time) {\n\t    var timeSinceLastCall = time - lastCallTime,\n\t        timeSinceLastInvoke = time - lastInvokeTime;\n\n\t    // Either this is the first call, activity has stopped and we're at the\n\t    // trailing edge, the system time has gone backwards and we're treating\n\t    // it as the trailing edge, or we've hit the `maxWait` limit.\n\t    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n\t      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n\t  }\n\n\t  function timerExpired() {\n\t    var time = now_1();\n\t    if (shouldInvoke(time)) {\n\t      return trailingEdge(time);\n\t    }\n\t    // Restart the timer.\n\t    timerId = setTimeout(timerExpired, remainingWait(time));\n\t  }\n\n\t  function trailingEdge(time) {\n\t    timerId = undefined;\n\n\t    // Only invoke if we have `lastArgs` which means `func` has been\n\t    // debounced at least once.\n\t    if (trailing && lastArgs) {\n\t      return invokeFunc(time);\n\t    }\n\t    lastArgs = lastThis = undefined;\n\t    return result;\n\t  }\n\n\t  function cancel() {\n\t    if (timerId !== undefined) {\n\t      clearTimeout(timerId);\n\t    }\n\t    lastInvokeTime = 0;\n\t    lastArgs = lastCallTime = lastThis = timerId = undefined;\n\t  }\n\n\t  function flush() {\n\t    return timerId === undefined ? result : trailingEdge(now_1());\n\t  }\n\n\t  function debounced() {\n\t    var time = now_1(),\n\t        isInvoking = shouldInvoke(time);\n\n\t    lastArgs = arguments;\n\t    lastThis = this;\n\t    lastCallTime = time;\n\n\t    if (isInvoking) {\n\t      if (timerId === undefined) {\n\t        return leadingEdge(lastCallTime);\n\t      }\n\t      if (maxing) {\n\t        // Handle invocations in a tight loop.\n\t        timerId = setTimeout(timerExpired, wait);\n\t        return invokeFunc(lastCallTime);\n\t      }\n\t    }\n\t    if (timerId === undefined) {\n\t      timerId = setTimeout(timerExpired, wait);\n\t    }\n\t    return result;\n\t  }\n\t  debounced.cancel = cancel;\n\t  debounced.flush = flush;\n\t  return debounced;\n\t}\n\n\tvar debounce_1 = debounce;\n\n\t/** Error message constants. */\n\tvar FUNC_ERROR_TEXT$1 = 'Expected a function';\n\n\t/**\n\t * Creates a throttled function that only invokes `func` at most once per\n\t * every `wait` milliseconds. The throttled function comes with a `cancel`\n\t * method to cancel delayed `func` invocations and a `flush` method to\n\t * immediately invoke them. Provide `options` to indicate whether `func`\n\t * should be invoked on the leading and/or trailing edge of the `wait`\n\t * timeout. The `func` is invoked with the last arguments provided to the\n\t * throttled function. Subsequent calls to the throttled function return the\n\t * result of the last `func` invocation.\n\t *\n\t * **Note:** If `leading` and `trailing` options are `true`, `func` is\n\t * invoked on the trailing edge of the timeout only if the throttled function\n\t * is invoked more than once during the `wait` timeout.\n\t *\n\t * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n\t * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n\t *\n\t * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n\t * for details over the differences between `_.throttle` and `_.debounce`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Function\n\t * @param {Function} func The function to throttle.\n\t * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n\t * @param {Object} [options={}] The options object.\n\t * @param {boolean} [options.leading=true]\n\t *  Specify invoking on the leading edge of the timeout.\n\t * @param {boolean} [options.trailing=true]\n\t *  Specify invoking on the trailing edge of the timeout.\n\t * @returns {Function} Returns the new throttled function.\n\t * @example\n\t *\n\t * // Avoid excessively updating the position while scrolling.\n\t * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n\t *\n\t * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n\t * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n\t * jQuery(element).on('click', throttled);\n\t *\n\t * // Cancel the trailing throttled invocation.\n\t * jQuery(window).on('popstate', throttled.cancel);\n\t */\n\tfunction throttle(func, wait, options) {\n\t  var leading = true,\n\t      trailing = true;\n\n\t  if (typeof func != 'function') {\n\t    throw new TypeError(FUNC_ERROR_TEXT$1);\n\t  }\n\t  if (isObject_1(options)) {\n\t    leading = 'leading' in options ? !!options.leading : leading;\n\t    trailing = 'trailing' in options ? !!options.trailing : trailing;\n\t  }\n\t  return debounce_1(func, wait, {\n\t    'leading': leading,\n\t    'maxWait': wait,\n\t    'trailing': trailing\n\t  });\n\t}\n\n\tvar throttle_1 = throttle;\n\n\tvar Stage =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function Stage(_options) {\n\t    classCallCheck(this, Stage);\n\n\t    this.settings = _options || {};\n\t    this.id = \"epubjs-container-\" + uuid();\n\t    this.container = this.create(this.settings);\n\n\t    if (this.settings.hidden) {\n\t      this.wrapper = this.wrap(this.container);\n\t    }\n\t  }\n\t  /*\n\t  * Creates an element to render to.\n\t  * Resizes to passed width and height or to the elements size\n\t  */\n\n\n\t  createClass(Stage, [{\n\t    key: \"create\",\n\t    value: function create(options) {\n\t      var height = options.height; // !== false ? options.height : \"100%\";\n\n\t      var width = options.width; // !== false ? options.width : \"100%\";\n\n\t      var overflow = options.overflow || false;\n\t      var axis = options.axis || \"vertical\";\n\t      var direction = options.direction;\n\t      var scale = options.scale;\n\n\t      if (options.height && isNumber(options.height)) {\n\t        height = options.height + \"px\";\n\t      }\n\n\t      if (options.width && isNumber(options.width)) {\n\t        width = options.width + \"px\";\n\t      } // Create new container element\n\n\n\t      var container = document.createElement(\"div\");\n\t      container.id = this.id;\n\t      container.classList.add(\"epub-container\"); // Style Element\n\t      // container.style.fontSize = \"0\";\n\n\t      container.style.wordSpacing = \"0\";\n\t      container.style.lineHeight = \"0\";\n\t      container.style.verticalAlign = \"top\"; // container.style.position = \"relative\";\n\n\t      if (axis === \"horizontal\") {\n\t        // container.style.whiteSpace = \"nowrap\";\n\t        container.style.display = \"flex\";\n\t        container.style.flexDirection = \"row\";\n\t        container.style.flexWrap = \"nowrap\";\n\t      }\n\n\t      if (width) {\n\t        container.style.width = width;\n\t      }\n\n\t      if (height) {\n\t        container.style.height = height;\n\t      }\n\n\t      if (overflow) {\n\t        container.style.overflow = overflow;\n\t      }\n\n\t      if (direction) {\n\t        container.dir = direction;\n\t        container.style[\"direction\"] = direction;\n\t      }\n\n\t      if (direction && this.settings.fullsize) {\n\t        document.body.style[\"direction\"] = direction;\n\t      }\n\n\t      if (scale) {\n\t        container.style[\"transform-origin\"] = \"top left\";\n\t        container.style[\"transform\"] = \"scale(\" + scale + \")\";\n\t        container.style.overflow = \"visible\";\n\t      }\n\n\t      return container;\n\t    }\n\t  }, {\n\t    key: \"wrap\",\n\t    value: function wrap(container) {\n\t      var wrapper = document.createElement(\"div\");\n\t      wrapper.style.visibility = \"hidden\";\n\t      wrapper.style.overflow = \"hidden\";\n\t      wrapper.style.width = \"0\";\n\t      wrapper.style.height = \"0\";\n\t      wrapper.appendChild(container);\n\t      return wrapper;\n\t    }\n\t  }, {\n\t    key: \"getElement\",\n\t    value: function getElement(_element) {\n\t      var element;\n\n\t      if (isElement(_element)) {\n\t        element = _element;\n\t      } else if (typeof _element === \"string\") {\n\t        element = document.getElementById(_element);\n\t      }\n\n\t      if (!element) {\n\t        throw new Error(\"Not an Element\");\n\t      }\n\n\t      return element;\n\t    }\n\t  }, {\n\t    key: \"attachTo\",\n\t    value: function attachTo(what) {\n\t      var element = this.getElement(what);\n\t      var base;\n\n\t      if (!element) {\n\t        return;\n\t      }\n\n\t      if (this.settings.hidden) {\n\t        base = this.wrapper;\n\t      } else {\n\t        base = this.container;\n\t      }\n\n\t      element.appendChild(base);\n\t      this.element = element;\n\t      return element;\n\t    }\n\t  }, {\n\t    key: \"getContainer\",\n\t    value: function getContainer() {\n\t      return this.container;\n\t    }\n\t  }, {\n\t    key: \"onResize\",\n\t    value: function onResize(func) {\n\t      // Only listen to window for resize event if width and height are not fixed.\n\t      // This applies if it is set to a percent or auto.\n\t      if (!isNumber(this.settings.width) || !isNumber(this.settings.height)) {\n\t        this.resizeFunc = throttle_1(func, 50);\n\t        window.addEventListener(\"resize\", this.resizeFunc, false);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"onOrientationChange\",\n\t    value: function onOrientationChange(func) {\n\t      this.orientationChangeFunc = func;\n\t      window.addEventListener(\"orientationchange\", this.orientationChangeFunc, false);\n\t    }\n\t  }, {\n\t    key: \"size\",\n\t    value: function size(width, height) {\n\t      var bounds$$1; // var width = _width || this.settings.width;\n\t      // var height = _height || this.settings.height;\n\t      // If width or height are set to false, inherit them from containing element\n\n\t      if (width === null) {\n\t        bounds$$1 = this.element.getBoundingClientRect();\n\n\t        if (bounds$$1.width) {\n\t          width = Math.floor(bounds$$1.width);\n\t          this.container.style.width = width + \"px\";\n\t        }\n\t      } else {\n\t        if (isNumber(width)) {\n\t          this.container.style.width = width + \"px\";\n\t        } else {\n\t          this.container.style.width = width;\n\t        }\n\t      }\n\n\t      if (height === null) {\n\t        bounds$$1 = bounds$$1 || this.element.getBoundingClientRect();\n\n\t        if (bounds$$1.height) {\n\t          height = bounds$$1.height;\n\t          this.container.style.height = height + \"px\";\n\t        }\n\t      } else {\n\t        if (isNumber(height)) {\n\t          this.container.style.height = height + \"px\";\n\t        } else {\n\t          this.container.style.height = height;\n\t        }\n\t      }\n\n\t      if (!isNumber(width)) {\n\t        bounds$$1 = this.container.getBoundingClientRect();\n\t        width = Math.floor(bounds$$1.width); //height = bounds.height;\n\t      }\n\n\t      if (!isNumber(height)) {\n\t        bounds$$1 = bounds$$1 || this.container.getBoundingClientRect(); //width = bounds.width;\n\n\t        height = bounds$$1.height;\n\t      }\n\n\t      this.containerStyles = window.getComputedStyle(this.container);\n\t      this.containerPadding = {\n\t        left: parseFloat(this.containerStyles[\"padding-left\"]) || 0,\n\t        right: parseFloat(this.containerStyles[\"padding-right\"]) || 0,\n\t        top: parseFloat(this.containerStyles[\"padding-top\"]) || 0,\n\t        bottom: parseFloat(this.containerStyles[\"padding-bottom\"]) || 0\n\t      }; // Bounds not set, get them from window\n\n\t      var _windowBounds = windowBounds();\n\n\t      var bodyStyles = window.getComputedStyle(document.body);\n\t      var bodyPadding = {\n\t        left: parseFloat(bodyStyles[\"padding-left\"]) || 0,\n\t        right: parseFloat(bodyStyles[\"padding-right\"]) || 0,\n\t        top: parseFloat(bodyStyles[\"padding-top\"]) || 0,\n\t        bottom: parseFloat(bodyStyles[\"padding-bottom\"]) || 0\n\t      };\n\n\t      if (!width) {\n\t        width = _windowBounds.width - bodyPadding.left - bodyPadding.right;\n\t      }\n\n\t      if (this.settings.fullsize && !height || !height) {\n\t        height = _windowBounds.height - bodyPadding.top - bodyPadding.bottom;\n\t      }\n\n\t      this.width = width;\n\t      this.height = height;\n\t      return {\n\t        width: width - this.containerPadding.left - this.containerPadding.right,\n\t        height: height - this.containerPadding.top - this.containerPadding.bottom\n\t      };\n\t    }\n\t  }, {\n\t    key: \"bounds\",\n\t    value: function bounds$$1() {\n\t      var box;\n\n\t      if (this.container.style.overflow !== \"visible\") {\n\t        box = this.container && this.container.getBoundingClientRect();\n\t      }\n\n\t      if (!box || !box.width || !box.height) {\n\t        return windowBounds();\n\t      } else {\n\t        return box;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"getSheet\",\n\t    value: function getSheet() {\n\t      var style = document.createElement(\"style\"); // WebKit hack --> https://davidwalsh.name/add-rules-stylesheets\n\n\t      style.appendChild(document.createTextNode(\"\"));\n\t      document.head.appendChild(style);\n\t      return style.sheet;\n\t    }\n\t  }, {\n\t    key: \"addStyleRules\",\n\t    value: function addStyleRules(selector, rulesArray) {\n\t      var scope = \"#\" + this.id + \" \";\n\t      var rules = \"\";\n\n\t      if (!this.sheet) {\n\t        this.sheet = this.getSheet();\n\t      }\n\n\t      rulesArray.forEach(function (set) {\n\t        for (var prop in set) {\n\t          if (set.hasOwnProperty(prop)) {\n\t            rules += prop + \":\" + set[prop] + \";\";\n\t          }\n\t        }\n\t      });\n\t      this.sheet.insertRule(scope + selector + \" {\" + rules + \"}\", 0);\n\t    }\n\t  }, {\n\t    key: \"axis\",\n\t    value: function axis(_axis) {\n\t      if (_axis === \"horizontal\") {\n\t        this.container.style.display = \"flex\";\n\t        this.container.style.flexDirection = \"row\";\n\t        this.container.style.flexWrap = \"nowrap\";\n\t      } else {\n\t        this.container.style.display = \"block\";\n\t      }\n\t    } // orientation(orientation) {\n\t    // \tif (orientation === \"landscape\") {\n\t    //\n\t    // \t} else {\n\t    //\n\t    // \t}\n\t    //\n\t    // \tthis.orientation = orientation;\n\t    // }\n\n\t  }, {\n\t    key: \"direction\",\n\t    value: function direction(dir) {\n\t      if (this.container) {\n\t        this.container.dir = dir;\n\t        this.container.style[\"direction\"] = dir;\n\t      }\n\n\t      if (this.settings.fullsize) {\n\t        document.body.style[\"direction\"] = dir;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"scale\",\n\t    value: function scale(s) {\n\t      if (this.container) {\n\t        this.container.style[\"transform-origin\"] = \"top left\";\n\t        this.container.style[\"transform\"] = \"scale(\" + s + \")\";\n\t      }\n\t    }\n\t  }, {\n\t    key: \"destroy\",\n\t    value: function destroy() {\n\t      var base;\n\n\t      if (this.element) {\n\t        if (this.settings.hidden) {\n\t          base = this.wrapper;\n\t        } else {\n\t          base = this.container;\n\t        }\n\n\t        if (this.element.contains(base)) {\n\t          this.element.removeChild(base);\n\t        }\n\n\t        window.removeEventListener(\"resize\", this.resizeFunc);\n\t        window.removeEventListener(\"orientationChange\", this.orientationChangeFunc);\n\t      }\n\t    }\n\t  }]);\n\n\t  return Stage;\n\t}();\n\n\tvar Views =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function Views(container) {\n\t    classCallCheck(this, Views);\n\n\t    this.container = container;\n\t    this._views = [];\n\t    this.length = 0;\n\t    this.hidden = false;\n\t  }\n\n\t  createClass(Views, [{\n\t    key: \"all\",\n\t    value: function all() {\n\t      return this._views;\n\t    }\n\t  }, {\n\t    key: \"first\",\n\t    value: function first() {\n\t      return this._views[0];\n\t    }\n\t  }, {\n\t    key: \"last\",\n\t    value: function last() {\n\t      return this._views[this._views.length - 1];\n\t    }\n\t  }, {\n\t    key: \"indexOf\",\n\t    value: function indexOf(view) {\n\t      return this._views.indexOf(view);\n\t    }\n\t  }, {\n\t    key: \"slice\",\n\t    value: function slice() {\n\t      return this._views.slice.apply(this._views, arguments);\n\t    }\n\t  }, {\n\t    key: \"get\",\n\t    value: function get(i) {\n\t      return this._views[i];\n\t    }\n\t  }, {\n\t    key: \"append\",\n\t    value: function append(view) {\n\t      this._views.push(view);\n\n\t      if (this.container) {\n\t        this.container.appendChild(view.element);\n\t      }\n\n\t      this.length++;\n\t      return view;\n\t    }\n\t  }, {\n\t    key: \"prepend\",\n\t    value: function prepend(view) {\n\t      this._views.unshift(view);\n\n\t      if (this.container) {\n\t        this.container.insertBefore(view.element, this.container.firstChild);\n\t      }\n\n\t      this.length++;\n\t      return view;\n\t    }\n\t  }, {\n\t    key: \"insert\",\n\t    value: function insert(view, index) {\n\t      this._views.splice(index, 0, view);\n\n\t      if (this.container) {\n\t        if (index < this.container.children.length) {\n\t          this.container.insertBefore(view.element, this.container.children[index]);\n\t        } else {\n\t          this.container.appendChild(view.element);\n\t        }\n\t      }\n\n\t      this.length++;\n\t      return view;\n\t    }\n\t  }, {\n\t    key: \"remove\",\n\t    value: function remove(view) {\n\t      var index = this._views.indexOf(view);\n\n\t      if (index > -1) {\n\t        this._views.splice(index, 1);\n\t      }\n\n\t      this.destroy(view);\n\t      this.length--;\n\t    }\n\t  }, {\n\t    key: \"destroy\",\n\t    value: function destroy(view) {\n\t      if (view.displayed) {\n\t        view.destroy();\n\t      }\n\n\t      if (this.container) {\n\t        this.container.removeChild(view.element);\n\t      }\n\n\t      view = null;\n\t    } // Iterators\n\n\t  }, {\n\t    key: \"forEach\",\n\t    value: function forEach() {\n\t      return this._views.forEach.apply(this._views, arguments);\n\t    }\n\t  }, {\n\t    key: \"clear\",\n\t    value: function clear() {\n\t      // Remove all views\n\t      var view;\n\t      var len = this.length;\n\t      if (!this.length) return;\n\n\t      for (var i = 0; i < len; i++) {\n\t        view = this._views[i];\n\t        this.destroy(view);\n\t      }\n\n\t      this._views = [];\n\t      this.length = 0;\n\t    }\n\t  }, {\n\t    key: \"find\",\n\t    value: function find(section) {\n\t      var view;\n\t      var len = this.length;\n\n\t      for (var i = 0; i < len; i++) {\n\t        view = this._views[i];\n\n\t        if (view.displayed && view.section.index == section.index) {\n\t          return view;\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: \"displayed\",\n\t    value: function displayed() {\n\t      var displayed = [];\n\t      var view;\n\t      var len = this.length;\n\n\t      for (var i = 0; i < len; i++) {\n\t        view = this._views[i];\n\n\t        if (view.displayed) {\n\t          displayed.push(view);\n\t        }\n\t      }\n\n\t      return displayed;\n\t    }\n\t  }, {\n\t    key: \"show\",\n\t    value: function show() {\n\t      var view;\n\t      var len = this.length;\n\n\t      for (var i = 0; i < len; i++) {\n\t        view = this._views[i];\n\n\t        if (view.displayed) {\n\t          view.show();\n\t        }\n\t      }\n\n\t      this.hidden = false;\n\t    }\n\t  }, {\n\t    key: \"hide\",\n\t    value: function hide() {\n\t      var view;\n\t      var len = this.length;\n\n\t      for (var i = 0; i < len; i++) {\n\t        view = this._views[i];\n\n\t        if (view.displayed) {\n\t          view.hide();\n\t        }\n\t      }\n\n\t      this.hidden = true;\n\t    }\n\t  }]);\n\n\t  return Views;\n\t}();\n\n\tvar DefaultViewManager =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function DefaultViewManager(options) {\n\t    classCallCheck(this, DefaultViewManager);\n\n\t    this.name = \"default\";\n\t    this.optsSettings = options.settings;\n\t    this.View = options.view;\n\t    this.request = options.request;\n\t    this.spine = options.spine;\n\t    this.hooks = options.hooks;\n\t    this.q = new Queue(this);\n\t    this.settings = extend(this.settings || {}, {\n\t      infinite: true,\n\t      hidden: false,\n\t      width: undefined,\n\t      height: undefined,\n\t      axis: undefined,\n\t      flow: \"scrolled\",\n\t      ignoreClass: \"\",\n\t      fullsize: undefined\n\t    });\n\t    extend(this.settings, options.settings || {});\n\t    this.viewSettings = {\n\t      ignoreClass: this.settings.ignoreClass,\n\t      hooks: this.hooks,\n\t      axis: this.settings.axis,\n\t      flow: this.settings.flow,\n\t      layout: this.layout,\n\t      method: this.settings.method || \"url\",\n\t      // srcdoc, blobUrl, write\n\t      width: 0,\n\t      height: 0,\n\t      forceEvenPages: true\n\t    };\n\t    this.rendered = false;\n\t  }\n\n\t  createClass(DefaultViewManager, [{\n\t    key: \"render\",\n\t    value: function render(element, size) {\n\t      var tag = element.tagName;\n\n\t      if (typeof this.settings.fullsize === \"undefined\" && tag && (tag.toLowerCase() == \"body\" || tag.toLowerCase() == \"html\")) {\n\t        this.settings.fullsize = true;\n\t      }\n\n\t      if (this.settings.fullsize) {\n\t        this.settings.overflow = \"visible\";\n\t        this.overflow = this.settings.overflow;\n\t      }\n\n\t      this.settings.size = size; // Save the stage\n\n\t      this.stage = new Stage({\n\t        width: size.width,\n\t        height: size.height,\n\t        overflow: this.overflow,\n\t        hidden: this.settings.hidden,\n\t        axis: this.settings.axis,\n\t        fullsize: this.settings.fullsize,\n\t        direction: this.settings.direction,\n\t        scale: this.settings.scale\n\t      });\n\t      this.stage.attachTo(element); // Get this stage container div\n\n\t      this.container = this.stage.getContainer(); // Views array methods\n\n\t      this.views = new Views(this.container); // Calculate Stage Size\n\n\t      this._bounds = this.bounds();\n\t      this._stageSize = this.stage.size(); // Set the dimensions for views\n\n\t      this.viewSettings.width = this._stageSize.width;\n\t      this.viewSettings.height = this._stageSize.height; // Function to handle a resize event.\n\t      // Will only attach if width and height are both fixed.\n\n\t      this.stage.onResize(this.onResized.bind(this));\n\t      this.stage.onOrientationChange(this.onOrientationChange.bind(this)); // Add Event Listeners\n\n\t      this.addEventListeners(); // Add Layout method\n\t      // this.applyLayoutMethod();\n\n\t      if (this.layout) {\n\t        this.updateLayout();\n\t      }\n\n\t      this.rendered = true;\n\t    }\n\t  }, {\n\t    key: \"addEventListeners\",\n\t    value: function addEventListeners() {\n\t      var scroller;\n\t      window.addEventListener(\"unload\", function (e) {\n\t        this.destroy();\n\t      }.bind(this));\n\n\t      if (!this.settings.fullsize) {\n\t        scroller = this.container;\n\t      } else {\n\t        scroller = window;\n\t      }\n\n\t      scroller.addEventListener(\"scroll\", this.onScroll.bind(this));\n\t    }\n\t  }, {\n\t    key: \"removeEventListeners\",\n\t    value: function removeEventListeners() {\n\t      var scroller;\n\n\t      if (!this.settings.fullsize) {\n\t        scroller = this.container;\n\t      } else {\n\t        scroller = window;\n\t      }\n\n\t      if (scroller) {\n\t        scroller.removeEventListener(\"scroll\", this.onScroll.bind(this));\n\t      }\n\t    }\n\t  }, {\n\t    key: \"destroy\",\n\t    value: function destroy() {\n\t      clearTimeout(this.orientationTimeout);\n\t      clearTimeout(this.resizeTimeout);\n\t      clearTimeout(this.afterScrolled);\n\t      this.clear();\n\t      this.removeEventListeners();\n\t      this.stage && this.stage.destroy();\n\t      this.rendered = false;\n\t      /*\n\t      \t\tclearTimeout(this.trimTimeout);\n\t      \tif(this.settings.hidden) {\n\t      \t\tthis.element.removeChild(this.wrapper);\n\t      \t} else {\n\t      \t\tthis.element.removeChild(this.container);\n\t      \t}\n\t      */\n\t    }\n\t  }, {\n\t    key: \"onOrientationChange\",\n\t    value: function onOrientationChange(e) {\n\t      var _window = window,\n\t          orientation = _window.orientation;\n\n\t      if (this.optsSettings.resizeOnOrientationChange) {\n\t        this.resize();\n\t      } // Per ampproject:\n\t      // In IOS 10.3, the measured size of an element is incorrect if the\n\t      // element size depends on window size directly and the measurement\n\t      // happens in window.resize event. Adding a timeout for correct\n\t      // measurement. See https://github.com/ampproject/amphtml/issues/8479\n\n\n\t      clearTimeout(this.orientationTimeout);\n\t      this.orientationTimeout = setTimeout(function () {\n\t        this.orientationTimeout = undefined;\n\n\t        if (this.optsSettings.resizeOnOrientationChange) {\n\t          this.resize();\n\t        }\n\n\t        this.emit(EVENTS.MANAGERS.ORIENTATION_CHANGE, orientation);\n\t      }.bind(this), 500);\n\t    }\n\t  }, {\n\t    key: \"onResized\",\n\t    value: function onResized(e) {\n\t      this.resize();\n\t    }\n\t  }, {\n\t    key: \"resize\",\n\t    value: function resize(width, height) {\n\t      var stageSize = this.stage.size(width, height); // For Safari, wait for orientation to catch up\n\t      // if the window is a square\n\n\t      this.winBounds = windowBounds();\n\n\t      if (this.orientationTimeout && this.winBounds.width === this.winBounds.height) {\n\t        // reset the stage size for next resize\n\t        this._stageSize = undefined;\n\t        return;\n\t      }\n\n\t      if (this._stageSize && this._stageSize.width === stageSize.width && this._stageSize.height === stageSize.height) {\n\t        // Size is the same, no need to resize\n\t        return;\n\t      }\n\n\t      this._stageSize = stageSize;\n\t      this._bounds = this.bounds(); // Clear current views\n\n\t      this.clear(); // Update for new views\n\n\t      this.viewSettings.width = this._stageSize.width;\n\t      this.viewSettings.height = this._stageSize.height;\n\t      this.updateLayout();\n\t      this.emit(EVENTS.MANAGERS.RESIZED, {\n\t        width: this._stageSize.width,\n\t        height: this._stageSize.height\n\t      });\n\t    }\n\t  }, {\n\t    key: \"createView\",\n\t    value: function createView(section) {\n\t      return new this.View(section, this.viewSettings);\n\t    }\n\t  }, {\n\t    key: \"display\",\n\t    value: function display(section, target) {\n\t      var displaying = new defer();\n\t      var displayed = displaying.promise; // Check if moving to target is needed\n\n\t      if (target === section.href || isNumber(target)) {\n\t        target = undefined;\n\t      } // Check to make sure the section we want isn't already shown\n\n\n\t      var visible = this.views.find(section); // View is already shown, just move to correct location in view\n\n\t      if (visible && section) {\n\t        var offset = visible.offset();\n\n\t        if (this.settings.direction === \"ltr\") {\n\t          this.scrollTo(offset.left, offset.top, true);\n\t        } else {\n\t          var width = visible.width();\n\t          this.scrollTo(offset.left + width, offset.top, true);\n\t        }\n\n\t        if (target) {\n\t          var _offset = visible.locationOf(target);\n\n\t          this.moveTo(_offset);\n\t        }\n\n\t        displaying.resolve();\n\t        return displayed;\n\t      } // Hide all current views\n\n\n\t      this.clear();\n\t      this.add(section).then(function (view) {\n\t        // Move to correct place within the section, if needed\n\t        if (target) {\n\t          var _offset2 = view.locationOf(target);\n\n\t          this.moveTo(_offset2);\n\t        }\n\t      }.bind(this), function (err) {\n\t        displaying.reject(err);\n\t      }).then(function () {\n\t        var next;\n\n\t        if (this.layout.name === \"pre-paginated\" && this.layout.divisor > 1) {\n\t          next = nextSection(section, this.spine);\n\n\t          if (next) {\n\t            return this.add(next);\n\t          }\n\t        }\n\t      }.bind(this)).then(function () {\n\t        this.views.show();\n\t        displaying.resolve();\n\t      }.bind(this));\n\t      return displayed;\n\t    }\n\t  }, {\n\t    key: \"afterDisplayed\",\n\t    value: function afterDisplayed(view) {\n\t      this.emit(EVENTS.MANAGERS.ADDED, view);\n\t    }\n\t  }, {\n\t    key: \"afterResized\",\n\t    value: function afterResized(view) {\n\t      this.emit(EVENTS.MANAGERS.RESIZE, view.section);\n\t    }\n\t  }, {\n\t    key: \"moveTo\",\n\t    value: function moveTo(offset) {\n\t      var distX = 0,\n\t          distY = 0;\n\n\t      if (!this.isPaginated) {\n\t        distY = offset.top;\n\t      } else {\n\t        distX = Math.floor(offset.left / this.layout.delta) * this.layout.delta;\n\n\t        if (distX + this.layout.delta > this.container.scrollWidth) {\n\t          distX = this.container.scrollWidth - this.layout.delta;\n\t        }\n\t      }\n\n\t      this.scrollTo(distX, distY, true);\n\t    }\n\t  }, {\n\t    key: \"add\",\n\t    value: function add(section) {\n\t      var _this = this;\n\n\t      var view = this.createView(section);\n\t      this.views.append(view); // view.on(EVENTS.VIEWS.SHOWN, this.afterDisplayed.bind(this));\n\n\t      view.onDisplayed = this.afterDisplayed.bind(this);\n\t      view.onResize = this.afterResized.bind(this);\n\t      view.on(EVENTS.VIEWS.AXIS, function (axis) {\n\t        _this.updateAxis(axis);\n\t      });\n\t      return view.display(this.request);\n\t    }\n\t  }, {\n\t    key: \"append\",\n\t    value: function append(section) {\n\t      var _this2 = this;\n\n\t      var view = this.createView(section);\n\t      this.views.append(view);\n\t      view.onDisplayed = this.afterDisplayed.bind(this);\n\t      view.onResize = this.afterResized.bind(this);\n\t      view.on(EVENTS.VIEWS.AXIS, function (axis) {\n\t        _this2.updateAxis(axis);\n\t      });\n\t      return view.display(this.request);\n\t    }\n\t  }, {\n\t    key: \"prepend\",\n\t    value: function prepend(section) {\n\t      var _this3 = this;\n\n\t      var view = this.createView(section);\n\t      view.on(EVENTS.VIEWS.RESIZED, function (bounds$$1) {\n\t        _this3.counter(bounds$$1);\n\t      });\n\t      this.views.prepend(view);\n\t      view.onDisplayed = this.afterDisplayed.bind(this);\n\t      view.onResize = this.afterResized.bind(this);\n\t      view.on(EVENTS.VIEWS.AXIS, function (axis) {\n\t        _this3.updateAxis(axis);\n\t      });\n\t      return view.display(this.request);\n\t    }\n\t  }, {\n\t    key: \"counter\",\n\t    value: function counter(bounds$$1) {\n\t      if (this.settings.axis === \"vertical\") {\n\t        this.scrollBy(0, bounds$$1.heightDelta, true);\n\t      } else {\n\t        this.scrollBy(bounds$$1.widthDelta, 0, true);\n\t      }\n\t    } // resizeView(view) {\n\t    //\n\t    // \tif(this.settings.globalLayoutProperties.layout === \"pre-paginated\") {\n\t    // \t\tview.lock(\"both\", this.bounds.width, this.bounds.height);\n\t    // \t} else {\n\t    // \t\tview.lock(\"width\", this.bounds.width, this.bounds.height);\n\t    // \t}\n\t    //\n\t    // };\n\n\t  }, {\n\t    key: \"next\",\n\t    value: function next() {\n\t      var next;\n\t      var left;\n\t      var dir = this.settings.direction;\n\t      if (!this.views.length) return;\n\n\t      if (this.isPaginated && this.settings.axis === \"horizontal\" && (!dir || dir === \"ltr\")) {\n\t        this.scrollLeft = this.container.scrollLeft;\n\t        left = this.container.scrollLeft + this.container.offsetWidth + this.layout.delta;\n\n\t        if (left <= this.container.scrollWidth) {\n\t          this.scrollBy(this.layout.delta, 0, true);\n\t        } else {\n\t          next = nextSection(this.views.last().section, this.spine);\n\t        }\n\t      } else if (this.isPaginated && this.settings.axis === \"horizontal\" && dir === \"rtl\") {\n\t        this.scrollLeft = this.container.scrollLeft;\n\t        left = this.container.scrollLeft;\n\n\t        if (left > 0) {\n\t          this.scrollBy(this.layout.delta, 0, true);\n\t        } else {\n\t          next = nextSection(this.views.last().section, this.spine);\n\t        }\n\t      } else if (this.isPaginated && this.settings.axis === \"vertical\") {\n\t        this.scrollTop = this.container.scrollTop;\n\t        var top = this.container.scrollTop + this.container.offsetHeight;\n\n\t        if (top < this.container.scrollHeight) {\n\t          this.scrollBy(0, this.layout.height, true);\n\t        } else {\n\t          next = nextSection(this.views.last().section, this.spine);\n\t        }\n\t      } else {\n\t        next = nextSection(this.views.last().section, this.spine);\n\t      }\n\n\t      if (next) {\n\t        this.clear();\n\t        return this.append(next).then(function () {\n\t          var right;\n\n\t          if (this.layout.name === \"pre-paginated\" && this.layout.divisor > 1) {\n\t            right = nextSection(next, this.spine);\n\n\t            if (right) {\n\t              return this.append(right);\n\t            }\n\t          }\n\t        }.bind(this), function (err) {\n\t          return err;\n\t        }).then(function () {\n\t          this.views.show();\n\t        }.bind(this));\n\t      }\n\t    }\n\t  }, {\n\t    key: \"prev\",\n\t    value: function prev() {\n\t      var prev;\n\t      var left;\n\t      var dir = this.settings.direction;\n\t      if (!this.views.length) return;\n\n\t      if (this.isPaginated && this.settings.axis === \"horizontal\" && (!dir || dir === \"ltr\")) {\n\t        this.scrollLeft = this.container.scrollLeft;\n\t        left = this.container.scrollLeft;\n\n\t        if (left > 0) {\n\t          this.scrollBy(-this.layout.delta, 0, true);\n\t        } else {\n\t          prev = prevSection(this.views.first().section, this.spine);\n\t        }\n\t      } else if (this.isPaginated && this.settings.axis === \"horizontal\" && dir === \"rtl\") {\n\t        this.scrollLeft = this.container.scrollLeft;\n\t        left = this.container.scrollLeft + this.container.offsetWidth + this.layout.delta;\n\n\t        if (left <= this.container.scrollWidth) {\n\t          this.scrollBy(-this.layout.delta, 0, true);\n\t        } else {\n\t          prev = prevSection(this.views.first().section, this.spine);\n\t        }\n\t      } else if (this.isPaginated && this.settings.axis === \"vertical\") {\n\t        this.scrollTop = this.container.scrollTop;\n\t        var top = this.container.scrollTop;\n\n\t        if (top > 0) {\n\t          this.scrollBy(0, -this.layout.height, true);\n\t        } else {\n\t          prev = prevSection(this.views.first().section, this.spine);\n\t        }\n\t      } else {\n\t        prev = prevSection(this.views.first().section, this.spine);\n\t      }\n\n\t      if (prev) {\n\t        this.clear();\n\t        return this.prepend(prev).then(function () {\n\t          var left;\n\n\t          if (this.layout.name === \"pre-paginated\" && this.layout.divisor > 1) {\n\t            left = prevSection(prev, this.spine);\n\n\t            if (left) {\n\t              return this.prepend(left);\n\t            }\n\t          }\n\t        }.bind(this), function (err) {\n\t          return err;\n\t        }).then(function () {\n\t          if (this.isPaginated && this.settings.axis === \"horizontal\") {\n\t            if (this.settings.direction === \"rtl\") {\n\t              this.scrollTo(0, 0, true);\n\t            } else {\n\t              this.scrollTo(this.container.scrollWidth - this.layout.delta, 0, true);\n\t            }\n\t          }\n\n\t          this.views.show();\n\t        }.bind(this));\n\t      }\n\t    }\n\t  }, {\n\t    key: \"current\",\n\t    value: function current() {\n\t      var visible = this.visible();\n\n\t      if (visible.length) {\n\t        // Current is the last visible view\n\t        return visible[visible.length - 1];\n\t      }\n\n\t      return null;\n\t    }\n\t  }, {\n\t    key: \"clear\",\n\t    value: function clear() {\n\t      // this.q.clear();\n\t      if (this.views) {\n\t        this.views.hide();\n\t        this.scrollTo(0, 0, true);\n\t        this.views.clear();\n\t      }\n\t    }\n\t  }, {\n\t    key: \"currentLocation\",\n\t    value: function currentLocation() {\n\t      if (this.settings.axis === \"vertical\") {\n\t        this.location = this.scrolledLocation();\n\t      } else {\n\t        this.location = this.paginatedLocation();\n\t      }\n\n\t      return this.location;\n\t    }\n\t  }, {\n\t    key: \"scrolledLocation\",\n\t    value: function scrolledLocation() {\n\t      var _this4 = this;\n\n\t      var visible = this.visible();\n\t      var container = this.container.getBoundingClientRect();\n\t      var pageHeight = container.height < window.innerHeight ? container.height : window.innerHeight;\n\t      var offset = 0;\n\t      var used = 0;\n\n\t      if (this.settings.fullsize) {\n\t        offset = window.scrollY;\n\t      }\n\n\t      var sections = visible.map(function (view) {\n\t        var index = view.section.index;\n\t        var href = view.section.source || view.section.href;\n\t        var position = view.position();\n\t        var height = view.height();\n\t        var startPos = offset + container.top - position.top + used;\n\t        var endPos = startPos + pageHeight - used;\n\n\t        if (endPos > height) {\n\t          endPos = height;\n\t          used = endPos - startPos;\n\t        }\n\n\t        var totalPages = _this4.layout.count(height, pageHeight).pages;\n\n\t        var currPage = Math.ceil(startPos / pageHeight);\n\t        var pages = [];\n\t        var endPage = Math.ceil(endPos / pageHeight);\n\t        pages = [];\n\n\t        for (var i = currPage; i <= endPage; i++) {\n\t          var pg = i + 1;\n\t          pages.push(pg);\n\t        }\n\n\t        var mapping = _this4.mapping.page(view.contents, view.section.cfiBase, startPos, endPos);\n\n\t        return {\n\t          index: index,\n\t          href: href,\n\t          pages: pages,\n\t          totalPages: totalPages,\n\t          mapping: mapping\n\t        };\n\t      });\n\t      return sections;\n\t    }\n\t  }, {\n\t    key: \"paginatedLocation\",\n\t    value: function paginatedLocation() {\n\t      var _this5 = this;\n\n\t      var visible = this.visible();\n\t      var container = this.container.getBoundingClientRect();\n\t      var left = 0;\n\t      var used = 0;\n\n\t      if (this.settings.fullsize) {\n\t        left = window.scrollX;\n\t      }\n\n\t      var sections = visible.map(function (view) {\n\t        var index = view.section.index;\n\t        var href = view.section.source || view.section.href; // let offset = view.offset().left;\n\n\t        var position = view.position().left;\n\t        var width = view.width(); // Find mapping\n\n\t        var start = left + container.left - position + used;\n\t        var end = start + _this5.layout.width - used;\n\n\t        var mapping = _this5.mapping.page(view.contents, view.section.cfiBase, start, end); // Find displayed pages\n\t        //console.log(\"pre\", end, offset + width);\n\t        // if (end > offset + width) {\n\t        // \tend = offset + width;\n\t        // \tused = this.layout.pageWidth;\n\t        // }\n\t        // console.log(\"post\", end);\n\n\n\t        var totalPages = _this5.layout.count(width).pages;\n\n\t        var startPage = Math.floor(start / _this5.layout.pageWidth);\n\t        var pages = [];\n\t        var endPage = Math.floor(end / _this5.layout.pageWidth); // start page should not be negative\n\n\t        if (startPage < 0) {\n\t          startPage = 0;\n\t          endPage = endPage + 1;\n\t        } // Reverse page counts for rtl\n\n\n\t        if (_this5.settings.direction === \"rtl\") {\n\t          var tempStartPage = startPage;\n\t          startPage = totalPages - endPage;\n\t          endPage = totalPages - tempStartPage;\n\t        }\n\n\t        for (var i = startPage + 1; i <= endPage; i++) {\n\t          var pg = i;\n\t          pages.push(pg);\n\t        }\n\n\t        return {\n\t          index: index,\n\t          href: href,\n\t          pages: pages,\n\t          totalPages: totalPages,\n\t          mapping: mapping\n\t        };\n\t      });\n\t      return sections;\n\t    }\n\t  }, {\n\t    key: \"isVisible\",\n\t    value: function isVisible(view, offsetPrev, offsetNext, _container) {\n\t      var position = view.position();\n\n\t      var container = _container || this.bounds();\n\n\t      if (this.settings.axis === \"horizontal\" && position.right > container.left - offsetPrev && position.left < container.right + offsetNext) {\n\t        return true;\n\t      } else if (this.settings.axis === \"vertical\" && position.bottom > container.top - offsetPrev && position.top < container.bottom + offsetNext) {\n\t        return true;\n\t      }\n\n\t      return false;\n\t    }\n\t  }, {\n\t    key: \"visible\",\n\t    value: function visible() {\n\t      var container = this.bounds();\n\t      var views = this.views.displayed();\n\t      var viewsLength = views.length;\n\t      var visible = [];\n\t      var isVisible;\n\t      var view;\n\n\t      for (var i = 0; i < viewsLength; i++) {\n\t        view = views[i];\n\t        isVisible = this.isVisible(view, 0, 0, container);\n\n\t        if (isVisible === true) {\n\t          visible.push(view);\n\t        }\n\t      }\n\n\t      return visible;\n\t    }\n\t  }, {\n\t    key: \"scrollBy\",\n\t    value: function scrollBy(x, y, silent) {\n\t      var dir = this.settings.direction === \"rtl\" ? -1 : 1;\n\n\t      if (silent) {\n\t        this.ignore = true;\n\t      }\n\n\t      if (!this.settings.fullsize) {\n\t        if (x) this.container.scrollLeft += x * dir;\n\t        if (y) this.container.scrollTop += y;\n\t      } else {\n\t        window.scrollBy(x * dir, y * dir);\n\t      }\n\n\t      this.scrolled = true;\n\t    }\n\t  }, {\n\t    key: \"scrollTo\",\n\t    value: function scrollTo(x, y, silent) {\n\t      if (silent) {\n\t        this.ignore = true;\n\t      }\n\n\t      if (!this.settings.fullsize) {\n\t        this.container.scrollLeft = x;\n\t        this.container.scrollTop = y;\n\t      } else {\n\t        window.scrollTo(x, y);\n\t      }\n\n\t      this.scrolled = true;\n\t    }\n\t  }, {\n\t    key: \"onScroll\",\n\t    value: function onScroll() {\n\t      var scrollTop;\n\t      var scrollLeft;\n\n\t      if (!this.settings.fullsize) {\n\t        scrollTop = this.container.scrollTop;\n\t        scrollLeft = this.container.scrollLeft;\n\t      } else {\n\t        scrollTop = window.scrollY;\n\t        scrollLeft = window.scrollX;\n\t      }\n\n\t      this.scrollTop = scrollTop;\n\t      this.scrollLeft = scrollLeft;\n\n\t      if (!this.ignore) {\n\t        this.emit(EVENTS.MANAGERS.SCROLL, {\n\t          top: scrollTop,\n\t          left: scrollLeft\n\t        });\n\t        clearTimeout(this.afterScrolled);\n\t        this.afterScrolled = setTimeout(function () {\n\t          this.emit(EVENTS.MANAGERS.SCROLLED, {\n\t            top: this.scrollTop,\n\t            left: this.scrollLeft\n\t          });\n\t        }.bind(this), 20);\n\t      } else {\n\t        this.ignore = false;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"bounds\",\n\t    value: function bounds$$1() {\n\t      var bounds$$1;\n\t      bounds$$1 = this.stage.bounds();\n\t      return bounds$$1;\n\t    }\n\t  }, {\n\t    key: \"applyLayout\",\n\t    value: function applyLayout(layout) {\n\t      this.layout = layout;\n\t      this.updateLayout(); // this.manager.layout(this.layout.format);\n\t    }\n\t  }, {\n\t    key: \"updateLayout\",\n\t    value: function updateLayout() {\n\t      if (!this.stage) {\n\t        return;\n\t      }\n\n\t      this._stageSize = this.stage.size();\n\n\t      if (!this.isPaginated) {\n\t        this.layout.calculate(this._stageSize.width, this._stageSize.height);\n\t      } else {\n\t        this.layout.calculate(this._stageSize.width, this._stageSize.height, this.settings.gap); // Set the look ahead offset for what is visible\n\n\t        this.settings.offset = this.layout.delta; // this.stage.addStyleRules(\"iframe\", [{\"margin-right\" : this.layout.gap + \"px\"}]);\n\t      } // Set the dimensions for views\n\n\n\t      this.viewSettings.width = this.layout.width;\n\t      this.viewSettings.height = this.layout.height;\n\t      this.setLayout(this.layout);\n\t    }\n\t  }, {\n\t    key: \"setLayout\",\n\t    value: function setLayout(layout) {\n\t      this.viewSettings.layout = layout;\n\t      this.mapping = new Mapping(layout.props, this.settings.direction, this.settings.axis);\n\n\t      if (this.views) {\n\t        this.views.forEach(function (view) {\n\t          if (view) {\n\t            view.setLayout(layout);\n\t          }\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: \"updateAxis\",\n\t    value: function updateAxis(axis, forceUpdate) {\n\t      if (!this.isPaginated) {\n\t        axis = \"vertical\";\n\t      }\n\n\t      if (!forceUpdate && axis === this.settings.axis) {\n\t        return;\n\t      }\n\n\t      this.settings.axis = axis;\n\t      this.stage && this.stage.axis(axis);\n\t      this.viewSettings.axis = axis;\n\n\t      if (this.mapping) {\n\t        this.mapping = new Mapping(this.layout.props, this.settings.direction, this.settings.axis);\n\t      }\n\n\t      if (this.layout) {\n\t        if (axis === \"vertical\") {\n\t          this.layout.spread(\"none\");\n\t        } else {\n\t          this.layout.spread(this.layout.settings.spread);\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: \"updateFlow\",\n\t    value: function updateFlow(flow) {\n\t      var isPaginated = flow === \"paginated\" || flow === \"auto\";\n\t      this.isPaginated = isPaginated;\n\n\t      if (flow === \"scrolled-doc\" || flow === \"scrolled-continuous\" || flow === \"scrolled\") {\n\t        this.updateAxis(\"vertical\");\n\t      }\n\n\t      this.viewSettings.flow = flow;\n\n\t      if (!this.settings.overflow) {\n\t        this.overflow = isPaginated ? \"hidden\" : \"auto\";\n\t      } else {\n\t        this.overflow = this.settings.overflow;\n\t      } // this.views.forEach(function(view){\n\t      // \tview.setAxis(axis);\n\t      // });\n\n\n\t      this.updateLayout();\n\t    }\n\t  }, {\n\t    key: \"getContents\",\n\t    value: function getContents() {\n\t      var contents = [];\n\n\t      if (!this.views) {\n\t        return contents;\n\t      }\n\n\t      this.views.forEach(function (view) {\n\t        var viewContents = view && view.contents;\n\n\t        if (viewContents) {\n\t          contents.push(viewContents);\n\t        }\n\t      });\n\t      return contents;\n\t    }\n\t  }, {\n\t    key: \"direction\",\n\t    value: function direction() {\n\t      var dir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"ltr\";\n\t      this.settings.direction = dir;\n\t      this.stage && this.stage.direction(dir);\n\t      this.viewSettings.direction = dir;\n\t      this.updateLayout();\n\t    }\n\t  }, {\n\t    key: \"isRendered\",\n\t    value: function isRendered() {\n\t      return this.rendered;\n\t    }\n\t  }, {\n\t    key: \"scale\",\n\t    value: function scale(s) {\n\t      this.settings.scale = s;\n\n\t      if (this.stage) {\n\t        this.stage.scale(s);\n\t      }\n\t    }\n\t  }]);\n\n\t  return DefaultViewManager;\n\t}(); //-- Enable binding events to Manager\n\n\n\teventEmitter(DefaultViewManager.prototype);\n\n\tfunction _assertThisInitialized(self) {\n\t  if (self === void 0) {\n\t    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t  }\n\n\t  return self;\n\t}\n\n\tvar assertThisInitialized = _assertThisInitialized;\n\n\tfunction _possibleConstructorReturn(self, call) {\n\t  if (call && (_typeof_1(call) === \"object\" || typeof call === \"function\")) {\n\t    return call;\n\t  }\n\n\t  return assertThisInitialized(self);\n\t}\n\n\tvar possibleConstructorReturn = _possibleConstructorReturn;\n\n\tvar getPrototypeOf = createCommonjsModule(function (module) {\n\tfunction _getPrototypeOf(o) {\n\t  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n\t    return o.__proto__ || Object.getPrototypeOf(o);\n\t  };\n\t  return _getPrototypeOf(o);\n\t}\n\n\tmodule.exports = _getPrototypeOf;\n\t});\n\n\tfunction _inherits(subClass, superClass) {\n\t  if (typeof superClass !== \"function\" && superClass !== null) {\n\t    throw new TypeError(\"Super expression must either be null or a function\");\n\t  }\n\n\t  subClass.prototype = Object.create(superClass && superClass.prototype, {\n\t    constructor: {\n\t      value: subClass,\n\t      writable: true,\n\t      configurable: true\n\t    }\n\t  });\n\t  if (superClass) setPrototypeOf(subClass, superClass);\n\t}\n\n\tvar inherits = _inherits;\n\n\tvar ContinuousViewManager =\n\t/*#__PURE__*/\n\tfunction (_DefaultViewManager) {\n\t  inherits(ContinuousViewManager, _DefaultViewManager);\n\n\t  function ContinuousViewManager(options) {\n\t    var _this;\n\n\t    classCallCheck(this, ContinuousViewManager);\n\n\t    _this = possibleConstructorReturn(this, getPrototypeOf(ContinuousViewManager).call(this, options));\n\t    _this.name = \"continuous\";\n\t    _this.settings = extend(_this.settings || {}, {\n\t      infinite: true,\n\t      overflow: undefined,\n\t      axis: undefined,\n\t      flow: \"scrolled\",\n\t      offset: 500,\n\t      offsetDelta: 250,\n\t      width: undefined,\n\t      height: undefined\n\t    });\n\t    extend(_this.settings, options.settings || {}); // Gap can be 0, but defaults doesn't handle that\n\n\t    if (options.settings.gap != \"undefined\" && options.settings.gap === 0) {\n\t      _this.settings.gap = options.settings.gap;\n\t    }\n\n\t    _this.viewSettings = {\n\t      ignoreClass: _this.settings.ignoreClass,\n\t      hooks: _this.hooks,\n\t      axis: _this.settings.axis,\n\t      flow: _this.settings.flow,\n\t      layout: _this.layout,\n\t      method: _this.settings.method || \"url\",\n\t      // srcdoc, blobUrl, write\n\t      width: 0,\n\t      height: 0,\n\t      forceEvenPages: false\n\t    };\n\t    _this.scrollTop = 0;\n\t    _this.scrollLeft = 0;\n\t    return _this;\n\t  }\n\n\t  createClass(ContinuousViewManager, [{\n\t    key: \"display\",\n\t    value: function display(section, target) {\n\t      return DefaultViewManager.prototype.display.call(this, section, target).then(function () {\n\t        return this.fill();\n\t      }.bind(this));\n\t    }\n\t  }, {\n\t    key: \"fill\",\n\t    value: function fill(_full) {\n\t      var _this2 = this;\n\n\t      var full = _full || new defer();\n\t      this.q.enqueue(function () {\n\t        return _this2.check();\n\t      }).then(function (result) {\n\t        if (result) {\n\t          _this2.fill(full);\n\t        } else {\n\t          full.resolve();\n\t        }\n\t      });\n\t      return full.promise;\n\t    }\n\t  }, {\n\t    key: \"moveTo\",\n\t    value: function moveTo(offset) {\n\t      // var bounds = this.stage.bounds();\n\t      // var dist = Math.floor(offset.top / bounds.height) * bounds.height;\n\t      var distX = 0;\n\t      var distY = 0; // let offsetX = 0;\n\t      // let offsetY = 0;\n\n\t      if (!this.isPaginated) {\n\t        distY = offset.top; // offsetY = offset.top+this.settings.offset;\n\t      } else {\n\t        distX = Math.floor(offset.left / this.layout.delta) * this.layout.delta; // offsetX = distX+this.settings.offset;\n\t      }\n\n\t      if (distX > 0 || distY > 0) {\n\t        this.scrollBy(distX, distY, true);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"afterResized\",\n\t    value: function afterResized(view) {\n\t      this.emit(EVENTS.MANAGERS.RESIZE, view.section);\n\t    } // Remove Previous Listeners if present\n\n\t  }, {\n\t    key: \"removeShownListeners\",\n\t    value: function removeShownListeners(view) {\n\t      // view.off(\"shown\", this.afterDisplayed);\n\t      // view.off(\"shown\", this.afterDisplayedAbove);\n\t      view.onDisplayed = function () {};\n\t    }\n\t  }, {\n\t    key: \"add\",\n\t    value: function add(section) {\n\t      var _this3 = this;\n\n\t      var view = this.createView(section);\n\t      this.views.append(view);\n\t      view.on(EVENTS.VIEWS.RESIZED, function (bounds$$1) {\n\t        view.expanded = true;\n\t      });\n\t      view.on(EVENTS.VIEWS.AXIS, function (axis) {\n\t        _this3.updateAxis(axis);\n\t      }); // view.on(EVENTS.VIEWS.SHOWN, this.afterDisplayed.bind(this));\n\n\t      view.onDisplayed = this.afterDisplayed.bind(this);\n\t      view.onResize = this.afterResized.bind(this);\n\t      return view.display(this.request);\n\t    }\n\t  }, {\n\t    key: \"append\",\n\t    value: function append(section) {\n\t      var view = this.createView(section);\n\t      view.on(EVENTS.VIEWS.RESIZED, function (bounds$$1) {\n\t        view.expanded = true;\n\t      });\n\t      /*\n\t      view.on(EVENTS.VIEWS.AXIS, (axis) => {\n\t      \tthis.updateAxis(axis);\n\t      });\n\t      */\n\n\t      this.views.append(view);\n\t      view.onDisplayed = this.afterDisplayed.bind(this);\n\t      return view;\n\t    }\n\t  }, {\n\t    key: \"prepend\",\n\t    value: function prepend(section) {\n\t      var _this4 = this;\n\n\t      var view = this.createView(section);\n\t      view.on(EVENTS.VIEWS.RESIZED, function (bounds$$1) {\n\t        _this4.counter(bounds$$1);\n\n\t        view.expanded = true;\n\t      });\n\t      /*\n\t      view.on(EVENTS.VIEWS.AXIS, (axis) => {\n\t      \tthis.updateAxis(axis);\n\t      });\n\t      */\n\n\t      this.views.prepend(view);\n\t      view.onDisplayed = this.afterDisplayed.bind(this);\n\t      return view;\n\t    }\n\t  }, {\n\t    key: \"counter\",\n\t    value: function counter(bounds$$1) {\n\t      if (this.settings.axis === \"vertical\") {\n\t        this.scrollBy(0, bounds$$1.heightDelta, true);\n\t      } else {\n\t        this.scrollBy(bounds$$1.widthDelta, 0, true);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"update\",\n\t    value: function update(_offset) {\n\t      var container = this.bounds();\n\t      var views = this.views.all();\n\t      var viewsLength = views.length;\n\t      var offset = typeof _offset != \"undefined\" ? _offset : this.settings.offset || 0;\n\t      var isVisible;\n\t      var view;\n\t      var updating = new defer();\n\t      var promises = [];\n\n\t      for (var i = 0; i < viewsLength; i++) {\n\t        view = views[i];\n\t        isVisible = this.isVisible(view, offset, offset, container);\n\n\t        if (isVisible === true) {\n\t          // console.log(\"visible \" + view.index);\n\t          if (!view.displayed) {\n\t            var displayed = view.display(this.request).then(function (view) {\n\t              view.show();\n\t            }, function (err) {\n\t              view.hide();\n\t            });\n\t            promises.push(displayed);\n\t          } else {\n\t            view.show();\n\t          }\n\t        } else {\n\t          this.q.enqueue(view.destroy.bind(view)); // console.log(\"hidden \" + view.index);\n\n\t          clearTimeout(this.trimTimeout);\n\t          this.trimTimeout = setTimeout(function () {\n\t            this.q.enqueue(this.trim.bind(this));\n\t          }.bind(this), 250);\n\t        }\n\t      }\n\n\t      if (promises.length) {\n\t        return Promise.all(promises).catch(function (err) {\n\t          updating.reject(err);\n\t        });\n\t      } else {\n\t        updating.resolve();\n\t        return updating.promise;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"check\",\n\t    value: function check(_offsetLeft, _offsetTop) {\n\t      var _this5 = this;\n\n\t      var checking = new defer();\n\t      var newViews = [];\n\t      var horizontal = this.settings.axis === \"horizontal\";\n\t      var delta = this.settings.offset || 0;\n\n\t      if (_offsetLeft && horizontal) {\n\t        delta = _offsetLeft;\n\t      }\n\n\t      if (_offsetTop && !horizontal) {\n\t        delta = _offsetTop;\n\t      }\n\n\t      var bounds$$1 = this._bounds; // bounds saved this until resize\n\n\t      var rtl = this.settings.direction === \"rtl\";\n\t      var dir = horizontal && rtl ? -1 : 1; //RTL reverses scrollTop\n\n\t      var offset = horizontal ? this.scrollLeft : this.scrollTop * dir;\n\t      var visibleLength = horizontal ? Math.floor(bounds$$1.width) : bounds$$1.height;\n\t      var contentLength = horizontal ? this.container.scrollWidth : this.container.scrollHeight;\n\n\t      var prepend = function prepend() {\n\t        var first = _this5.views.first();\n\n\t        var prev = first && prevSection(first.section, _this5.spine);\n\n\t        if (prev) {\n\t          newViews.push(_this5.prepend(prev));\n\t        }\n\t      };\n\n\t      var append = function append() {\n\t        var last = _this5.views.last();\n\n\t        var next = last && nextSection(last.section, _this5.spine);\n\n\t        if (next) {\n\t          newViews.push(_this5.append(next));\n\t        }\n\t      };\n\n\t      if (offset + visibleLength + delta >= contentLength) {\n\t        if (horizontal && rtl) {\n\t          prepend();\n\t        } else {\n\t          append();\n\t        }\n\t      }\n\n\t      if (offset - delta < 0) {\n\t        if (horizontal && rtl) {\n\t          append();\n\t        } else {\n\t          prepend();\n\t        }\n\t      }\n\n\t      var promises = newViews.map(function (view) {\n\t        return view.displayed;\n\t      });\n\n\t      if (newViews.length) {\n\t        return Promise.all(promises).then(function () {\n\t          if (_this5.layout.name === \"pre-paginated\" && _this5.layout.props.spread) {\n\t            return _this5.check();\n\t          }\n\t        }).then(function () {\n\t          // Check to see if anything new is on screen after rendering\n\t          return _this5.update(delta);\n\t        }, function (err) {\n\t          return err;\n\t        });\n\t      } else {\n\t        this.q.enqueue(function () {\n\t          this.update();\n\t        }.bind(this));\n\t        checking.resolve(false);\n\t        return checking.promise;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"trim\",\n\t    value: function trim() {\n\t      var task = new defer();\n\t      var displayed = this.views.displayed();\n\t      var first = displayed[0];\n\t      var last = displayed[displayed.length - 1];\n\t      var firstIndex = this.views.indexOf(first);\n\t      var lastIndex = this.views.indexOf(last);\n\t      var above = this.views.slice(0, firstIndex);\n\t      var below = this.views.slice(lastIndex + 1); // Erase all but last above\n\n\t      for (var i = 0; i < above.length - 1; i++) {\n\t        this.erase(above[i], above);\n\t      } // Erase all except first below\n\n\n\t      for (var j = 1; j < below.length; j++) {\n\t        this.erase(below[j]);\n\t      }\n\n\t      task.resolve();\n\t      return task.promise;\n\t    }\n\t  }, {\n\t    key: \"erase\",\n\t    value: function erase(view, above) {\n\t      //Trim\n\t      var prevTop;\n\t      var prevLeft;\n\n\t      if (!this.settings.fullsize) {\n\t        prevTop = this.container.scrollTop;\n\t        prevLeft = this.container.scrollLeft;\n\t      } else {\n\t        prevTop = window.scrollY;\n\t        prevLeft = window.scrollX;\n\t      }\n\n\t      var bounds$$1 = view.bounds();\n\t      this.views.remove(view);\n\n\t      if (above) {\n\t        if (this.settings.axis === \"vertical\") {\n\t          this.scrollTo(0, prevTop - bounds$$1.height, true);\n\t        } else {\n\t          this.scrollTo(prevLeft - Math.floor(bounds$$1.width), 0, true);\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: \"addEventListeners\",\n\t    value: function addEventListeners(stage) {\n\t      window.addEventListener(\"unload\", function (e) {\n\t        this.ignore = true; // this.scrollTo(0,0);\n\n\t        this.destroy();\n\t      }.bind(this));\n\t      this.addScrollListeners();\n\t    }\n\t  }, {\n\t    key: \"addScrollListeners\",\n\t    value: function addScrollListeners() {\n\t      var scroller;\n\t      this.tick = requestAnimationFrame$1;\n\n\t      if (!this.settings.fullsize) {\n\t        this.prevScrollTop = this.container.scrollTop;\n\t        this.prevScrollLeft = this.container.scrollLeft;\n\t      } else {\n\t        this.prevScrollTop = window.scrollY;\n\t        this.prevScrollLeft = window.scrollX;\n\t      }\n\n\t      this.scrollDeltaVert = 0;\n\t      this.scrollDeltaHorz = 0;\n\n\t      if (!this.settings.fullsize) {\n\t        scroller = this.container;\n\t        this.scrollTop = this.container.scrollTop;\n\t        this.scrollLeft = this.container.scrollLeft;\n\t      } else {\n\t        scroller = window;\n\t        this.scrollTop = window.scrollY;\n\t        this.scrollLeft = window.scrollX;\n\t      }\n\n\t      scroller.addEventListener(\"scroll\", this.onScroll.bind(this));\n\t      this._scrolled = debounce_1(this.scrolled.bind(this), 30); // this.tick.call(window, this.onScroll.bind(this));\n\n\t      this.didScroll = false;\n\t    }\n\t  }, {\n\t    key: \"removeEventListeners\",\n\t    value: function removeEventListeners() {\n\t      var scroller;\n\n\t      if (!this.settings.fullsize) {\n\t        scroller = this.container;\n\t      } else {\n\t        scroller = window;\n\t      }\n\n\t      scroller.removeEventListener(\"scroll\", this.onScroll.bind(this));\n\t    }\n\t  }, {\n\t    key: \"onScroll\",\n\t    value: function onScroll() {\n\t      var scrollTop;\n\t      var scrollLeft;\n\t      var dir = this.settings.direction === \"rtl\" ? -1 : 1;\n\n\t      if (!this.settings.fullsize) {\n\t        scrollTop = this.container.scrollTop;\n\t        scrollLeft = this.container.scrollLeft;\n\t      } else {\n\t        scrollTop = window.scrollY * dir;\n\t        scrollLeft = window.scrollX * dir;\n\t      }\n\n\t      this.scrollTop = scrollTop;\n\t      this.scrollLeft = scrollLeft;\n\n\t      if (!this.ignore) {\n\t        this._scrolled();\n\t      } else {\n\t        this.ignore = false;\n\t      }\n\n\t      this.scrollDeltaVert += Math.abs(scrollTop - this.prevScrollTop);\n\t      this.scrollDeltaHorz += Math.abs(scrollLeft - this.prevScrollLeft);\n\t      this.prevScrollTop = scrollTop;\n\t      this.prevScrollLeft = scrollLeft;\n\t      clearTimeout(this.scrollTimeout);\n\t      this.scrollTimeout = setTimeout(function () {\n\t        this.scrollDeltaVert = 0;\n\t        this.scrollDeltaHorz = 0;\n\t      }.bind(this), 150);\n\t      this.didScroll = false;\n\t    }\n\t  }, {\n\t    key: \"scrolled\",\n\t    value: function scrolled() {\n\t      this.q.enqueue(function () {\n\t        this.check();\n\t      }.bind(this));\n\t      this.emit(EVENTS.MANAGERS.SCROLL, {\n\t        top: this.scrollTop,\n\t        left: this.scrollLeft\n\t      });\n\t      clearTimeout(this.afterScrolled);\n\t      this.afterScrolled = setTimeout(function () {\n\t        this.emit(EVENTS.MANAGERS.SCROLLED, {\n\t          top: this.scrollTop,\n\t          left: this.scrollLeft\n\t        });\n\t      }.bind(this));\n\t    }\n\t  }, {\n\t    key: \"next\",\n\t    value: function next() {\n\t      var delta = this.layout.props.name === \"pre-paginated\" && this.layout.props.spread ? this.layout.props.delta * 2 : this.layout.props.delta;\n\t      if (!this.views.length) return;\n\n\t      if (this.isPaginated && this.settings.axis === \"horizontal\") {\n\t        this.scrollBy(delta, 0, true);\n\t      } else {\n\t        this.scrollBy(0, this.layout.height, true);\n\t      }\n\n\t      this.q.enqueue(function () {\n\t        this.check();\n\t      }.bind(this));\n\t    }\n\t  }, {\n\t    key: \"prev\",\n\t    value: function prev() {\n\t      var delta = this.layout.props.name === \"pre-paginated\" && this.layout.props.spread ? this.layout.props.delta * 2 : this.layout.props.delta;\n\t      if (!this.views.length) return;\n\n\t      if (this.isPaginated && this.settings.axis === \"horizontal\") {\n\t        this.scrollBy(-delta, 0, true);\n\t      } else {\n\t        this.scrollBy(0, -this.layout.height, true);\n\t      }\n\n\t      this.q.enqueue(function () {\n\t        this.check();\n\t      }.bind(this));\n\t    }\n\t  }, {\n\t    key: \"updateAxis\",\n\t    value: function updateAxis(axis, forceUpdate) {\n\t      if (!this.isPaginated) {\n\t        axis = \"vertical\";\n\t      }\n\n\t      if (!forceUpdate && axis === this.settings.axis) {\n\t        return;\n\t      }\n\n\t      this.settings.axis = axis;\n\t      this.stage && this.stage.axis(axis);\n\t      this.viewSettings.axis = axis;\n\n\t      if (this.mapping) {\n\t        this.mapping.axis(axis);\n\t      }\n\n\t      if (this.layout) {\n\t        if (axis === \"vertical\") {\n\t          this.layout.spread(\"none\");\n\t        } else {\n\t          this.layout.spread(this.layout.settings.spread);\n\t        }\n\t      }\n\n\t      if (axis === \"vertical\") {\n\t        this.settings.infinite = true;\n\t      } else {\n\t        this.settings.infinite = false;\n\t      }\n\t    }\n\t  }]);\n\n\t  return ContinuousViewManager;\n\t}(DefaultViewManager);\n\n\t/**\n\t * Displays an Epub as a series of Views for each Section.\n\t * Requires Manager and View class to handle specifics of rendering\n\t * the section contetn.\n\t * @class\n\t * @param {Book} book\n\t * @param {object} [options]\n\t * @param {number} [options.width]\n\t * @param {number} [options.height]\n\t * @param {string} [options.ignoreClass] class for the cfi parser to ignore\n\t * @param {string | function | object} [options.manager='default']\n\t * @param {string | function} [options.view='iframe']\n\t * @param {string} [options.layout] layout to force\n\t * @param {string} [options.spread] force spread value\n\t * @param {number} [options.minSpreadWidth] overridden by spread: none (never) / both (always)\n\t * @param {string} [options.stylesheet] url of stylesheet to be injected\n\t * @param {string} [options.script] url of script to be injected\n\t */\n\n\tvar Rendition =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function Rendition(manifest, options) {\n\t    var _this = this;\n\n\t    classCallCheck(this, Rendition);\n\n\t    this.settings = extend(this.settings || {}, {\n\t      width: null,\n\t      height: null,\n\t      ignoreClass: \"\",\n\t      manager: \"default\",\n\t      view: \"iframe\",\n\t      flow: null,\n\t      layout: null,\n\t      spread: null,\n\t      minSpreadWidth: 800,\n\t      stylesheet: null,\n\t      resizeOnOrientationChange: true,\n\t      script: null,\n\t      worker: undefined,\n\t      workerScope: undefined\n\t    });\n\t    extend(this.settings, options);\n\n\t    if (_typeof_1(this.settings.manager) === \"object\") {\n\t      this.manager = this.settings.manager;\n\t    }\n\t    /**\n\t     * Adds Hook methods to the Rendition prototype\n\t     * @member {object} hooks\n\t     * @property {Hook} hooks.content\n\t     * @memberof Rendition\n\t     */\n\n\n\t    this.hooks = {};\n\t    this.hooks.display = new Hook(this);\n\t    this.hooks.content = new Hook(this);\n\t    this.hooks.unloaded = new Hook(this);\n\t    this.hooks.layout = new Hook(this);\n\t    this.hooks.render = new Hook(this);\n\t    this.hooks.show = new Hook(this);\n\t    this.hooks.content.register(this.handleLinks.bind(this));\n\t    this.hooks.content.register(this.passEvents.bind(this));\n\t    this.hooks.content.register(this.adjustImages.bind(this));\n\t    this.hooks.content.register(this.addIdentifier.bind(this));\n\t    /**\n\t     * @member {Themes} themes\n\t     * @memberof Rendition\n\t     */\n\n\t    this.themes = new Themes(this);\n\t    /**\n\t     * @member {Annotations} annotations\n\t     * @memberof Rendition\n\t     */\n\n\t    this.annotations = new Annotations(this);\n\t    this.epubcfi = new EpubCFI();\n\t    this.q = new Queue(this);\n\t    /**\n\t     * A Rendered Location Range\n\t     * @typedef location\n\t     * @type {Object}\n\t     * @property {object} start\n\t     * @property {string} start.index\n\t     * @property {string} start.href\n\t     * @property {object} start.displayed\n\t     * @property {EpubCFI} start.cfi\n\t     * @property {number} start.location\n\t     * @property {number} start.percentage\n\t     * @property {number} start.displayed.page\n\t     * @property {number} start.displayed.total\n\t     * @property {object} end\n\t     * @property {string} end.index\n\t     * @property {string} end.href\n\t     * @property {object} end.displayed\n\t     * @property {EpubCFI} end.cfi\n\t     * @property {number} end.location\n\t     * @property {number} end.percentage\n\t     * @property {number} end.displayed.page\n\t     * @property {number} end.displayed.total\n\t     * @property {boolean} atStart\n\t     * @property {boolean} atEnd\n\t     * @memberof Rendition\n\t     */\n\n\t    this.location = undefined; // Hold queue until book is opened\n\t    // this.q.enqueue(this.book.opened);\n\n\t    /**\n\t     * @private\n\t     */\n\n\t    this.spineByHref = undefined;\n\t    this.spineBySource = undefined;\n\t    this.spineById = undefined;\n\t    this.starting = new defer();\n\t    /**\n\t     * @member {promise} started returns after the rendition has started\n\t     * @memberof Rendition\n\t     */\n\n\t    this.started = this.starting.promise; // Block the queue until rendering is started\n\n\t    this.q.enqueue(this.started);\n\n\t    if (typeof manifest.then !== \"undefined\") {\n\t      // Promise\n\t      manifest.then(function (result) {\n\t        _this.unpack(result);\n\t      });\n\t    } else {\n\t      this.unpack(manifest);\n\t    } // If a service workers is used, block queue till it is ready\n\n\n\t    if (this.settings.worker && navigator && 'serviceWorker' in navigator) {\n\t      this.q.enqueue(function () {\n\t        return _this.worker(_this.settings.worker).catch(function () {\n\t          // worker failed, will need replacements\n\t          _this.starting = new defer();\n\t          _this.started = _this.starting.promise; // Block the queue again\n\n\t          return _this.q.enqueue(_this.started);\n\t        });\n\t      });\n\t    }\n\t  }\n\t  /**\n\t   * Load Book object or JSON manifest\n\t   */\n\n\n\t  createClass(Rendition, [{\n\t    key: \"unpack\",\n\t    value: function unpack(contents) {\n\t      var _this2 = this;\n\n\t      if (!contents) {\n\t        throw new Error(\"No manifest provided\");\n\t      }\n\n\t      if (typeof contents === \"string\") {\n\t        this.manifest = JSON.parse(contents);\n\t      } else if (_typeof_1(contents.manifest) === \"object\") {\n\t        this.manifest = contents.manifest;\n\t      } else {\n\t        this.manifest = contents;\n\t      }\n\n\t      var spine = this.manifest.spine.map(function (item, index) {\n\t        item.index = index;\n\t        return item;\n\t      });\n\t      this.spineByHref = {};\n\t      this.spineBySource = {};\n\t      this.spineById = {};\n\t      this.manifest.spine.forEach(function (section, index) {\n\t        _this2.spineByHref[decodeURI(section.href)] = index;\n\t        _this2.spineByHref[encodeURI(section.href)] = index;\n\t        _this2.spineByHref[section.href] = index;\n\n\t        if (section.source) {\n\t          _this2.spineBySource[decodeURI(section.source)] = index;\n\t          _this2.spineBySource[encodeURI(section.source)] = index;\n\t          _this2.spineBySource[section.source] = index;\n\t        }\n\n\t        _this2.spineById[section.idref] = index;\n\t      });\n\n\t      if (contents.manifest) {\n\t        this.book = new Book(contents);\n\t      } else {\n\t        this.book = new Book(this.manifest);\n\t      }\n\n\t      this.start();\n\t    }\n\t    /**\n\t     * Set the manager function\n\t     * @param {function} manager\n\t     */\n\n\t  }, {\n\t    key: \"setManager\",\n\t    value: function setManager(manager) {\n\t      this.manager = manager;\n\t    }\n\t    /**\n\t     * Require the manager from passed string, or as a class function\n\t     * @param  {string|object} manager [description]\n\t     * @return {method}\n\t     */\n\n\t  }, {\n\t    key: \"requireManager\",\n\t    value: function requireManager(manager) {\n\t      var viewManager; // If manager is a string, try to load from imported managers\n\n\t      if (typeof manager === \"string\" && manager === \"default\") {\n\t        viewManager = DefaultViewManager;\n\t      } else if (typeof manager === \"string\" && manager === \"continuous\") {\n\t        viewManager = ContinuousViewManager;\n\t      } else {\n\t        // otherwise, assume we were passed a class function\n\t        viewManager = manager;\n\t      }\n\n\t      return viewManager;\n\t    }\n\t    /**\n\t     * Require the view from passed string, or as a class function\n\t     * @param  {string|object} view\n\t     * @return {view}\n\t     */\n\n\t  }, {\n\t    key: \"requireView\",\n\t    value: function requireView(view) {\n\t      var View; // If view is a string, try to load from imported views,\n\n\t      if (typeof view == \"string\" && view === \"iframe\") {\n\t        View = IframeView;\n\t      } else {\n\t        // otherwise, assume we were passed a class function\n\t        View = view;\n\t      }\n\n\t      return View;\n\t    }\n\t    /**\n\t     * Start the rendering\n\t     * @return {Promise} rendering has started\n\t     */\n\n\t  }, {\n\t    key: \"start\",\n\t    value: function start() {\n\t      if (!this.manager) {\n\t        this.ViewManager = this.requireManager(this.settings.manager);\n\t        this.View = this.requireView(this.settings.view);\n\t        this.manager = new this.ViewManager({\n\t          view: this.View,\n\t          // queue: this.q,\n\t          spine: this.manifest.spine,\n\t          hooks: this.hooks,\n\t          // request: this.book.load.bind(this.book),\n\t          settings: this.settings\n\t        });\n\t      }\n\n\t      this.direction(this.manifest.metadata.direction); // Parse metadata to get layout props\n\n\t      this.settings.globalLayoutProperties = this.determineLayoutProperties(this.manifest.metadata);\n\t      this.flow(this.settings.globalLayoutProperties.flow);\n\t      this.layout(this.settings.globalLayoutProperties); // Listen for displayed views\n\n\t      this.manager.on(EVENTS.MANAGERS.ADDED, this.afterDisplayed.bind(this));\n\t      this.manager.on(EVENTS.MANAGERS.REMOVED, this.afterRemoved.bind(this)); // Listen for resizing\n\n\t      this.manager.on(EVENTS.MANAGERS.RESIZED, this.onResized.bind(this)); // Listen for rotation\n\n\t      this.manager.on(EVENTS.MANAGERS.ORIENTATION_CHANGE, this.onOrientationChange.bind(this)); // Listen for scroll changes\n\n\t      this.manager.on(EVENTS.MANAGERS.SCROLLED, this.reportLocation.bind(this));\n\t      /**\n\t       * Emit that rendering has started\n\t       * @event started\n\t       * @memberof Rendition\n\t       */\n\n\t      this.emit(EVENTS.RENDITION.STARTED); // Start processing queue\n\n\t      this.starting.resolve();\n\t    }\n\t    /**\n\t     * Call to attach the container to an element in the dom\n\t     * Container must be attached before rendering can begin\n\t     * @param  {element} element to attach to\n\t     * @return {Promise}\n\t     */\n\n\t  }, {\n\t    key: \"renderTo\",\n\t    value: function renderTo(element) {\n\t      return this.q.enqueue(function () {\n\t        // Start rendering\n\t        this.manager.render(element, {\n\t          \"width\": this.settings.width,\n\t          \"height\": this.settings.height\n\t        });\n\t        /**\n\t         * Emit that rendering has attached to an element\n\t         * @event attached\n\t         * @memberof Rendition\n\t         */\n\n\t        this.emit(EVENTS.RENDITION.ATTACHED);\n\t      }.bind(this));\n\t    }\n\t    /**\n\t     * Alias for renderTo\n\t     * @alias renderTo\n\t     * @param  {element} element to attach to\n\t     * @return {Promise}\n\t     */\n\n\t  }, {\n\t    key: \"attachTo\",\n\t    value: function attachTo(element) {\n\t      return this.renderTo(element);\n\t    }\n\t    /**\n\t     * Display a point in the book\n\t     * The request will be added to the rendering Queue,\n\t     * so it will wait until book is opened, rendering started\n\t     * and all other rendering tasks have finished to be called.\n\t     * @param  {string} target Url or EpubCFI\n\t     * @return {Promise}\n\t     */\n\n\t  }, {\n\t    key: \"display\",\n\t    value: function display(target) {\n\t      if (this.displaying) {\n\t        this.displaying.resolve();\n\t      }\n\n\t      return this.q.enqueue(this._display, target);\n\t    }\n\t    /**\n\t     * Tells the manager what to display immediately\n\t     * @private\n\t     * @param  {string} target Url or EpubCFI\n\t     * @return {Promise}\n\t     */\n\n\t  }, {\n\t    key: \"_display\",\n\t    value: function _display(target) {\n\t      var _this3 = this;\n\n\t      // if (!this.book) {\n\t      // \treturn;\n\t      // }\n\t      var displaying = new defer();\n\t      var displayed = displaying.promise;\n\t      var section;\n\t      this.displaying = displaying; // Check if this is a book percentage\n\n\t      if (this.locations && this.locations.length() && (isFloat(target) || target === \"1.0\")) {\n\t        // Handle 1.0\n\t        target = this.locations.cfiFromPercentage(parseFloat(target));\n\t      }\n\n\t      section = this.findInSpine(target);\n\n\t      if (!section) {\n\t        displaying.reject(new Error(\"No Section Found\"));\n\t        return displayed;\n\t      }\n\n\t      this.manager.display(section, target).then(function () {\n\t        displaying.resolve(section);\n\t        _this3.displaying = undefined;\n\t        /**\n\t         * Emit that a section has been displayed\n\t         * @event displayed\n\t         * @param {Section} section\n\t         * @memberof Rendition\n\t         */\n\n\t        _this3.emit(EVENTS.RENDITION.DISPLAYED, section);\n\n\t        _this3.reportLocation();\n\t      }, function (err) {\n\t        /**\n\t         * Emit that has been an error displaying\n\t         * @event displayError\n\t         * @param {Section} section\n\t         * @memberof Rendition\n\t         */\n\t        _this3.emit(EVENTS.RENDITION.DISPLAY_ERROR, err);\n\t      });\n\t      return displayed;\n\t    }\n\t    /**\n\t     * Report what section has been displayed\n\t     * @private\n\t     * @param  {*} view\n\t     */\n\n\t  }, {\n\t    key: \"afterDisplayed\",\n\t    value: function afterDisplayed(view) {\n\t      var _this4 = this;\n\n\t      view.on(EVENTS.VIEWS.MARK_CLICKED, function (cfiRange, data) {\n\t        return _this4.triggerMarkEvent(cfiRange, data, view);\n\t      });\n\t      this.hooks.render.trigger(view, this).then(function () {\n\t        if (view.contents) {\n\t          _this4.hooks.content.trigger(view.contents, _this4).then(function () {\n\t            /**\n\t             * Emit that a section has been rendered\n\t             * @event rendered\n\t             * @param {Section} section\n\t             * @param {View} view\n\t             * @memberof Rendition\n\t             */\n\t            _this4.emit(EVENTS.RENDITION.RENDERED, view.section, view);\n\t          });\n\t        } else {\n\t          _this4.emit(EVENTS.RENDITION.RENDERED, view.section, view);\n\t        }\n\t      });\n\t    }\n\t    /**\n\t     * Report what has been removed\n\t     * @private\n\t     * @param  {*} view\n\t     */\n\n\t  }, {\n\t    key: \"afterRemoved\",\n\t    value: function afterRemoved(view) {\n\t      var _this5 = this;\n\n\t      this.hooks.unloaded.trigger(view, this).then(function () {\n\t        /**\n\t         * Emit that a section has been removed\n\t         * @event removed\n\t         * @param {Section} section\n\t         * @param {View} view\n\t         * @memberof Rendition\n\t         */\n\t        _this5.emit(EVENTS.RENDITION.REMOVED, view.section, view);\n\t      });\n\t    }\n\t    /**\n\t     * Report resize events and display the last seen location\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"onResized\",\n\t    value: function onResized(size) {\n\t      /**\n\t       * Emit that the rendition has been resized\n\t       * @event resized\n\t       * @param {number} width\n\t       * @param {height} height\n\t       * @memberof Rendition\n\t       */\n\t      this.emit(EVENTS.RENDITION.RESIZED, {\n\t        width: size.width,\n\t        height: size.height\n\t      });\n\n\t      if (this.location && this.location.start) {\n\t        this.display(this.location.start.cfi);\n\t      }\n\t    }\n\t    /**\n\t     * Report orientation events and display the last seen location\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"onOrientationChange\",\n\t    value: function onOrientationChange(orientation) {\n\t      /**\n\t       * Emit that the rendition has been rotated\n\t       * @event orientationchange\n\t       * @param {string} orientation\n\t       * @memberof Rendition\n\t       */\n\t      this.emit(EVENTS.RENDITION.ORIENTATION_CHANGE, orientation);\n\t    }\n\t    /**\n\t     * Move the Rendition to a specific offset\n\t     * Usually you would be better off calling display()\n\t     * @param {object} offset\n\t     */\n\n\t  }, {\n\t    key: \"moveTo\",\n\t    value: function moveTo(offset) {\n\t      this.manager.moveTo(offset);\n\t    }\n\t    /**\n\t     * Trigger a resize of the views\n\t     * @param {number} [width]\n\t     * @param {number} [height]\n\t     */\n\n\t  }, {\n\t    key: \"resize\",\n\t    value: function resize(width, height) {\n\t      if (width) {\n\t        this.settings.width = width;\n\t      }\n\n\t      if (height) {\n\t        this.settings.height = height;\n\t      }\n\n\t      this.manager.resize(width, height);\n\t    }\n\t    /**\n\t     * Clear all rendered views\n\t     */\n\n\t  }, {\n\t    key: \"clear\",\n\t    value: function clear() {\n\t      this.manager.clear();\n\t    }\n\t    /**\n\t     * Go to the next \"page\" in the rendition\n\t     * @return {Promise}\n\t     */\n\n\t  }, {\n\t    key: \"next\",\n\t    value: function next() {\n\t      return this.q.enqueue(this.manager.next.bind(this.manager)).then(this.reportLocation.bind(this));\n\t    }\n\t    /**\n\t     * Go to the previous \"page\" in the rendition\n\t     * @return {Promise}\n\t     */\n\n\t  }, {\n\t    key: \"prev\",\n\t    value: function prev() {\n\t      return this.q.enqueue(this.manager.prev.bind(this.manager)).then(this.reportLocation.bind(this));\n\t    } //-- http://www.idpf.org/epub/301/spec/epub-publications.html#meta-properties-rendering\n\n\t    /**\n\t     * Determine the Layout properties from metadata and settings\n\t     * @private\n\t     * @param  {object} metadata\n\t     * @return {object} properties\n\t     */\n\n\t  }, {\n\t    key: \"determineLayoutProperties\",\n\t    value: function determineLayoutProperties(metadata) {\n\t      var properties;\n\t      var layout = this.settings.layout || metadata.layout || \"reflowable\";\n\t      var spread = this.settings.spread || metadata.spread || \"auto\";\n\t      var orientation = this.settings.orientation || metadata.orientation || \"auto\";\n\t      var flow = this.settings.flow || metadata.flow || \"auto\";\n\t      var viewport = metadata.viewport || \"\";\n\t      var minSpreadWidth = this.settings.minSpreadWidth || metadata.minSpreadWidth || 800;\n\t      var direction = this.settings.direction || metadata.direction || \"ltr\";\n\t      properties = {\n\t        layout: layout,\n\t        spread: spread,\n\t        orientation: orientation,\n\t        flow: flow,\n\t        viewport: viewport,\n\t        minSpreadWidth: minSpreadWidth,\n\t        direction: direction\n\t      };\n\t      return properties;\n\t    }\n\t    /**\n\t     * Adjust the flow of the rendition to paginated or scrolled\n\t     * (scrolled-continuous vs scrolled-doc are handled by different view managers)\n\t     * @param  {string} flow\n\t     */\n\n\t  }, {\n\t    key: \"flow\",\n\t    value: function flow(_flow2) {\n\t      var _flow = _flow2;\n\n\t      if (_flow2 === \"scrolled\" || _flow2 === \"scrolled-doc\" || _flow2 === \"scrolled-continuous\") {\n\t        _flow = \"scrolled\";\n\t      }\n\n\t      if (_flow2 === \"auto\" || _flow2 === \"paginated\") {\n\t        _flow = \"paginated\";\n\t      }\n\n\t      this.settings.flow = _flow2;\n\n\t      if (this._layout) {\n\t        this._layout.flow(_flow);\n\t      }\n\n\t      if (this.manager && this._layout) {\n\t        this.manager.applyLayout(this._layout);\n\t      }\n\n\t      if (this.manager) {\n\t        this.manager.updateFlow(_flow);\n\t      }\n\n\t      if (this.manager && this.manager.isRendered() && this.location) {\n\t        this.manager.clear();\n\t        this.display(this.location.start.cfi);\n\t      }\n\t    }\n\t    /**\n\t     * Adjust the layout of the rendition to reflowable or pre-paginated\n\t     * @param  {object} settings\n\t     */\n\n\t  }, {\n\t    key: \"layout\",\n\t    value: function layout(settings) {\n\t      var _this6 = this;\n\n\t      if (settings) {\n\t        this._layout = new Layout(settings);\n\n\t        this._layout.spread(settings.spread, this.settings.minSpreadWidth); // this.mapping = new Mapping(this._layout.props);\n\n\n\t        this._layout.on(EVENTS.LAYOUT.UPDATED, function (props, changed) {\n\t          _this6.emit(EVENTS.RENDITION.LAYOUT, props, changed);\n\t        });\n\t      }\n\n\t      if (this.manager && this._layout) {\n\t        this.manager.applyLayout(this._layout);\n\t      }\n\n\t      return this._layout;\n\t    }\n\t    /**\n\t     * Adjust if the rendition uses spreads\n\t     * @param  {string} spread none | auto (TODO: implement landscape, portrait, both)\n\t     * @param  {int} min min width to use spreads at\n\t     */\n\n\t  }, {\n\t    key: \"spread\",\n\t    value: function spread(_spread, min) {\n\t      this._layout.spread(_spread, min);\n\n\t      if (this.manager.isRendered()) {\n\t        this.manager.updateLayout();\n\t      }\n\t    }\n\t    /**\n\t     * Adjust the direction of the rendition\n\t     * @param  {string} dir\n\t     */\n\n\t  }, {\n\t    key: \"direction\",\n\t    value: function direction(dir) {\n\t      this.settings.direction = dir || \"ltr\";\n\n\t      if (this.manager) {\n\t        this.manager.direction(this.settings.direction);\n\t      }\n\n\t      if (this.manager && this.manager.isRendered() && this.location) {\n\t        this.manager.clear();\n\t        this.display(this.location.start.cfi);\n\t      }\n\t    }\n\t    /**\n\t     * Report the current location\n\t     * @fires relocated\n\t     * @fires locationChanged\n\t     */\n\n\t  }, {\n\t    key: \"reportLocation\",\n\t    value: function reportLocation() {\n\t      return this.q.enqueue(function reportedLocation() {\n\t        requestAnimationFrame(function reportedLocationAfterRAF() {\n\t          var location = this.manager.currentLocation();\n\n\t          if (location && location.then && typeof location.then === \"function\") {\n\t            location.then(function (result) {\n\t              var located = this.located(result);\n\n\t              if (!located || !located.start || !located.end) {\n\t                return;\n\t              }\n\n\t              this.location = located;\n\t              this.emit(EVENTS.RENDITION.LOCATION_CHANGED, {\n\t                index: this.location.start.index,\n\t                href: this.location.start.href,\n\t                start: this.location.start.cfi,\n\t                end: this.location.end.cfi,\n\t                percentage: this.location.start.percentage\n\t              });\n\t              this.emit(EVENTS.RENDITION.RELOCATED, this.location);\n\t            }.bind(this));\n\t          } else if (location) {\n\t            var located = this.located(location);\n\n\t            if (!located || !located.start || !located.end) {\n\t              return;\n\t            }\n\n\t            this.location = located;\n\t            /**\n\t             * @event locationChanged\n\t             * @deprecated\n\t             * @type {object}\n\t             * @property {number} index\n\t             * @property {string} href\n\t             * @property {EpubCFI} start\n\t             * @property {EpubCFI} end\n\t             * @property {number} percentage\n\t             * @memberof Rendition\n\t             */\n\n\t            this.emit(EVENTS.RENDITION.LOCATION_CHANGED, {\n\t              index: this.location.start.index,\n\t              href: this.location.start.href,\n\t              start: this.location.start.cfi,\n\t              end: this.location.end.cfi,\n\t              percentage: this.location.start.percentage\n\t            });\n\t            /**\n\t             * @event relocated\n\t             * @type {displayedLocation}\n\t             * @memberof Rendition\n\t             */\n\n\t            this.emit(EVENTS.RENDITION.RELOCATED, this.location);\n\t          }\n\t        }.bind(this));\n\t      }.bind(this));\n\t    }\n\t    /**\n\t     * Get the Current Location object\n\t     * @return {displayedLocation | promise} location (may be a promise)\n\t     */\n\n\t  }, {\n\t    key: \"currentLocation\",\n\t    value: function currentLocation() {\n\t      var location = this.manager.currentLocation();\n\n\t      if (location && location.then && typeof location.then === \"function\") {\n\t        location.then(function (result) {\n\t          var located = this.located(result);\n\t          return located;\n\t        }.bind(this));\n\t      } else if (location) {\n\t        var located = this.located(location);\n\t        return located;\n\t      }\n\t    }\n\t    /**\n\t     * Creates a Rendition#locationRange from location\n\t     * passed by the Manager\n\t     * @returns {displayedLocation}\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"located\",\n\t    value: function located(location) {\n\t      if (!location.length) {\n\t        return {};\n\t      }\n\n\t      var start = location[0];\n\t      var end = location[location.length - 1];\n\t      var located = {\n\t        start: {\n\t          index: start.index,\n\t          href: start.href,\n\t          cfi: start.mapping.start,\n\t          displayed: {\n\t            page: start.pages[0] || 1,\n\t            total: start.totalPages\n\t          }\n\t        },\n\t        end: {\n\t          index: end.index,\n\t          href: end.href,\n\t          cfi: end.mapping.end,\n\t          displayed: {\n\t            page: end.pages[end.pages.length - 1] || 1,\n\t            total: end.totalPages\n\t          }\n\t        }\n\t      };\n\n\t      if (this.locations) {\n\t        var locationStart = this.locations.locationFromCfi(start.mapping.start);\n\t        var locationEnd = this.locations.locationFromCfi(end.mapping.end);\n\n\t        if (locationStart != null) {\n\t          located.start.location = locationStart;\n\t          located.start.percentage = this.locations.percentageFromLocation(locationStart);\n\t        }\n\n\t        if (locationEnd != null) {\n\t          located.end.location = locationEnd;\n\t          located.end.percentage = this.locations.percentageFromLocation(locationEnd);\n\t        }\n\t      }\n\n\t      if (this.pageList) {\n\t        var pageStart = this.pageList.pageFromCfi(start.mapping.start);\n\t        var pageEnd = this.pageList.pageFromCfi(end.mapping.end);\n\n\t        if (pageStart != -1) {\n\t          located.start.page = pageStart;\n\t        }\n\n\t        if (pageEnd != -1) {\n\t          located.end.page = pageEnd;\n\t        }\n\t      }\n\n\t      if (end.index === this.manifest.spine[this.manifest.spine.length - 1].index && located.end.displayed.page >= located.end.displayed.total) {\n\t        located.atEnd = true;\n\t      }\n\n\t      if (start.index === this.manifest.spine[0].index && located.start.displayed.page === 1) {\n\t        located.atStart = true;\n\t      }\n\n\t      return located;\n\t    }\n\t    /**\n\t     * Remove and Clean Up the Rendition\n\t     */\n\n\t  }, {\n\t    key: \"destroy\",\n\t    value: function destroy() {\n\t      // Clear the queue\n\t      this.q.clear();\n\t      this.q = undefined;\n\t      this.manager && this.manager.destroy();\n\t      this.manifest = undefined;\n\t      this.spineByHref = undefined;\n\t      this.spineBySource = undefined;\n\t      this.spineById = undefined;\n\t      this.hooks.display.clear(); // this.hooks.serialize.clear();\n\n\t      this.hooks.content.clear();\n\t      this.hooks.layout.clear();\n\t      this.hooks.render.clear();\n\t      this.hooks.show.clear();\n\t      this.hooks = {};\n\t      this.themes.destroy();\n\t      this.themes = undefined;\n\t      this.epubcfi = undefined;\n\t      this.starting = undefined;\n\t      this.started = undefined;\n\t    }\n\t    /**\n\t     * Pass the events from a view's Contents\n\t     * @private\n\t     * @param  {Contents} view contents\n\t     */\n\n\t  }, {\n\t    key: \"passEvents\",\n\t    value: function passEvents(contents) {\n\t      var _this7 = this;\n\n\t      var listenedEvents = Contents.listenedEvents;\n\t      listenedEvents.forEach(function (e) {\n\t        contents.on(e, function (ev) {\n\t          return _this7.triggerViewEvent(ev, contents);\n\t        });\n\t      });\n\t      contents.on(EVENTS.CONTENTS.SELECTED, function (e) {\n\t        return _this7.triggerSelectedEvent(e, contents);\n\t      });\n\t    }\n\t    /**\n\t     * Emit events passed by a view\n\t     * @private\n\t     * @param  {event} e\n\t     */\n\n\t  }, {\n\t    key: \"triggerViewEvent\",\n\t    value: function triggerViewEvent(e, contents) {\n\t      this.emit(e.type, e, contents);\n\t    }\n\t    /**\n\t     * Emit a selection event's CFI Range passed from a a view\n\t     * @private\n\t     * @param  {EpubCFI} cfirange\n\t     */\n\n\t  }, {\n\t    key: \"triggerSelectedEvent\",\n\t    value: function triggerSelectedEvent(cfirange, contents) {\n\t      /**\n\t       * Emit that a text selection has occured\n\t       * @event selected\n\t       * @param {EpubCFI} cfirange\n\t       * @param {Contents} contents\n\t       * @memberof Rendition\n\t       */\n\t      this.emit(EVENTS.RENDITION.SELECTED, cfirange, contents);\n\t    }\n\t    /**\n\t     * Emit a markClicked event with the cfiRange and data from a mark\n\t     * @private\n\t     * @param  {EpubCFI} cfirange\n\t     */\n\n\t  }, {\n\t    key: \"triggerMarkEvent\",\n\t    value: function triggerMarkEvent(cfiRange, data, contents) {\n\t      /**\n\t       * Emit that a mark was clicked\n\t       * @event markClicked\n\t       * @param {EpubCFI} cfirange\n\t       * @param {object} data\n\t       * @param {Contents} contents\n\t       * @memberof Rendition\n\t       */\n\t      this.emit(EVENTS.RENDITION.MARK_CLICKED, cfiRange, data, contents);\n\t    }\n\t    /**\n\t     * Get a Range from a Visible CFI\n\t     * @param  {string} cfi EpubCfi String\n\t     * @param  {string} ignoreClass\n\t     * @return {range}\n\t     */\n\n\t  }, {\n\t    key: \"getRange\",\n\t    value: function getRange(cfi, ignoreClass) {\n\t      var _cfi = new EpubCFI(cfi);\n\n\t      var found = this.manager.visible().filter(function (view) {\n\t        if (_cfi.spinePos === view.index) return true;\n\t      }); // Should only every return 1 item\n\n\t      if (found.length) {\n\t        return found[0].contents.range(_cfi, ignoreClass);\n\t      }\n\t    }\n\t    /**\n\t     * Hook to adjust images to fit in columns\n\t     * @param  {Contents} contents\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"adjustImages\",\n\t    value: function adjustImages(contents) {\n\t      if (this._layout.name === \"pre-paginated\") {\n\t        return new Promise(function (resolve) {\n\t          resolve();\n\t        });\n\t      }\n\n\t      var computed = contents.window.getComputedStyle(contents.content, null);\n\t      var height = contents.content.offsetHeight - (parseFloat(computed.paddingTop) + parseFloat(computed.paddingBottom));\n\t      contents.addStylesheetRules({\n\t        \"img\": {\n\t          \"max-width\": (this._layout.columnWidth ? this._layout.columnWidth + \"px\" : \"100%\") + \"!important\",\n\t          \"max-height\": height + \"px\" + \"!important\",\n\t          \"object-fit\": \"contain\",\n\t          \"page-break-inside\": \"avoid\",\n\t          \"break-inside\": \"avoid\"\n\t        },\n\t        \"svg\": {\n\t          \"max-width\": (this._layout.columnWidth ? this._layout.columnWidth + \"px\" : \"100%\") + \"!important\",\n\t          \"max-height\": height + \"px\" + \"!important\",\n\t          \"page-break-inside\": \"avoid\",\n\t          \"break-inside\": \"avoid\"\n\t        }\n\t      });\n\t      return new Promise(function (resolve, reject) {\n\t        // Wait to apply\n\t        setTimeout(function () {\n\t          resolve();\n\t        }, 1);\n\t      });\n\t    }\n\t    /**\n\t     * Hook to add the book identifier\n\t     * @param  {Contents} contents\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"addIdentifier\",\n\t    value: function addIdentifier(contents) {\n\t      var ident = this.book.metadata.identifier;\n\t      contents.addIdentifier(ident);\n\t    }\n\t    /**\n\t     * Get the Contents object of each rendered view\n\t     * @returns {Contents[]}\n\t     */\n\n\t  }, {\n\t    key: \"getContents\",\n\t    value: function getContents() {\n\t      return this.manager ? this.manager.getContents() : [];\n\t    }\n\t    /**\n\t     * Get the views member from the manager\n\t     * @returns {Views}\n\t     */\n\n\t  }, {\n\t    key: \"views\",\n\t    value: function views() {\n\t      var views = this.manager ? this.manager.views : undefined;\n\t      return views || [];\n\t    }\n\t    /**\n\t     * Hook to handle link clicks in rendered content\n\t     * @param  {Contents} contents\n\t     * @private\n\t     */\n\n\t  }, {\n\t    key: \"handleLinks\",\n\t    value: function handleLinks(contents) {\n\t      var _this8 = this;\n\n\t      if (contents) {\n\t        contents.on(EVENTS.CONTENTS.LINK_CLICKED, function (href) {\n\t          var relative = _this8.book.path.relative(href);\n\n\t          _this8.display(relative);\n\t        });\n\t      }\n\t    }\n\t    /**\n\t     * @return {object} spineItem\n\t     */\n\n\t  }, {\n\t    key: \"findInSpine\",\n\t    value: function findInSpine(target) {\n\t      var index = 0;\n\n\t      if (this.epubcfi.isCfiString(target)) {\n\t        var cfi = new EpubCFI(target);\n\t        index = cfi.spinePos;\n\t      } else if (typeof target === \"number\" || isNaN(target) === false) {\n\t        index = target;\n\t      } else if (typeof target === \"string\" && target.indexOf(\"#\") === 0) {\n\t        index = this.spineById[target.substring(1)];\n\t      } else if (typeof target === \"string\") {\n\t        // Remove fragments\n\t        target = target.split(\"#\")[0];\n\t        index = this.spineByHref[target] || this.spineByHref[encodeURI(target)] || this.spineBySource[target] || this.spineBySource[encodeURI(target)];\n\t      }\n\n\t      return this.manifest.spine[index] || null;\n\t    }\n\t    /**\n\t     * Generates the Book Key using the identifer in the manifest or other string provided\n\t     * @param  {string} [identifier] to use instead of metadata identifier\n\t     * @return {string} key\n\t     */\n\n\t  }, {\n\t    key: \"key\",\n\t    value: function key(identifier) {\n\t      var ident = identifier || this.manifest.metadata.identifier;\n\t      return \"epubjs-\".concat(EPUBJS_VERSION, \"-\").concat(ident);\n\t    }\n\t  }, {\n\t    key: \"worker\",\n\t    value: function worker(workerUrl) {\n\t      var _this9 = this;\n\n\t      var deferred = new defer(); // let key = this.key();\n\t      // Resolve early if book is not archived and not cross domain\n\n\t      var url = new Url(this.book.url);\n\t      var source = this.book.source ? this.book.source.type : '';\n\n\t      if (source !== \"application/epub+zip\" && url.origin === window.location.origin) {\n\t        deferred.resolve();\n\t        return deferred.promise;\n\t      }\n\n\t      if ('serviceWorker' in navigator) {\n\t        var worker = navigator.serviceWorker.controller; // Worker is already running\n\n\t        if (worker) {\n\t          deferred.resolve(worker);\n\t          return deferred.promise;\n\t        }\n\n\t        navigator.serviceWorker.register(workerUrl, {\n\t          scope: this.settings.workerScope\n\t        }).then(function (reg) {\n\t          if (reg.active) {\n\t            worker = reg.active;\n\t            deferred.resolve(worker);\n\t          } else {\n\t            worker = reg.installing;\n\t            worker.addEventListener('statechange', function () {\n\t              if (worker.state === \"activated\") {\n\t                deferred.resolve(worker);\n\t              }\n\t            });\n\t          }\n\t        }, function (error) {\n\t          // registration failed\n\t          _this9.emit(EVENTS.RENDITION.WORKER_FAILED);\n\n\t          deferred.reject('Worker registration failed', error);\n\t        });\n\t      } else {\n\t        deferred.resolve();\n\t      }\n\n\t      return deferred.promise;\n\t    }\n\t  }, {\n\t    key: \"cache\",\n\t    value: function cache(worker) {\n\t      var key = this.key();\n\n\t      if (!worker) {\n\t        worker = navigator.serviceWorker.controller;\n\t      }\n\n\t      worker.postMessage({\n\t        method: \"add\",\n\t        key: key,\n\t        resources: this.manifest.resources\n\t      });\n\t    }\n\t  }, {\n\t    key: \"scale\",\n\t    value: function scale(s) {\n\t      return this.manager && this.manager.scale(s);\n\t    }\n\t  }]);\n\n\t  return Rendition;\n\t}(); //-- Enable binding events to Renderer\n\n\n\teventEmitter(Rendition.prototype);\n\n\tvar urlPolyfill = createCommonjsModule(function (module) {\n\n\t  (function (root, factory) {\n\t    // Fix for this being undefined in modules\n\t    if (!root) {\n\t      root = window || commonjsGlobal;\n\t    }\n\n\t    if (module.exports) {\n\t      // Node\n\t      module.exports = factory(root);\n\t    } else {\n\t      // Browser globals (root is window)\n\t      root.URL = factory(root);\n\t    }\n\t  })(commonjsGlobal, function (scope) {\n\t    // feature detect for URL constructor\n\t    var hasWorkingUrl = false;\n\n\t    if (!scope.forceJURL) {\n\t      try {\n\t        var u = new URL('b', 'http://a');\n\t        u.pathname = 'c%20d';\n\t        hasWorkingUrl = u.href === 'http://a/c%20d';\n\t      } catch (e) {}\n\t    }\n\n\t    if (hasWorkingUrl) return scope.URL;\n\t    var relative = Object.create(null);\n\t    relative['ftp'] = 21;\n\t    relative['file'] = 0;\n\t    relative['gopher'] = 70;\n\t    relative['http'] = 80;\n\t    relative['https'] = 443;\n\t    relative['ws'] = 80;\n\t    relative['wss'] = 443;\n\t    var relativePathDotMapping = Object.create(null);\n\t    relativePathDotMapping['%2e'] = '.';\n\t    relativePathDotMapping['.%2e'] = '..';\n\t    relativePathDotMapping['%2e.'] = '..';\n\t    relativePathDotMapping['%2e%2e'] = '..';\n\n\t    function isRelativeScheme(scheme) {\n\t      return relative[scheme] !== undefined;\n\t    }\n\n\t    function invalid() {\n\t      clear.call(this);\n\t      this._isInvalid = true;\n\t    }\n\n\t    function IDNAToASCII(h) {\n\t      if ('' == h) {\n\t        invalid.call(this);\n\t      } // XXX\n\n\n\t      return h.toLowerCase();\n\t    }\n\n\t    function percentEscape(c) {\n\t      var unicode = c.charCodeAt(0);\n\n\t      if (unicode > 0x20 && unicode < 0x7F && // \" # < > ? `\n\t      [0x22, 0x23, 0x3C, 0x3E, 0x3F, 0x60].indexOf(unicode) == -1) {\n\t        return c;\n\t      }\n\n\t      return encodeURIComponent(c);\n\t    }\n\n\t    function percentEscapeQuery(c) {\n\t      // XXX This actually needs to encode c using encoding and then\n\t      // convert the bytes one-by-one.\n\t      var unicode = c.charCodeAt(0);\n\n\t      if (unicode > 0x20 && unicode < 0x7F && // \" # < > ` (do not escape '?')\n\t      [0x22, 0x23, 0x3C, 0x3E, 0x60].indexOf(unicode) == -1) {\n\t        return c;\n\t      }\n\n\t      return encodeURIComponent(c);\n\t    }\n\n\t    var EOF = undefined,\n\t        ALPHA = /[a-zA-Z]/,\n\t        ALPHANUMERIC = /[a-zA-Z0-9\\+\\-\\.]/;\n\n\t    function parse(input, stateOverride, base) {\n\n\t      var state = stateOverride || 'scheme start',\n\t          cursor = 0,\n\t          buffer = '',\n\t          seenAt = false,\n\t          seenBracket = false;\n\n\t      loop: while ((input[cursor - 1] != EOF || cursor == 0) && !this._isInvalid) {\n\t        var c = input[cursor];\n\n\t        switch (state) {\n\t          case 'scheme start':\n\t            if (c && ALPHA.test(c)) {\n\t              buffer += c.toLowerCase(); // ASCII-safe\n\n\t              state = 'scheme';\n\t            } else if (!stateOverride) {\n\t              buffer = '';\n\t              state = 'no scheme';\n\t              continue;\n\t            } else {\n\t              break loop;\n\t            }\n\n\t            break;\n\n\t          case 'scheme':\n\t            if (c && ALPHANUMERIC.test(c)) {\n\t              buffer += c.toLowerCase(); // ASCII-safe\n\t            } else if (':' == c) {\n\t              this._scheme = buffer;\n\t              buffer = '';\n\n\t              if (stateOverride) {\n\t                break loop;\n\t              }\n\n\t              if (isRelativeScheme(this._scheme)) {\n\t                this._isRelative = true;\n\t              }\n\n\t              if ('file' == this._scheme) {\n\t                state = 'relative';\n\t              } else if (this._isRelative && base && base._scheme == this._scheme) {\n\t                state = 'relative or authority';\n\t              } else if (this._isRelative) {\n\t                state = 'authority first slash';\n\t              } else {\n\t                state = 'scheme data';\n\t              }\n\t            } else if (!stateOverride) {\n\t              buffer = '';\n\t              cursor = 0;\n\t              state = 'no scheme';\n\t              continue;\n\t            } else if (EOF == c) {\n\t              break loop;\n\t            } else {\n\t              break loop;\n\t            }\n\n\t            break;\n\n\t          case 'scheme data':\n\t            if ('?' == c) {\n\t              this._query = '?';\n\t              state = 'query';\n\t            } else if ('#' == c) {\n\t              this._fragment = '#';\n\t              state = 'fragment';\n\t            } else {\n\t              // XXX error handling\n\t              if (EOF != c && '\\t' != c && '\\n' != c && '\\r' != c) {\n\t                this._schemeData += percentEscape(c);\n\t              }\n\t            }\n\n\t            break;\n\n\t          case 'no scheme':\n\t            if (!base || !isRelativeScheme(base._scheme)) {\n\t              invalid.call(this);\n\t            } else {\n\t              state = 'relative';\n\t              continue;\n\t            }\n\n\t            break;\n\n\t          case 'relative or authority':\n\t            if ('/' == c && '/' == input[cursor + 1]) {\n\t              state = 'authority ignore slashes';\n\t            } else {\n\t              state = 'relative';\n\t              continue;\n\t            }\n\n\t            break;\n\n\t          case 'relative':\n\t            this._isRelative = true;\n\t            if ('file' != this._scheme) this._scheme = base._scheme;\n\n\t            if (EOF == c) {\n\t              this._host = base._host;\n\t              this._port = base._port;\n\t              this._path = base._path.slice();\n\t              this._query = base._query;\n\t              this._username = base._username;\n\t              this._password = base._password;\n\t              break loop;\n\t            } else if ('/' == c || '\\\\' == c) {\n\t              state = 'relative slash';\n\t            } else if ('?' == c) {\n\t              this._host = base._host;\n\t              this._port = base._port;\n\t              this._path = base._path.slice();\n\t              this._query = '?';\n\t              this._username = base._username;\n\t              this._password = base._password;\n\t              state = 'query';\n\t            } else if ('#' == c) {\n\t              this._host = base._host;\n\t              this._port = base._port;\n\t              this._path = base._path.slice();\n\t              this._query = base._query;\n\t              this._fragment = '#';\n\t              this._username = base._username;\n\t              this._password = base._password;\n\t              state = 'fragment';\n\t            } else {\n\t              var nextC = input[cursor + 1];\n\t              var nextNextC = input[cursor + 2];\n\n\t              if ('file' != this._scheme || !ALPHA.test(c) || nextC != ':' && nextC != '|' || EOF != nextNextC && '/' != nextNextC && '\\\\' != nextNextC && '?' != nextNextC && '#' != nextNextC) {\n\t                this._host = base._host;\n\t                this._port = base._port;\n\t                this._username = base._username;\n\t                this._password = base._password;\n\t                this._path = base._path.slice();\n\n\t                this._path.pop();\n\t              }\n\n\t              state = 'relative path';\n\t              continue;\n\t            }\n\n\t            break;\n\n\t          case 'relative slash':\n\t            if ('/' == c || '\\\\' == c) {\n\n\t              if ('file' == this._scheme) {\n\t                state = 'file host';\n\t              } else {\n\t                state = 'authority ignore slashes';\n\t              }\n\t            } else {\n\t              if ('file' != this._scheme) {\n\t                this._host = base._host;\n\t                this._port = base._port;\n\t                this._username = base._username;\n\t                this._password = base._password;\n\t              }\n\n\t              state = 'relative path';\n\t              continue;\n\t            }\n\n\t            break;\n\n\t          case 'authority first slash':\n\t            if ('/' == c) {\n\t              state = 'authority second slash';\n\t            } else {\n\t              state = 'authority ignore slashes';\n\t              continue;\n\t            }\n\n\t            break;\n\n\t          case 'authority second slash':\n\t            state = 'authority ignore slashes';\n\n\t            if ('/' != c) {\n\t              continue;\n\t            }\n\n\t            break;\n\n\t          case 'authority ignore slashes':\n\t            if ('/' != c && '\\\\' != c) {\n\t              state = 'authority';\n\t              continue;\n\t            }\n\n\t            break;\n\n\t          case 'authority':\n\t            if ('@' == c) {\n\t              if (seenAt) {\n\t                buffer += '%40';\n\t              }\n\n\t              seenAt = true;\n\n\t              for (var i = 0; i < buffer.length; i++) {\n\t                var cp = buffer[i];\n\n\t                if ('\\t' == cp || '\\n' == cp || '\\r' == cp) {\n\t                  continue;\n\t                } // XXX check URL code points\n\n\n\t                if (':' == cp && null === this._password) {\n\t                  this._password = '';\n\t                  continue;\n\t                }\n\n\t                var tempC = percentEscape(cp);\n\t                null !== this._password ? this._password += tempC : this._username += tempC;\n\t              }\n\n\t              buffer = '';\n\t            } else if (EOF == c || '/' == c || '\\\\' == c || '?' == c || '#' == c) {\n\t              cursor -= buffer.length;\n\t              buffer = '';\n\t              state = 'host';\n\t              continue;\n\t            } else {\n\t              buffer += c;\n\t            }\n\n\t            break;\n\n\t          case 'file host':\n\t            if (EOF == c || '/' == c || '\\\\' == c || '?' == c || '#' == c) {\n\t              if (buffer.length == 2 && ALPHA.test(buffer[0]) && (buffer[1] == ':' || buffer[1] == '|')) {\n\t                state = 'relative path';\n\t              } else if (buffer.length == 0) {\n\t                state = 'relative path start';\n\t              } else {\n\t                this._host = IDNAToASCII.call(this, buffer);\n\t                buffer = '';\n\t                state = 'relative path start';\n\t              }\n\n\t              continue;\n\t            } else if ('\\t' == c || '\\n' == c || '\\r' == c) ; else {\n\t              buffer += c;\n\t            }\n\n\t            break;\n\n\t          case 'host':\n\t          case 'hostname':\n\t            if (':' == c && !seenBracket) {\n\t              // XXX host parsing\n\t              this._host = IDNAToASCII.call(this, buffer);\n\t              buffer = '';\n\t              state = 'port';\n\n\t              if ('hostname' == stateOverride) {\n\t                break loop;\n\t              }\n\t            } else if (EOF == c || '/' == c || '\\\\' == c || '?' == c || '#' == c) {\n\t              this._host = IDNAToASCII.call(this, buffer);\n\t              buffer = '';\n\t              state = 'relative path start';\n\n\t              if (stateOverride) {\n\t                break loop;\n\t              }\n\n\t              continue;\n\t            } else if ('\\t' != c && '\\n' != c && '\\r' != c) {\n\t              if ('[' == c) {\n\t                seenBracket = true;\n\t              } else if (']' == c) {\n\t                seenBracket = false;\n\t              }\n\n\t              buffer += c;\n\t            }\n\n\t            break;\n\n\t          case 'port':\n\t            if (/[0-9]/.test(c)) {\n\t              buffer += c;\n\t            } else if (EOF == c || '/' == c || '\\\\' == c || '?' == c || '#' == c || stateOverride) {\n\t              if ('' != buffer) {\n\t                var temp = parseInt(buffer, 10);\n\n\t                if (temp != relative[this._scheme]) {\n\t                  this._port = temp + '';\n\t                }\n\n\t                buffer = '';\n\t              }\n\n\t              if (stateOverride) {\n\t                break loop;\n\t              }\n\n\t              state = 'relative path start';\n\t              continue;\n\t            } else if ('\\t' == c || '\\n' == c || '\\r' == c) ; else {\n\t              invalid.call(this);\n\t            }\n\n\t            break;\n\n\t          case 'relative path start':\n\t            state = 'relative path';\n\n\t            if ('/' != c && '\\\\' != c) {\n\t              continue;\n\t            }\n\n\t            break;\n\n\t          case 'relative path':\n\t            if (EOF == c || '/' == c || '\\\\' == c || !stateOverride && ('?' == c || '#' == c)) {\n\n\t              var tmp;\n\n\t              if (tmp = relativePathDotMapping[buffer.toLowerCase()]) {\n\t                buffer = tmp;\n\t              }\n\n\t              if ('..' == buffer) {\n\t                this._path.pop();\n\n\t                if ('/' != c && '\\\\' != c) {\n\t                  this._path.push('');\n\t                }\n\t              } else if ('.' == buffer && '/' != c && '\\\\' != c) {\n\t                this._path.push('');\n\t              } else if ('.' != buffer) {\n\t                if ('file' == this._scheme && this._path.length == 0 && buffer.length == 2 && ALPHA.test(buffer[0]) && buffer[1] == '|') {\n\t                  buffer = buffer[0] + ':';\n\t                }\n\n\t                this._path.push(buffer);\n\t              }\n\n\t              buffer = '';\n\n\t              if ('?' == c) {\n\t                this._query = '?';\n\t                state = 'query';\n\t              } else if ('#' == c) {\n\t                this._fragment = '#';\n\t                state = 'fragment';\n\t              }\n\t            } else if ('\\t' != c && '\\n' != c && '\\r' != c) {\n\t              buffer += percentEscape(c);\n\t            }\n\n\t            break;\n\n\t          case 'query':\n\t            if (!stateOverride && '#' == c) {\n\t              this._fragment = '#';\n\t              state = 'fragment';\n\t            } else if (EOF != c && '\\t' != c && '\\n' != c && '\\r' != c) {\n\t              this._query += percentEscapeQuery(c);\n\t            }\n\n\t            break;\n\n\t          case 'fragment':\n\t            if (EOF != c && '\\t' != c && '\\n' != c && '\\r' != c) {\n\t              this._fragment += c;\n\t            }\n\n\t            break;\n\t        }\n\n\t        cursor++;\n\t      }\n\t    }\n\n\t    function clear() {\n\t      this._scheme = '';\n\t      this._schemeData = '';\n\t      this._username = '';\n\t      this._password = null;\n\t      this._host = '';\n\t      this._port = '';\n\t      this._path = [];\n\t      this._query = '';\n\t      this._fragment = '';\n\t      this._isInvalid = false;\n\t      this._isRelative = false;\n\t    } // Does not process domain names or IP addresses.\n\t    // Does not handle encoding for the query parameter.\n\n\n\t    function jURL(url, base\n\t    /* , encoding */\n\t    ) {\n\t      if (base !== undefined && !(base instanceof jURL)) base = new jURL(String(base));\n\t      this._url = url;\n\t      clear.call(this);\n\t      var input = url.replace(/^[ \\t\\r\\n\\f]+|[ \\t\\r\\n\\f]+$/g, ''); // encoding = encoding || 'utf-8'\n\n\t      parse.call(this, input, null, base);\n\t    }\n\n\t    jURL.prototype = {\n\t      toString: function toString() {\n\t        return this.href;\n\t      },\n\n\t      get href() {\n\t        if (this._isInvalid) return this._url;\n\t        var authority = '';\n\n\t        if ('' != this._username || null != this._password) {\n\t          authority = this._username + (null != this._password ? ':' + this._password : '') + '@';\n\t        }\n\n\t        return this.protocol + (this._isRelative ? '//' + authority + this.host : '') + this.pathname + this._query + this._fragment;\n\t      },\n\n\t      set href(href) {\n\t        clear.call(this);\n\t        parse.call(this, href);\n\t      },\n\n\t      get protocol() {\n\t        return this._scheme + ':';\n\t      },\n\n\t      set protocol(protocol) {\n\t        if (this._isInvalid) return;\n\t        parse.call(this, protocol + ':', 'scheme start');\n\t      },\n\n\t      get host() {\n\t        return this._isInvalid ? '' : this._port ? this._host + ':' + this._port : this._host;\n\t      },\n\n\t      set host(host) {\n\t        if (this._isInvalid || !this._isRelative) return;\n\t        parse.call(this, host, 'host');\n\t      },\n\n\t      get hostname() {\n\t        return this._host;\n\t      },\n\n\t      set hostname(hostname) {\n\t        if (this._isInvalid || !this._isRelative) return;\n\t        parse.call(this, hostname, 'hostname');\n\t      },\n\n\t      get port() {\n\t        return this._port;\n\t      },\n\n\t      set port(port) {\n\t        if (this._isInvalid || !this._isRelative) return;\n\t        parse.call(this, port, 'port');\n\t      },\n\n\t      get pathname() {\n\t        return this._isInvalid ? '' : this._isRelative ? '/' + this._path.join('/') : this._schemeData;\n\t      },\n\n\t      set pathname(pathname) {\n\t        if (this._isInvalid || !this._isRelative) return;\n\t        this._path = [];\n\t        parse.call(this, pathname, 'relative path start');\n\t      },\n\n\t      get search() {\n\t        return this._isInvalid || !this._query || '?' == this._query ? '' : this._query;\n\t      },\n\n\t      set search(search) {\n\t        if (this._isInvalid || !this._isRelative) return;\n\t        this._query = '?';\n\t        if ('?' == search[0]) search = search.slice(1);\n\t        parse.call(this, search, 'query');\n\t      },\n\n\t      get hash() {\n\t        return this._isInvalid || !this._fragment || '#' == this._fragment ? '' : this._fragment;\n\t      },\n\n\t      set hash(hash) {\n\t        if (this._isInvalid) return;\n\t        this._fragment = '#';\n\t        if ('#' == hash[0]) hash = hash.slice(1);\n\t        parse.call(this, hash, 'fragment');\n\t      },\n\n\t      get origin() {\n\t        var host;\n\n\t        if (this._isInvalid || !this._scheme) {\n\t          return '';\n\t        } // javascript: Gecko returns String(\"\"), WebKit/Blink String(\"null\")\n\t        // Gecko throws error for \"data://\"\n\t        // data: Gecko returns \"\", Blink returns \"data://\", WebKit returns \"null\"\n\t        // Gecko returns String(\"\") for file: mailto:\n\t        // WebKit/Blink returns String(\"SCHEME://\") for file: mailto:\n\n\n\t        switch (this._scheme) {\n\t          case 'file':\n\t            return 'file://';\n\t          // EPUBJS Added\n\n\t          case 'data':\n\t          case 'javascript':\n\t          case 'mailto':\n\t            return 'null';\n\t        }\n\n\t        host = this.host;\n\n\t        if (!host) {\n\t          return '';\n\t        }\n\n\t        return this._scheme + '://' + host;\n\t      }\n\n\t    }; // Copy over the static methods\n\n\t    var OriginalURL = scope.URL;\n\n\t    if (OriginalURL) {\n\t      jURL.createObjectURL = function (blob) {\n\t        // IE extension allows a second optional options argument.\n\t        // http://msdn.microsoft.com/en-us/library/ie/hh772302(v=vs.85).aspx\n\t        return OriginalURL.createObjectURL.apply(OriginalURL, arguments);\n\t      };\n\n\t      jURL.revokeObjectURL = function (url) {\n\t        OriginalURL.revokeObjectURL(url);\n\t      };\n\t    }\n\n\t    return jURL;\n\t  });\n\t});\n\n\t/**\n\t * Book proxy\n\t */\n\n\tvar Bridge =\n\t/*#__PURE__*/\n\tfunction () {\n\t  function Bridge(options) {\n\t    var _this = this;\n\n\t    classCallCheck(this, Bridge);\n\n\t    this.waiting = {};\n\t    this.ready = new Promise(function (resolve, reject) {\n\t      _this.resolveReady = resolve;\n\t      _this.rejectReady = reject;\n\t    });\n\n\t    if (options && options.worker) {\n\t      this.worker = new Worker(options.worker);\n\t      this.worker.addEventListener(\"message\", this.listen.bind(this));\n\t      this.ask(\"init\", [options]);\n\t    }\n\t  }\n\n\t  createClass(Bridge, [{\n\t    key: \"ask\",\n\t    value: function ask(method, args) {\n\t      var asking = new defer();\n\t      var promiseId = asking.id;\n\n\t      if (this.worker) {\n\t        var str = JSON.stringify({\n\t          method: method,\n\t          args: args,\n\t          promise: promiseId\n\t        });\n\n\t        if (method in this.waiting) {\n\t          this.waiting[promiseId].push(asking);\n\t        } else {\n\t          this.waiting[promiseId] = [asking];\n\t        }\n\t        this.worker.postMessage(str);\n\t      } else {\n\t        asking.resolve(this.epub[method].apply(this.epub, args));\n\t      }\n\n\t      return asking.promise;\n\t    }\n\t  }, {\n\t    key: \"listen\",\n\t    value: function listen(event) {\n\t      var data = event.data;\n\n\t      if (typeof data === \"string\") {\n\t        data = JSON.parse(data);\n\t      }\n\n\t      if (data.promise && data.promise in this.waiting) {\n\t        var p = this.waiting[data.promise].shift();\n\n\t        if (p) {\n\t          p.resolve(data.value);\n\t        }\n\t      } // Events\n\n\n\t      if (data.eventName) {\n\t        switch (data.eventName) {\n\t          case \"ready\":\n\t            this.manifest = event.data.value;\n\t            this.book = new Book(this.manifest);\n\t            this.resolveReady(this.book);\n\t            break;\n\n\t          case \"failed\":\n\t            this.rejectReady(event.data.error);\n\t            break;\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: \"open\",\n\t    value: function open(url) {\n\t      var _this2 = this;\n\n\t      return this.ask(\"open\", [url]).then(function (result) {\n\t        if (typeof result === \"string\") {\n\t          _this2.manifest = JSON.parse(result);\n\t          _this2.book = new Book(_this2.manifest);\n\t        } else {\n\t          _this2.book = result;\n\t        }\n\n\t        _this2.resolveReady(_this2.book);\n\n\t        return _this2.book;\n\t      });\n\t    }\n\t  }, {\n\t    key: \"key\",\n\t    value: function key(identifier) {\n\t      return this.ask(\"key\", [identifier]);\n\t    }\n\t  }, {\n\t    key: \"replacements\",\n\t    value: function replacements() {\n\t      var _this3 = this;\n\n\t      return this.ask(\"replacements\").then(function (manifest) {\n\t        _this3.manifest = manifest;\n\t        _this3.book = new Book(_this3.manifest);\n\t        return _this3.book;\n\t      });\n\t    }\n\t  }, {\n\t    key: \"cache\",\n\t    value: function cache() {\n\t      var _this4 = this;\n\n\t      return this.ask(\"cache\").then(function (manifest) {\n\t        _this4.manifest = manifest;\n\t        _this4.book = new Book(_this4.manifest);\n\t        return _this4.book;\n\t      });\n\t    }\n\t  }, {\n\t    key: \"locations\",\n\t    value: function locations() {\n\t      var _this5 = this;\n\n\t      return this.ask(\"replacements\").then(function (manifest) {\n\t        _this5.manifest = manifest;\n\t        _this5.book = new Book(_this5.manifest);\n\t        return _this5.book;\n\t      });\n\t    }\n\t  }, {\n\t    key: \"generateLocations\",\n\t    value: function generateLocations(breakPoint) {\n\t      var _this6 = this;\n\n\t      return this.ask(\"generateLocations\", [breakPoint]).then(function (locations) {\n\t        if (!_this6.book) {\n\t          return;\n\t        }\n\n\t        _this6.book.locations = locations;\n\t        return locations;\n\t      });\n\t    }\n\t  }, {\n\t    key: \"loadLocations\",\n\t    value: function loadLocations(json) {\n\t      var locations;\n\n\t      if (!this.book) {\n\t        return;\n\t      }\n\n\t      if (typeof locations === \"string\") {\n\t        locations = JSON.parse(json);\n\t      } else {\n\t        locations = json;\n\t      }\n\n\t      this.book.locations = locations;\n\t    }\n\t  }, {\n\t    key: \"destroy\",\n\t    value: function destroy() {\n\t      this.ask(\"destroy\");\n\t      this.worker.removeEventListener(\"message\", this.listen);\n\t    }\n\t  }]);\n\n\t  return Bridge;\n\t}();\n\n\t/**\n\t * Creates a new Book or Book Bridge & Worker\n\t * @param {string|ArrayBuffer} url URL, Path or ArrayBuffer\n\t * @param {object} options to pass to the book\n\t * @returns {Book} a new Book object\n\t * @example ePub(\"/path/to/book.epub\", {})\n\t */\n\n\tfunction ePub(_x) {\n\t  return _ePub.apply(this, arguments);\n\t}\n\n\tfunction _ePub() {\n\t  _ePub = asyncToGenerator(\n\t  /*#__PURE__*/\n\t  regenerator.mark(function _callee(url) {\n\t    var options,\n\t        epub,\n\t        rendition,\n\t        _args = arguments;\n\t    return regenerator.wrap(function _callee$(_context) {\n\t      while (1) {\n\t        switch (_context.prev = _context.next) {\n\t          case 0:\n\t            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n\t            if (!(_args.length === 0 || _args.length === 1 && _typeof_1(_args[0]) === \"object\")) {\n\t              _context.next = 3;\n\t              break;\n\t            }\n\n\t            return _context.abrupt(\"return\", construct(Epub, Array.prototype.slice.call(_args)));\n\n\t          case 3:\n\t            if (options.worker) {\n\t              epub = new Bridge(options);\n\t            } else {\n\t              epub = new Epub(options);\n\t            }\n\n\t            return _context.abrupt(\"return\", epub.open(url).then(function (book) {\n\t              /**\n\t               * Sugar to render a book to an element\n\t               * @param  {element | string} element element or string to add a rendition to\n\t               * @param  {object} [options]\n\t               * @return {Rendition}\n\t               */\n\t              book.renderTo = function (element) {\n\t                var renditionOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t                if (options && typeof options.worker !== \"undefined\" && typeof renditionOptions.worker === \"undefined\") {\n\t                  renditionOptions.worker = options.worker;\n\t                }\n\n\t                rendition = new Rendition(book.manifest, renditionOptions);\n\t                rendition.renderTo(element); // If the workers fails, switch to replacements\n\n\t                rendition.on(\"workerFailed\", function () {\n\t                  rendition.clear();\n\t                  epub.replacements().then(function (book) {\n\t                    rendition.unpack(book.manifest);\n\t                    rendition.display(rendition.location);\n\t                  });\n\t                });\n\t                return rendition;\n\t              };\n\n\t              book.generateLocations = function (chars) {\n\t                return epub.generateLocations(chars).then(function (locations) {\n\t                  book.locations = locations;\n\t                  return locations;\n\t                });\n\t              };\n\n\t              book._destroy = book.destroy;\n\n\t              book.destroy = function () {\n\t                book._destroy();\n\n\t                epub.destroy();\n\t                rendition.destroy();\n\t              }; // epub.destroy();\n\n\n\t              book.epub = epub;\n\t              return book;\n\t            }));\n\n\t          case 5:\n\t          case \"end\":\n\t            return _context.stop();\n\t        }\n\t      }\n\t    }, _callee, this);\n\t  }));\n\t  return _ePub.apply(this, arguments);\n\t}\n\n\tePub.VERSION = EPUBJS_VERSION;\n\tePub.CFI = EpubCFI;\n\tePub.Book = Book;\n\tePub.Rendition = Rendition;\n\tePub.Contents = Contents;\n\tePub.utils = utils;\n\tePub.Epub = Epub;\n\tePub.EpubBridge = Epub;\n\n\treturn ePub;\n\n})));\n//# sourceMappingURL=epub.js.map\n";var BRIDGE="window.onerror = function (message, file, line, col, error) {\n  var msg = JSON.stringify({method:\"error\", value: message});\n  window.postMessage(msg, \"*\");\n};\n\n(function () {\n   var waitForReactNativePostMessageReady;\n\n  function _ready() {\n    var contents;\n    var targetOrigin = \"*\";\n    var sendMessage = function(obj) {\n      try {\n          window.postMessage(JSON.stringify(obj), targetOrigin);\n      } catch (error) {\n          window.postMessage(error.message, targetOrigin);\n      }\n    };\n\n    var preventTap = false;\n    var q = [];\n    var _isReady = false;\n\n    var book;\n    var rendition;\n\n    var minSpreadWidth = 800;\n    var axis = \"horizontal\";\n\n    var isChrome = /Chrome/.test(navigator.userAgent);\n    var isWebkit = !isChrome && /AppleWebKit/.test(navigator.userAgent);\n\n    var snapWidth = window.innerWidth;\n    var last_known_scroll_position = 0;\n    var ticking = false;\n    var touchCanceler = false;\n    var resizeCanceler = false;\n    var animating = false;\n\n    // debug\n    console.log = function() {\n      sendMessage({method:\"log\", value: Array.from(arguments)});\n    };\n\n    console.error = function() {\n      sendMessage({method:\"error\", value: Array.from(arguments)});\n    };\n\n    // var isReactNativePostMessageReady = !!window.originalPostMessage;\n    var isReactNativePostMessageReady = !!window.originalPostMessage || window.postMessage.toString().indexOf(\"[native code]\") === -1;\n    var hasReactNativePostMessage = typeof window.webkit !== \"undefined\" &&\n                                    typeof window.webkit.messageHandlers !== \"undefined\" &&\n                                    typeof window.webkit.messageHandlers.reactNative !== \"undefined\" &&\n                                    typeof window.webkit.messageHandlers.reactNative.postMessage !== \"undefined\";\n\n    clearTimeout(waitForReactNativePostMessageReady);\n    if (!isReactNativePostMessageReady && hasReactNativePostMessage) {\n      window.originalPostMessage = window.postMessage;\n      window.postMessage = function (data) { window.webkit.messageHandlers.reactNative.postMessage(data); };\n    } else if (!isReactNativePostMessageReady && !hasReactNativePostMessage){\n      waitForReactNativePostMessageReady = setTimeout(_ready, 1);\n      return;\n    }\n\n    function onMessage(e) {\n      var message = e.data;\n      handleMessage(message);\n    }\n\n    async function handleMessage(message) {\n      var decoded = (typeof message === \"object\") ? message : JSON.parse(message);\n      var response;\n      var result;\n\n      switch (decoded.method) {\n        case \"open\":\n          var url = decoded.args[0];\n          var options = decoded.args.length > 1 && decoded.args[1];\n          await openEpub(url, options);\n\n          if (options && options.webviewStylesheet) {\n            var head = document.getElementsByTagName('head')[0];\n            var link = document.createElement('link');\n            link.rel = 'stylesheet';\n            link.type = 'text/css';\n            link.href = options.webviewStylesheet;\n            head.appendChild(link);\n          }\n          break;\n\n        case \"display\":\n          var args = decoded.args && decoded.args.length && decoded.args[0];\n          var target;\n\n\n          if (!args) {\n            target = undefined;\n          }\n          else if (args.target) {\n            target = args.target.toString();\n          }\n          else if (args.spine) {\n            target = parseInt(args.spine);\n          }\n\n          if (rendition) {\n            rendition.display(target);\n          } else {\n            q.push(message);\n          }\n          break;\n\n        case \"flow\":\n          var direction = decoded.args.length && decoded.args[0];\n          axis = (direction === \"paginated\") ? \"horizontal\" : \"vertical\";\n\n          if (rendition) {\n            rendition.flow(direction);\n          } else {\n            q.push(message);\n          }\n          break;\n\n        case \"setLocations\":\n          var locations = decoded.args[0];\n          if (book) {\n            book.locations.load(locations);\n          } else {\n            q.push(message);\n          }\n\n          if (rendition) {\n            rendition.reportLocation();\n          }\n          break;\n\n        case \"reportLocation\":\n          if (rendition) {\n            rendition.reportLocation();\n          } else {\n            q.push(message);\n          }\n          break;\n\n        case \"minSpreadWidth\":\n          minSpreadWidth = decoded.args;\n          break;\n\n        case \"mark\":\n          if (rendition) {\n            rendition.annotations.mark.apply(rendition.annotations, decoded.args);\n          } else {\n            q.push(message);\n          }\n          break;\n\n        case \"underline\":\n          if (rendition) {\n            rendition.annotations.underline.apply(rendition.annotations, decoded.args);\n          } else {\n            q.push(message);\n          }\n          break;\n\n        case \"highlight\":\n          if (rendition) {\n            rendition.annotations.highlight.apply(rendition.annotations, decoded.args);\n          } else {\n            q.push(message);\n          }\n          break;\n\n        case \"removeAnnotation\":\n          if (rendition) {\n            rendition.annotations.remove.apply(rendition.annotations, decoded.args);\n          } else {\n            q.push(message);\n          }\n          break;\n\n        case \"themes\":\n          var themes = decoded.args[0];\n          if (rendition) {\n            rendition.themes.register(themes);\n          } else {\n            q.push(message);\n          }\n          break;\n\n        case \"theme\":\n          var theme = decoded.args[0];\n          if (rendition) {\n            rendition.themes.select(theme);\n          } else {\n            q.push(message);\n          }\n          break;\n\n        case \"fontSize\":\n          var fontSize = decoded.args[0];\n          if (rendition) {\n            rendition.themes.fontSize(fontSize);\n          } else {\n            q.push(message);\n          }\n          break;\n\n        case \"font\":\n          var font = decoded.args[0];\n          if (rendition) {\n            rendition.themes.font(font);\n          } else {\n            q.push(message);\n          }\n          break;\n\n        case \"next\":\n          if (rendition) {\n            rendition.next();\n          } else {\n            q.push(message);\n          }\n          break;\n\n        case \"prev\":\n          if (rendition) {\n            rendition.prev();\n          } else {\n            q.push(message);\n          }\n          break;\n      }\n    }\n\n    async function openEpub(url, options) {\n      var settings = Object.assign({\n        manager: \"continuous\",\n        overflow: \"visible\"\n      }, options);\n\n      ePub(url).then(book => {\n          window.rendition = rendition = book.renderTo(document.body, settings);\n\n          rendition.hooks.content.register(function (contents) {\n              var doc = contents.document;\n              var startPosition = {x: -1, y: -1};\n              var currentPosition = {x: -1, y: -1};\n              var isLongPress = false;\n              var longPressTimer;\n              var touchduration = 300;\n              var $body = doc.getElementsByTagName('body')[0];\n\n              function touchStartHandler(e) {\n                  var f, target;\n                  startPosition.x = e.targetTouches[0].pageX;\n                  startPosition.y = e.targetTouches[0].pageY;\n                  currentPosition.x = e.targetTouches[0].pageX;\n                  currentPosition.y = e.targetTouches[0].pageY;\n                  isLongPress = false;\n\n                  if (isWebkit) {\n                      for (var i = 0; i < e.targetTouches.length; i++) {\n                          f = e.changedTouches[i].force;\n                          if (f >= 0.8 && !preventTap) {\n                              target = e.changedTouches[i].target;\n\n                              if (target.getAttribute(\"ref\") === \"epubjs-mk\") {\n                                  return;\n                              }\n\n                              clearTimeout(longPressTimer);\n\n                              cfi = contents.cfiFromNode(target).toString();\n\n                              sendMessage({method: \"longpress\", position: currentPosition, cfi: cfi});\n                              isLongPress = false;\n                              preventTap = true;\n                          }\n                      }\n                  }\n\n\n                  longPressTimer = setTimeout(function () {\n                      target = e.targetTouches[0].target;\n\n                      if (target.getAttribute(\"ref\") === \"epubjs-mk\") {\n                          return;\n                      }\n\n                      cfi = contents.cfiFromNode(target).toString();\n\n                      sendMessage({method: \"longpress\", position: currentPosition, cfi: cfi});\n                      preventTap = true;\n                  }, touchduration);\n              }\n\n              function touchMoveHandler(e) {\n                  currentPosition.x = e.targetTouches[0].pageX;\n                  currentPosition.y = e.targetTouches[0].pageY;\n                  clearTimeout(longPressTimer);\n              }\n\n              function touchEndHandler(e) {\n                  var cfi;\n                  clearTimeout(longPressTimer);\n\n                  if (preventTap) {\n                      preventTap = false;\n                      return;\n                  }\n\n                  if (Math.abs(startPosition.x - currentPosition.x) < 2 &&\n                      Math.abs(startPosition.y - currentPosition.y) < 2) {\n\n                      var target = e.changedTouches[0].target;\n\n                      if (target.getAttribute(\"ref\") === \"epubjs-mk\" ||\n                          target.getAttribute(\"ref\") === \"epubjs-hl\" ||\n                          target.getAttribute(\"ref\") === \"epubjs-ul\") {\n                          return;\n                      }\n\n                      cfi = contents.cfiFromNode(target).toString();\n\n                      if (isLongPress) {\n                          sendMessage({method: \"longpress\", position: currentPosition, cfi: cfi});\n                          isLongPress = false;\n                      } else {\n                          setTimeout(function () {\n                              if (preventTap) {\n                                  preventTap = false;\n                                  isLongPress = false;\n                                  return;\n                              }\n                              sendMessage({method: \"press\", position: currentPosition, cfi: cfi});\n                          }, 10);\n                      }\n                  }\n              }\n\n              function touchForceHandler(e) {\n                  var f = e.changedTouches[0].force;\n                  if (f >= 0.8 && !preventTap) {\n                      var target = e.changedTouches[0].target;\n\n                      if (target.getAttribute(\"ref\") === \"epubjs-mk\") {\n                          return;\n                      }\n\n                      clearTimeout(longPressTimer);\n\n                      cfi = contents.cfiFromNode(target).toString();\n\n                      sendMessage({method: \"longpress\", position: currentPosition, cfi: cfi});\n                      isLongPress = false;\n                      preventTap = true;\n                  }\n              }\n\n              if (!isWebkit) {\n\n                  var prevX;\n                  var flick = 0;\n                  var pan = false;\n\n                  doc.addEventListener('touchmove', function (e) {\n                      var screenX = e.touches[0].screenX;\n                      var delta = prevX - screenX;\n\n                      touchMoveHandler(e);\n\n                      if (axis !== \"horizontal\") {\n                          return;\n                      }\n\n                      if (Math.abs(delta) > 0.5) {\n                          pan = true;\n                      }\n\n                      if (delta > 20) {\n                          flick = 1;\n                      }\n\n                      if (delta < -20) {\n                          flick = -1;\n                      }\n\n                      // if (!animating) {\n                      //   if (delta) {\n                      //     window.scrollBy(delta, 0);\n                      //   }\n                      // }\n\n                      prevX = screenX;\n\n                      e.preventDefault();\n                  }, {capture: true, passive: false});\n\n                  doc.addEventListener('touchstart', function (e) {\n\n                      touchStartHandler(e);\n\n                      resizeCanceler = false;\n\n                  }, {capture: false, passive: true});\n\n                  doc.addEventListener('touchend', function (e) {\n\n                      touchEndHandler(e);\n\n                      if (axis !== \"horizontal\") {\n                          return;\n                      }\n\n                      if (!animating) {\n\n                          if (flick === 1) {\n                              snap(last_known_scroll_position + snapWidth + 10);\n                          }\n                          else if (flick === -1) {\n                              snap(last_known_scroll_position - snapWidth + 10);\n                          }\n                          else if (pan) {\n                              snap(last_known_scroll_position);\n                          }\n\n                      }\n\n                      prevX = undefined;\n                      flick = 0;\n                      pan = false;\n                  }, {capture: true, passive: false});\n\n              } else {\n                  doc.addEventListener(\"touchstart\", touchStartHandler, false);\n\n                  doc.addEventListener(\"touchmove\", touchMoveHandler, false);\n\n                  doc.addEventListener(\"touchend\", touchEndHandler, false);\n\n                  doc.addEventListener('touchforcechange', touchForceHandler, false);\n              }\n\n          }.bind(this));\n\n          rendition.on(\"relocated\", function (location) {\n              sendMessage({method: \"relocated\", location: location});\n          });\n\n          rendition.on(\"selected\", function (cfiRange) {\n              preventTap = true;\n              sendMessage({method: \"selected\", cfiRange: cfiRange});\n          });\n\n          rendition.on(\"markClicked\", function (cfiRange, data) {\n              preventTap = true;\n              sendMessage({method: \"markClicked\", cfiRange: cfiRange, data: data});\n          });\n\n          rendition.on(\"rendered\", function (section) {\n              sendMessage({method: \"rendered\", sectionIndex: section.index});\n          });\n\n          rendition.on(\"added\", function (section) {\n              sendMessage({method: \"added\", sectionIndex: section.index});\n          });\n\n          rendition.on(\"removed\", function (section) {\n              sendMessage({method: \"removed\", sectionIndex: section.index});\n          });\n\n          rendition.on(\"resized\", function (size) {\n              sendMessage({method: \"resized\", size: size});\n          });\n\n          // replay messages\n          rendition.started.then(function () {\n              var msg;\n              for (var i = 0; i < q.length; i++) {\n                  msg = q.shift();\n                  handleMessage(msg);\n              }\n          });\n\n          book.epub.ready.then(function () {\n              _isReady = true;\n              sendMessage({method: \"ready\"});\n          });\n      });\n\n      window.addEventListener(\"unload\", function () {\n        book && book.destroy();\n      });\n    }\n\n    window.addEventListener(\"message\", onMessage);\n    // React native uses document for postMessages\n    document.addEventListener(\"message\", onMessage);\n\n    sendMessage({method:\"loaded\", value: true});\n\n    // Snap scrolling\n    if(!isWebkit) {\n\n      // Disable momentum scrolling\n      document.getElementsByTagName('body')[0].style.overflow = \"hidden\";\n\n      window.addEventListener('scroll', function(e) {\n        last_known_scroll_position = window.scrollX;\n      });\n\n      window.addEventListener('resize', function(e) {\n        resizeCanceler = true;\n        snapWidth = window.innerWidth;\n        animating = false;\n      });\n    }\n\n    function snap(scroll_pos) {\n      var snapTo = Math.round(scroll_pos / snapWidth) * snapWidth;\n      if (scroll_pos % snapWidth > 0) {\n        scrollToX(snapTo, 25000);\n      }\n    }\n\n    function scrollToX(scrollTargetX, speed, easing) {\n        var scrollX = window.scrollX,\n            scrollTargetX = scrollTargetX || 0,\n            speed = speed || 2000,\n            easing = easing || 'easeOutSine',\n            currentTime = 0;\n\n        animating = true;\n\n        // min time .1, max time .8 seconds\n        var time = Math.max(.1, Math.min(Math.abs(scrollX - scrollTargetX) / speed, .8));\n\n        // easing equations from https://github.com/danro/easing-js/blob/master/easing.js\n        var PI_D2 = Math.PI / 2,\n        easingEquations = {\n            easeOutSine: function (pos) {\n                return Math.sin(pos * (Math.PI / 2));\n            },\n            easeInOutSine: function (pos) {\n                return (-0.5 * (Math.cos(Math.PI * pos) - 1));\n            },\n            easeInOutQuint: function (pos) {\n                if ((pos /= 0.5) < 1) {\n                    return 0.5 * Math.pow(pos, 5);\n                }\n                return 0.5 * (Math.pow((pos - 2), 5) + 2);\n            }\n        };\n\n        // add animation loop\n        function tick() {\n            currentTime += 1 / 60;\n\n            var p = currentTime / time;\n            var t = easingEquations[easing](p);\n\n            if (touchCanceler) {\n              return;\n            }\n\n            if (resizeCanceler) {\n              resizeCanceler = false;\n              return;\n            }\n\n            if (p < 1) {\n                window.requestAnimationFrame(tick);\n\n                window.scrollTo(scrollX + ((scrollTargetX - scrollX) * t), 0);\n            } else {\n                window.scrollTo(scrollTargetX, 0);\n                animating = false;\n            }\n        }\n\n        tick();\n    }\n  }\n\n  if ( document.readyState === 'complete' ) {\n    _ready();\n  } else {\n    window.addEventListener(\"load\", _ready, false);\n  }\n}());\n";var EMBEDDED_HTML="\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no, shrink-to-fit=no\">\n  <title>epubjs</title>\n  <script>"+EPUBJS+"</script>\n  <script>"+BRIDGE+"</script>\n  <style>\n    body {\n      margin: 0;\n      -webkit-tap-highlight-color: rgba(0,0,0,0);\n      -webkit-tap-highlight-color: transparent; /* For some Androids */\n    }\n  </style>\n</head><body></body></html>\n";var Rendition=function(_Component){_inherits(Rendition,_Component);function Rendition(props){_classCallCheck(this,Rendition);var _this=_possibleConstructorReturn(this,(Rendition.__proto__||Object.getPrototypeOf(Rendition)).call(this,props));_this.state={loaded:false};return _this;}_createClass(Rendition,[{key:"componentDidMount",value:function componentDidMount(){this._isMounted=true;if(this.props.url){this.load(this.props.url);}}},{key:"componentWillUnmount",value:function componentWillUnmount(){this._isMounted=false;this.destroy();}},{key:"componentDidUpdate",value:function componentDidUpdate(prevProps){if(prevProps.url!==this.props.url){this.load(this.props.url);}if(prevProps.display!==this.props.display){this.display(this.props.display);}if(prevProps.orientation!==this.props.orientation){}if(prevProps.flow!==this.props.flow){this.flow(this.props.flow||"paginated");}if(prevProps.themes!==this.props.themes){this.themes(this.props.themes);}if(prevProps.themes!==this.props.theme){this.theme(this.props.theme);}if(prevProps.fontSize!==this.props.fontSize){this.fontSize(this.props.fontSize);}if(prevProps.font!==this.props.font){this.font(this.props.font);}}},{key:"load",value:function load(bookUrl){if(!this._webviewLoaded)return;var config={"minSpreadWidth":this.props.minSpreadWidth||800,"flow":this.props.flow||"paginated"};if(this.props.stylesheet){config.stylesheet=this.props.stylesheet;}if(this.props.webviewStylesheet){config.webviewStylesheet=this.props.webviewStylesheet;}if(this.props.script){config.script=this.props.script;}this.sendToBridge("open",[bookUrl,config]);this.display(this.props.display);if(this.props.themes){this.themes(this.props.themes);}if(this.props.theme){this.theme(this.props.theme);}if(this.props.fontSize){this.fontSize(this.props.fontSize);}if(this.props.font){this.font(this.props.font);}}},{key:"display",value:function display(target){var spine=typeof target==="number"&&target;if(!this._webviewLoaded)return;if(spine){this.sendToBridge("display",[{"spine":spine}]);}else if(target){this.sendToBridge("display",[{"target":target}]);}else{this.sendToBridge("display");}}},{key:"flow",value:function flow(f){this.sendToBridge("flow",[f]);}},{key:"themes",value:function themes(t){this.sendToBridge("themes",[t]);}},{key:"theme",value:function theme(t){this.sendToBridge("theme",[t]);}},{key:"font",value:function font(f){this.sendToBridge("font",[f]);}},{key:"fontSize",value:function fontSize(f){this.sendToBridge("fontSize",[f]);}},{key:"setLocations",value:function setLocations(locations){this.locations=locations;if(this.isReady){this.sendToBridge("setLocations",[this.locations]);}}},{key:"reportLocation",value:function reportLocation(){if(this.isReady){this.sendToBridge("reportLocation");}}},{key:"highlight",value:function highlight(cfiRange,data){this.sendToBridge("highlight",[cfiRange,data]);}},{key:"underline",value:function underline(cfiRange,data){this.sendToBridge("underline",[cfiRange,data]);}},{key:"mark",value:function mark(cfiRange,data){this.sendToBridge("mark",[cfiRange,data]);}},{key:"unhighlight",value:function unhighlight(cfiRange,data){this.sendToBridge("removeAnnotation",[cfiRange,data]);}},{key:"ununderline",value:function ununderline(cfiRange,data){this.sendToBridge("removeAnnotation",[cfiRange,data]);}},{key:"unmark",value:function unmark(cfiRange,data){this.sendToBridge("removeAnnotation",[cfiRange,data]);}},{key:"next",value:function next(){this.sendToBridge("next");}},{key:"prev",value:function prev(){this.sendToBridge("prev");}},{key:"destroy",value:function destroy(){}},{key:"postMessage",value:function postMessage(str){if(this.refs.webviewbridge){return this.refs.webviewbridge.postMessage(str);}}},{key:"sendToBridge",value:function sendToBridge(method,args,promiseId){var str=JSON.stringify({method:method,args:args,promise:promiseId});if(!this.refs.webviewbridge){return;}console.log("[Rendition] send to bridge: "+str);this.refs.webviewbridge.postMessage(str);}},{key:"_onWebViewLoaded",value:function _onWebViewLoaded(){this._webviewLoaded=true;console.log('[Rendition] Web view has loaded');if(this.props.url){this.load(this.props.url);}}},{key:"_onBridgeMessage",value:function _onBridgeMessage(e){var msg=e.nativeEvent.data;var decoded;if(typeof msg==="string"){decoded=JSON.parse(msg);}else{decoded=msg;}var p;console.log('[Rendition] onBridgeMessage',decoded);switch(decoded.method){case"log":{console.log.apply(console.log,[decoded.value]);break;}case"error":{if(this.props.onError){this.props.onError(decoded.value);}else{console.error.apply(console.error,[decoded.value]);}break;}case"loaded":{this._onWebViewLoaded();break;}case"rendered":{if(!this.state.loaded){this.setState({loaded:true});}break;}case"relocated":{var _decoded=decoded,location=_decoded.location;this._relocated(location);if(!this.state.loaded){this.setState({loaded:true});}break;}case"resized":{var _decoded2=decoded,size=_decoded2.size;console.log("resized",size.width,size.height);break;}case"press":{this.props.onPress&&this.props.onPress(decoded.cfi,decoded.position,this);break;}case"longpress":{this.props.onLongPress&&this.props.onLongPress(decoded.cfi,this);break;}case"selected":{var _decoded3=decoded,cfiRange=_decoded3.cfiRange;this._selected(cfiRange);break;}case"markClicked":{var _decoded4=decoded,_cfiRange=_decoded4.cfiRange,data=_decoded4.data;this._markClicked(_cfiRange,data);break;}case"added":{var _decoded5=decoded,sectionIndex=_decoded5.sectionIndex;this.props.onViewAdded&&this.props.onViewAdded(sectionIndex);break;}case"removed":{var _decoded6=decoded,_sectionIndex=_decoded6.sectionIndex;this.props.beforeViewRemoved&&this.props.beforeViewRemoved(_sectionIndex);break;}case"ready":{this._ready();break;}default:{console.log("[Rendition] msg",decoded);}}}},{key:"_relocated",value:function _relocated(visibleLocation){this._visibleLocation=visibleLocation;if(this.props.onRelocated){this.props.onRelocated(visibleLocation,this);}}},{key:"_selected",value:function _selected(cfiRange){if(this.props.onSelected){this.props.onSelected(cfiRange,this);}}},{key:"_markClicked",value:function _markClicked(cfiRange,data){if(this.props.onMarkClicked){this.props.onMarkClicked(cfiRange,data,this);}}},{key:"_ready",value:function _ready(){this.isReady=true;if(this.locations){}this.props.onDisplayed&&this.props.onDisplayed();}},{key:"render",value:function render(){var _this2=this;var WebViewer=_reactNative.Platform.OS==='ios'?_reactNativeWkwebviewReborn2.default:_reactNative.WebView;var loader=_react2.default.createElement(_reactNative.TouchableOpacity,{onPress:function onPress(){return _this2.props.onPress('');},style:styles.loadScreen,__source:{fileName:_jsxFileName,lineNumber:372}},_react2.default.createElement(_reactNative.View,{style:[styles.loadScreen,{backgroundColor:this.props.backgroundColor||"#FFFFFF"}],__source:{fileName:_jsxFileName,lineNumber:373}},_react2.default.createElement(_reactNative.ActivityIndicator,{color:this.props.color||"black",size:this.props.size||"large",style:{flex:1},__source:{fileName:_jsxFileName,lineNumber:376}})));if(!this.props.url){return loader;}return _react2.default.createElement(_reactNative.View,{ref:"framer",style:styles.container,__source:{fileName:_jsxFileName,lineNumber:390}},_react2.default.createElement(WebViewer,{ref:"webviewbridge",source:{html:EMBEDDED_HTML,baseUrl:this.props.url},style:[styles.manager,{backgroundColor:this.props.backgroundColor||"#FFFFFF"}],scalesPageToFit:false,bounces:false,javaScriptEnabled:true,scrollEnabled:true,pagingEnabled:this.props.flow==="paginated",onMessage:this._onBridgeMessage.bind(this),__source:{fileName:_jsxFileName,lineNumber:391}}),!this.state.loaded?loader:null);}}]);return Rendition;}(_react.Component);var styles=_reactNative.StyleSheet.create({container:{flex:1,flexDirection:"column"},manager:{flex:1},scrollContainer:{flex:1,marginTop:0,flexDirection:"row",flexWrap:"nowrap",backgroundColor:"#F8F8F8"},rowContainer:{flex:1},loadScreen:{position:"absolute",top:0,bottom:0,left:0,right:0,backgroundColor:"#fff",justifyContent:"center",alignItems:"center"}});(0,_eventEmitter2.default)(Rendition.prototype);module.exports=Rendition;